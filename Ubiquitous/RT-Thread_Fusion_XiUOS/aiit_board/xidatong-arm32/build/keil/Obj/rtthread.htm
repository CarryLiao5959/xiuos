<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\keil\Obj\rtthread.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\keil\Obj\rtthread.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jul 25 09:23:17 2023
<BR><P>
<H3>Maximum Stack Usage =       2532 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rt_usbh_hub_irq &rArr; rt_usbh_hub_port_change &rArr; rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">NMI_Handler</a><BR>
 <LI><a href="#[1f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">BusFault_Handler</a><BR>
 <LI><a href="#[20]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">UsageFault_Handler</a><BR>
 <LI><a href="#[21]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">SVC_Handler</a><BR>
 <LI><a href="#[22]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">DebugMon_Handler</a><BR>
 <LI><a href="#[5c7]">msh_exec_script</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4cc]">msh_exec</a><BR>
 <LI><a href="#[553]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[553]">netconn_drain</a><BR>
 <LI><a href="#[57a]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1aa]">lwip_sendto</a><BR>
 <LI><a href="#[286]">CLOCK_GetPerClkFreq</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[283]">CLOCK_GetFreq</a><BR>
 <LI><a href="#[40c]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40c]">copydir</a><BR>
 <LI><a href="#[403]">directory_delete_for_msh</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[403]">directory_delete_for_msh</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a0]">ACMP1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a1]">ACMP2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a2]">ACMP3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a3]">ACMP4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[68]">ADC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[69]">ADC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9e]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9b]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9c]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9d]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5c]">BEE_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1f]">BusFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e1]">CAN1_DriverIRQHandler</a> from fsl_flexcan.o(i.CAN1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[49]">CAN1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e2]">CAN2_DriverIRQHandler</a> from fsl_flexcan.o(i.CAN2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[4a]">CAN2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[84]">CCM_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[85]">CCM_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[38]">CORE_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[50]">CSI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[56]">CSU_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[36]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[37]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6a]">DCDC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[57]">DCP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[58]">DCP_VMI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c0]">DMA0_DMA16_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[25]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ca]">DMA10_DMA26_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2f]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[cb]">DMA11_DMA27_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[30]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[cc]">DMA12_DMA28_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[31]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[cd]">DMA13_DMA29_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[32]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ce]">DMA14_DMA30_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[33]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[cf]">DMA15_DMA31_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[34]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c1]">DMA1_DMA17_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[26]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c2]">DMA2_DMA18_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[27]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c3]">DMA3_DMA19_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[28]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c4]">DMA4_DMA20_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[29]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c5]">DMA5_DMA21_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2a]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c6]">DMA6_DMA22_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2b]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c7]">DMA7_DMA23_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2c]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c8]">DMA8_DMA24_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2d]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c9]">DMA9_DMA25_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2e]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d0]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[35]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[22]">DebugMon_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[bd]">DefaultISR</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[bd]">DefaultISR</a> from startup_mimxrt1052.o(.text) referenced 87 times from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a6]">ENC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a7]">ENC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a8]">ENC3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a9]">ENC4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ee]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[98]">ENET_1588_Timer_IRQHandler</a> from fsl_enet.o(i.ENET_1588_Timer_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ed]">ENET_DriverIRQHandler</a> from fsl_enet.o(i.ENET_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[f8]">ENET_ErrorIRQHandler</a> from fsl_enet.o(i.ENET_ErrorIRQHandler) referenced from fsl_enet.o(i.ENET_SetHandler)
 <LI><a href="#[97]">ENET_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[f7]">ENET_ReceiveIRQHandler</a> from fsl_enet.o(i.ENET_ReceiveIRQHandler) referenced from fsl_enet.o(i.ENET_SetHandler)
 <LI><a href="#[f6]">ENET_TransmitIRQHandler</a> from fsl_enet.o(i.ENET_TransmitIRQHandler) referenced from fsl_enet.o(i.ENET_SetHandler)
 <LI><a href="#[83]">EWM_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[f9]">FLEXCAN_TransferHandleIRQ</a> from fsl_flexcan.o(i.FLEXCAN_TransferHandleIRQ) referenced from fsl_flexcan.o(i.FLEXCAN_TransferCreateHandle)
 <LI><a href="#[e8]">FLEXIO1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[7f]">FLEXIO1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e9]">FLEXIO2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[80]">FLEXIO2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4b]">FLEXRAM_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ea]">FLEXSPI_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[91]">FLEXSPI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[86]">GPC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[75]">GPIO1_Combined_0_15_IRQHandler</a> from drv_gpio.o(i.GPIO1_Combined_0_15_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[76]">GPIO1_Combined_16_31_IRQHandler</a> from drv_gpio.o(i.GPIO1_Combined_16_31_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6d]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6e]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6f]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[70]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[71]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[72]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[73]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[74]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[77]">GPIO2_Combined_0_15_IRQHandler</a> from drv_gpio.o(i.GPIO2_Combined_0_15_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[78]">GPIO2_Combined_16_31_IRQHandler</a> from drv_gpio.o(i.GPIO2_Combined_16_31_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[79]">GPIO3_Combined_0_15_IRQHandler</a> from drv_gpio.o(i.GPIO3_Combined_0_15_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7a]">GPIO3_Combined_16_31_IRQHandler</a> from drv_gpio.o(i.GPIO3_Combined_16_31_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7b]">GPIO4_Combined_0_15_IRQHandler</a> from drv_gpio.o(i.GPIO4_Combined_0_15_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7c]">GPIO4_Combined_16_31_IRQHandler</a> from drv_gpio.o(i.GPIO4_Combined_16_31_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7d]">GPIO5_Combined_0_15_IRQHandler</a> from drv_gpio.o(i.GPIO5_Combined_0_15_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7e]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4e]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[89]">GPT1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8a]">GPT2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1d]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4c]">KPP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4f]">LCDIF_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d9]">LPI2C1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[41]">LPI2C1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[da]">LPI2C2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[42]">LPI2C2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[db]">LPI2C3_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[43]">LPI2C3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[dc]">LPI2C4_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[44]">LPI2C4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[dd]">LPSPI1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[45]">LPSPI1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[de]">LPSPI2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[46]">LPSPI2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[df]">LPSPI3_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[47]">LPSPI3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e0]">LPSPI4_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[48]">LPSPI4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d1]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[39]">LPUART1_IRQHandler</a> from drv_uart.o(i.LPUART1_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d2]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[3a]">LPUART2_IRQHandler</a> from drv_uart.o(i.LPUART2_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d3]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[3b]">LPUART3_IRQHandler</a> from drv_uart.o(i.LPUART3_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d4]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[3c]">LPUART4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d5]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[3d]">LPUART5_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d6]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[3e]">LPUART6_IRQHandler</a> from drv_uart.o(i.LPUART6_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d7]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[3f]">LPUART7_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d8]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[40]">LPUART8_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1e]">MemManage_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1c]">NMI_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9f]">PIT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[62]">PMU_EVENT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8b]">PWM1_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8c]">PWM1_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8d]">PWM1_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8e]">PWM1_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8f]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ae]">PWM2_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[af]">PWM2_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b0]">PWM2_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b1]">PWM2_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b2]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b3]">PWM3_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b4]">PWM3_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b5]">PWM3_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b6]">PWM3_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b7]">PWM3_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b8]">PWM4_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b9]">PWM4_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ba]">PWM4_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[bb]">PWM4_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[bc]">PWM4_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[51]">PXP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[23]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1d7]">RS232_test</a> from test_232.o(i.RS232_test) referenced from test_232.o(FSymTab)
 <LI><a href="#[1d2]">RS485_test</a> from test_485.o(i.RS485_test) referenced from test_485.o(FSymTab)
 <LI><a href="#[82]">RTWDOG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[88]">Reserved115_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[90]">Reserved123_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a4]">Reserved143_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a5]">Reserved144_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[59]">Reserved68_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[63]">Reserved78_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6b]">Reserved86_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6c]">Reserved87_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1b]">Reset_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e3]">SAI1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[5d]">SAI1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e4]">SAI2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[5e]">SAI2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e5]">SAI3_RX_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[5f]">SAI3_RX_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e6]">SAI3_TX_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[60]">SAI3_TX_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[92]">SEMC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5b]">SJC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[53]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[54]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[55]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[e7]">SPDIF_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[61]">SPDIF_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[87]">SRC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[21]">SVC_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[24]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[be]">SystemInit</a> from system_mimxrt1052.o(i.SystemInit) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[64]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[65]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[aa]">TMR1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ab]">TMR2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ac]">TMR3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ad]">TMR4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5a]">TRNG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4d]">TSC_DIG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1d1]">TestShellFunc</a> from test_shell.o(i.TestShellFunc) referenced from test_shell.o(FSymTab)
 <LI><a href="#[1cf]">TestShellMain</a> from test_shell.o(i.TestShellMain) referenced from test_shell.o(FSymTab)
 <LI><a href="#[1d0]">TestShellMainVoid</a> from test_shell.o(i.TestShellMainVoid) referenced from test_shell.o(FSymTab)
 <LI><a href="#[178]">USB_HostEhciClosePipe</a> from usb_host_ehci.o(i.USB_HostEhciClosePipe) referenced from usb_host_hci.o(.constdata)
 <LI><a href="#[175]">USB_HostEhciCreate</a> from usb_host_ehci.o(i.USB_HostEhciCreate) referenced from usb_host_hci.o(.constdata)
 <LI><a href="#[176]">USB_HostEhciDestory</a> from usb_host_ehci.o(i.USB_HostEhciDestory) referenced from usb_host_hci.o(.constdata)
 <LI><a href="#[17b]">USB_HostEhciIoctl</a> from usb_host_ehci.o(i.USB_HostEhciIoctl) referenced from usb_host_hci.o(.constdata)
 <LI><a href="#[177]">USB_HostEhciOpenPipe</a> from usb_host_ehci.o(i.USB_HostEhciOpenPipe) referenced from usb_host_hci.o(.constdata)
 <LI><a href="#[17a]">USB_HostEhciReadpipe</a> from usb_host_ehci.o(i.USB_HostEhciReadpipe) referenced from usb_host_hci.o(.constdata)
 <LI><a href="#[179]">USB_HostEhciWritePipe</a> from usb_host_ehci.o(i.USB_HostEhciWritePipe) referenced from usb_host_hci.o(.constdata)
 <LI><a href="#[fa]">USB_HostEnumerationTransferCallback</a> from usb_host_devices.o(i.USB_HostEnumerationTransferCallback) referenced from usb_host_devices.o(i.USB_HostProcessState)
 <LI><a href="#[172]">USB_HostProcessCallback</a> from usb_host_devices.o(i.USB_HostProcessCallback) referenced 4 times from usb_host_devices.o(.constdata)
 <LI><a href="#[96]">USB_OTG1_IRQHandler</a> from drv_usbh.o(i.USB_OTG1_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[95]">USB_OTG2_IRQHandler</a> from drv_usbh.o(i.USB_OTG2_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[66]">USB_PHY1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[67]">USB_PHY2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[eb]">USDHC1_DriverIRQHandler</a> from fsl_usdhc.o(i.USDHC1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[93]">USDHC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ec]">USDHC2_DriverIRQHandler</a> from fsl_usdhc.o(i.USDHC2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[94]">USDHC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[20]">UsageFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[81]">WDOG1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[52]">WDOG2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[99]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9a]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1fd]">__main</a> from __main.o(!!!main) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[103]">_delayed_work_timeout_handler</a> from workqueue.o(i._delayed_work_timeout_handler) referenced from workqueue.o(i._workqueue_submit_work)
 <LI><a href="#[16]">_ehci0_close_pipe</a> from drv_usbh.o(i._ehci0_close_pipe) referenced 2 times from drv_usbh.o(.data)
 <LI><a href="#[15]">_ehci0_open_pipe</a> from drv_usbh.o(i._ehci0_open_pipe) referenced 2 times from drv_usbh.o(.data)
 <LI><a href="#[14]">_ehci0_pipe_xfer</a> from drv_usbh.o(i._ehci0_pipe_xfer) referenced 2 times from drv_usbh.o(.data)
 <LI><a href="#[13]">_ehci0_reset_port</a> from drv_usbh.o(i._ehci0_reset_port) referenced 2 times from drv_usbh.o(.data)
 <LI><a href="#[112]">_ehci0_usbh_init</a> from drv_usbh.o(i._ehci0_usbh_init) referenced from drv_usbh.o(i.imxrt_usbh_register)
 <LI><a href="#[fd]">_ehci0_usbh_thread</a> from drv_usbh.o(i._ehci0_usbh_thread) referenced from drv_usbh.o(i._ehci0_usbh_init)
 <LI><a href="#[1a]">_ehci1_close_pipe</a> from drv_usbh.o(i._ehci1_close_pipe) referenced 2 times from drv_usbh.o(.data)
 <LI><a href="#[19]">_ehci1_open_pipe</a> from drv_usbh.o(i._ehci1_open_pipe) referenced 2 times from drv_usbh.o(.data)
 <LI><a href="#[18]">_ehci1_pipe_xfer</a> from drv_usbh.o(i._ehci1_pipe_xfer) referenced 2 times from drv_usbh.o(.data)
 <LI><a href="#[17]">_ehci1_reset_port</a> from drv_usbh.o(i._ehci1_reset_port) referenced 2 times from drv_usbh.o(.data)
 <LI><a href="#[113]">_ehci1_usbh_init</a> from drv_usbh.o(i._ehci1_usbh_init) referenced from drv_usbh.o(i.imxrt_usbh_register)
 <LI><a href="#[ff]">_ehci1_usbh_thread</a> from drv_usbh.o(i._ehci1_usbh_thread) referenced from drv_usbh.o(i._ehci1_usbh_init)
 <LI><a href="#[100]">_enet_callback</a> from drv_eth.o(i._enet_callback) referenced from drv_eth.o(i._enet_config)
 <LI><a href="#[ef]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[fb]">_imxrt_usb_host_send_callback</a> from drv_usbh.o(i._imxrt_usb_host_send_callback) referenced from drv_usbh.o(i._ehci0_pipe_xfer)
 <LI><a href="#[fb]">_imxrt_usb_host_send_callback</a> from drv_usbh.o(i._imxrt_usb_host_send_callback) referenced from drv_usbh.o(i._ehci1_pipe_xfer)
 <LI><a href="#[173]">_mmc_request</a> from drv_sdio.o(i._mmc_request) referenced from drv_sdio.o(.constdata)
 <LI><a href="#[174]">_mmc_set_iocfg</a> from drv_sdio.o(i._mmc_set_iocfg) referenced from drv_sdio.o(.constdata)
 <LI><a href="#[134]">_pin_control</a> from pin.o(i._pin_control) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[132]">_pin_read</a> from pin.o(i._pin_read) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[133]">_pin_write</a> from pin.o(i._pin_write) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[f2]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[1c6]">_rt_clock_time_system_init</a> from time.o(i._rt_clock_time_system_init) referenced from time.o(.rti_fn.4)
 <LI><a href="#[f1]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[f4]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[f0]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[101]">_thread_exit</a> from thread.o(i._thread_exit) referenced from thread.o(i._thread_init)
 <LI><a href="#[102]">_thread_timeout</a> from thread.o(i._thread_timeout) referenced from thread.o(i._thread_init)
 <LI><a href="#[15f]">_workqueue_thread_entry</a> from workqueue.o(i._workqueue_thread_entry) referenced from workqueue.o(i.rt_workqueue_create)
 <LI><a href="#[11b]">accept_function</a> from api_msg.o(i.accept_function) referenced from api_msg.o(i.lwip_netconn_do_listen)
 <LI><a href="#[1d4]">can2_test</a> from main.o(i.can2_test) referenced from main.o(FSymTab)
 <LI><a href="#[c]">can_cfg</a> from drv_can.o(i.can_cfg) referenced 2 times from drv_can.o(.data)
 <LI><a href="#[d]">can_control</a> from drv_can.o(i.can_control) referenced 2 times from drv_can.o(.data)
 <LI><a href="#[f]">can_recv</a> from drv_can.o(i.can_recv) referenced 2 times from drv_can.o(.data)
 <LI><a href="#[105]">can_rx_call</a> from can_test.o(i.can_rx_call) referenced from can_test.o(i.can_rx_thread)
 <LI><a href="#[106]">can_rx_thread</a> from can_test.o(i.can_rx_thread) referenced from can_test.o(i.can_sample)
 <LI><a href="#[1d5]">can_sample</a> from can_test.o(i.can_sample) referenced from can_test.o(FSymTab)
 <LI><a href="#[e]">can_send</a> from drv_can.o(i.can_send) referenced 2 times from drv_can.o(.data)
 <LI><a href="#[13b]">cantimeout</a> from can.o(i.cantimeout) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[160]">check_netdev_internet_up_work</a> from sal_socket.o(i.check_netdev_internet_up_work) referenced from sal_socket.o(i.sal_check_netdev_internet_up)
 <LI><a href="#[1ed]">clear</a> from cmd.o(i.clear) referenced from cmd.o(FSymTab)
 <LI><a href="#[1d8]">cmd_canstat</a> from can.o(i.cmd_canstat) referenced from can.o(FSymTab)
 <LI><a href="#[1e2]">cmd_cat</a> from msh_file.o(i.cmd_cat) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1e4]">cmd_cd</a> from msh_file.o(i.cmd_cd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1e0]">cmd_cp</a> from msh_file.o(i.cmd_cp) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1ea]">cmd_df</a> from msh_file.o(i.cmd_df) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1eb]">cmd_echo</a> from msh_file.o(i.cmd_echo) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1de]">cmd_free</a> from msh.o(i.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[1df]">cmd_ls</a> from msh_file.o(i.cmd_ls) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1e6]">cmd_mkdir</a> from msh_file.o(i.cmd_mkdir) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1e7]">cmd_mkfs</a> from msh_file.o(i.cmd_mkfs) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1e8]">cmd_mount</a> from msh_file.o(i.cmd_mount) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1e1]">cmd_mv</a> from msh_file.o(i.cmd_mv) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1dd]">cmd_ps</a> from msh.o(i.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[1e5]">cmd_pwd</a> from msh_file.o(i.cmd_pwd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1e3]">cmd_rm</a> from msh_file.o(i.cmd_rm) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1ec]">cmd_tail</a> from msh_file.o(i.cmd_tail) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1e9]">cmd_umount</a> from msh_file.o(i.cmd_umount) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1d9]">date</a> from rtc.o(i.date) referenced from rtc.o(FSymTab)
 <LI><a href="#[17d]">dfs_device_fs_close</a> from devfs.o(i.dfs_device_fs_close) referenced from devfs.o(.constdata)
 <LI><a href="#[181]">dfs_device_fs_getdents</a> from devfs.o(i.dfs_device_fs_getdents) referenced from devfs.o(.constdata)
 <LI><a href="#[17e]">dfs_device_fs_ioctl</a> from devfs.o(i.dfs_device_fs_ioctl) referenced from devfs.o(.constdata)
 <LI><a href="#[183]">dfs_device_fs_mount</a> from devfs.o(i.dfs_device_fs_mount) referenced from devfs.o(.constdata)
 <LI><a href="#[17c]">dfs_device_fs_open</a> from devfs.o(i.dfs_device_fs_open) referenced from devfs.o(.constdata)
 <LI><a href="#[182]">dfs_device_fs_poll</a> from devfs.o(i.dfs_device_fs_poll) referenced from devfs.o(.constdata)
 <LI><a href="#[17f]">dfs_device_fs_read</a> from devfs.o(i.dfs_device_fs_read) referenced from devfs.o(.constdata)
 <LI><a href="#[184]">dfs_device_fs_stat</a> from devfs.o(i.dfs_device_fs_stat) referenced from devfs.o(.constdata)
 <LI><a href="#[180]">dfs_device_fs_write</a> from devfs.o(i.dfs_device_fs_write) referenced from devfs.o(.constdata)
 <LI><a href="#[186]">dfs_elm_close</a> from dfs_elm.o(i.dfs_elm_close) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[18a]">dfs_elm_flush</a> from dfs_elm.o(i.dfs_elm_flush) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[18c]">dfs_elm_getdents</a> from dfs_elm.o(i.dfs_elm_getdents) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[187]">dfs_elm_ioctl</a> from dfs_elm.o(i.dfs_elm_ioctl) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[18b]">dfs_elm_lseek</a> from dfs_elm.o(i.dfs_elm_lseek) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[18f]">dfs_elm_mkfs</a> from dfs_elm.o(i.dfs_elm_mkfs) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[18d]">dfs_elm_mount</a> from dfs_elm.o(i.dfs_elm_mount) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[185]">dfs_elm_open</a> from dfs_elm.o(i.dfs_elm_open) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[188]">dfs_elm_read</a> from dfs_elm.o(i.dfs_elm_read) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[193]">dfs_elm_rename</a> from dfs_elm.o(i.dfs_elm_rename) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[192]">dfs_elm_stat</a> from dfs_elm.o(i.dfs_elm_stat) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[190]">dfs_elm_statfs</a> from dfs_elm.o(i.dfs_elm_statfs) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[191]">dfs_elm_unlink</a> from dfs_elm.o(i.dfs_elm_unlink) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[18e]">dfs_elm_unmount</a> from dfs_elm.o(i.dfs_elm_unmount) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[189]">dfs_elm_write</a> from dfs_elm.o(i.dfs_elm_write) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[1c0]">dfs_init</a> from dfs.o(i.dfs_init) referenced from dfs.o(.rti_fn.2)
 <LI><a href="#[19f]">dfs_net_close</a> from dfs_net.o(i.dfs_net_close) referenced from dfs_net.o(.constdata)
 <LI><a href="#[1a0]">dfs_net_ioctl</a> from dfs_net.o(i.dfs_net_ioctl) referenced from dfs_net.o(.constdata)
 <LI><a href="#[1a3]">dfs_net_poll</a> from dfs_net.o(i.dfs_net_poll) referenced from dfs_net.o(.constdata)
 <LI><a href="#[1a1]">dfs_net_read</a> from dfs_net.o(i.dfs_net_read) referenced from dfs_net.o(.constdata)
 <LI><a href="#[1a2]">dfs_net_write</a> from dfs_net.o(i.dfs_net_write) referenced from dfs_net.o(.constdata)
 <LI><a href="#[107]">dns_recv</a> from dns.o(i.dns_recv) referenced from dns.o(i.dns_alloc_random_port)
 <LI><a href="#[197]">dns_tmr</a> from dns.o(i.dns_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[1c7]">elm_init</a> from dfs_elm.o(i.elm_init) referenced from dfs_elm.o(.rti_fn.4)
 <LI><a href="#[118]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[118]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[10a]">eth_netif_device_init</a> from ethernetif.o(i.eth_netif_device_init) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[10e]">eth_rx_thread_entry</a> from ethernetif.o(i.eth_rx_thread_entry) referenced from ethernetif.o(i.eth_system_device_init_private)
 <LI><a href="#[10f]">eth_tx_thread_entry</a> from ethernetif.o(i.eth_tx_thread_entry) referenced from ethernetif.o(i.eth_system_device_init_private)
 <LI><a href="#[10b]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.eth_netif_device_init)
 <LI><a href="#[195]">etharp_tmr</a> from etharp.o(i.etharp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[166]">ethernet_input</a> from ethernet.o(i.ethernet_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[108]">ethernetif_linkoutput</a> from ethernetif.o(i.ethernetif_linkoutput) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[114]">event_callback</a> from af_inet_lwip.o(i.event_callback) referenced from af_inet_lwip.o(i.inet_socket)
 <LI><a href="#[11c]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_socket)
 <LI><a href="#[110]">finsh_rx_ind</a> from shell.o(i.finsh_rx_ind) referenced from shell.o(i.finsh_set_device)
 <LI><a href="#[1cd]">finsh_system_init</a> from shell.o(i.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[111]">finsh_thread_entry</a> from shell.o(i.finsh_thread_entry) referenced from shell.o(i.finsh_system_init)
 <LI><a href="#[104]">flexcan_callback</a> from drv_can.o(i.flexcan_callback) referenced from drv_can.o(i.can_cfg)
 <LI><a href="#[f3]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[b]">get_link_speed_duplex</a> from lan8720a.o(i.get_link_speed_duplex) referenced 2 times from lan8720a.o(.data)
 <LI><a href="#[a]">get_link_status</a> from lan8720a.o(i.get_link_status) referenced 2 times from lan8720a.o(.data)
 <LI><a href="#[196]">igmp_tmr</a> from igmp.o(i.igmp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[16e]">imxrt_configure</a> from drv_uart.o(i.imxrt_configure) referenced from drv_uart.o(.constdata)
 <LI><a href="#[16f]">imxrt_control</a> from drv_uart.o(i.imxrt_control) referenced from drv_uart.o(.constdata)
 <LI><a href="#[171]">imxrt_getc</a> from drv_uart.o(i.imxrt_getc) referenced from drv_uart.o(.constdata)
 <LI><a href="#[1c4]">imxrt_mci_init</a> from drv_sdio.o(i.imxrt_mci_init) referenced from drv_sdio.o(.rti_fn.3)
 <LI><a href="#[16b]">imxrt_pin_attach_irq</a> from drv_gpio.o(i.imxrt_pin_attach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[16c]">imxrt_pin_detach_irq</a> from drv_gpio.o(i.imxrt_pin_detach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[16d]">imxrt_pin_irq_enable</a> from drv_gpio.o(i.imxrt_pin_irq_enable) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[168]">imxrt_pin_mode</a> from drv_gpio.o(i.imxrt_pin_mode) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[16a]">imxrt_pin_read</a> from drv_gpio.o(i.imxrt_pin_read) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[169]">imxrt_pin_write</a> from drv_gpio.o(i.imxrt_pin_write) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[170]">imxrt_putc</a> from drv_uart.o(i.imxrt_putc) referenced from drv_uart.o(.constdata)
 <LI><a href="#[1c5]">imxrt_usbh_register</a> from drv_usbh.o(i.imxrt_usbh_register) referenced from drv_usbh.o(.rti_fn.3)
 <LI><a href="#[1a9]">inet_accept</a> from af_inet_lwip.o(i.inet_accept) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1b0]">inet_getsockname</a> from af_inet_lwip.o(i.inet_getsockname) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1b1]">inet_ioctlsocket</a> from af_inet_lwip.o(i.inet_ioctlsocket) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1b2]">inet_poll</a> from af_inet_lwip.o(i.inet_poll) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1a4]">inet_socket</a> from af_inet_lwip.o(i.inet_socket) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[167]">ip4_input</a> from ip4.o(i.ip4_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[f5]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[1f8]">list_device</a> from cmd.o(i.list_device) referenced from cmd.o(FSymTab)
 <LI><a href="#[1f1]">list_event</a> from cmd.o(i.list_event) referenced from cmd.o(FSymTab)
 <LI><a href="#[1db]">list_fd</a> from dfs.o(i.list_fd) referenced from dfs.o(FSymTab)
 <LI><a href="#[1f3]">list_mailbox</a> from cmd.o(i.list_mailbox) referenced from cmd.o(FSymTab)
 <LI><a href="#[1f5]">list_memheap</a> from cmd.o(i.list_memheap) referenced from cmd.o(FSymTab)
 <LI><a href="#[1f6]">list_mempool</a> from cmd.o(i.list_mempool) referenced from cmd.o(FSymTab)
 <LI><a href="#[1f4]">list_msgqueue</a> from cmd.o(i.list_msgqueue) referenced from cmd.o(FSymTab)
 <LI><a href="#[1f2]">list_mutex</a> from cmd.o(i.list_mutex) referenced from cmd.o(FSymTab)
 <LI><a href="#[1f0]">list_sem</a> from cmd.o(i.list_sem) referenced from cmd.o(FSymTab)
 <LI><a href="#[1ef]">list_thread</a> from cmd.o(i.list_thread) referenced from cmd.o(FSymTab)
 <LI><a href="#[1f7]">list_timer</a> from cmd.o(i.list_timer) referenced from cmd.o(FSymTab)
 <LI><a href="#[1a6]">lwip_bind</a> from sockets.o(i.lwip_bind) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1a5]">lwip_close</a> from sockets.o(i.lwip_close) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1a8]">lwip_connect</a> from sockets.o(i.lwip_connect) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[115]">lwip_cyclic_timer</a> from timeouts.o(i.lwip_cyclic_timer) referenced from timeouts.o(i.lwip_cyclic_timer)
 <LI><a href="#[115]">lwip_cyclic_timer</a> from timeouts.o(i.lwip_cyclic_timer) referenced from timeouts.o(i.sys_timeouts_init)
 <LI><a href="#[1b6]">lwip_freeaddrinfo</a> from netdb.o(i.lwip_freeaddrinfo) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1b5]">lwip_getaddrinfo</a> from netdb.o(i.lwip_getaddrinfo) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1b3]">lwip_gethostbyname</a> from netdb.o(i.lwip_gethostbyname) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1b4]">lwip_gethostbyname_r</a> from netdb.o(i.lwip_gethostbyname_r) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1af]">lwip_getpeername</a> from sockets.o(i.lwip_getpeername) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1ac]">lwip_getsockopt</a> from sockets.o(i.lwip_getsockopt) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1a7]">lwip_listen</a> from sockets.o(i.lwip_listen) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[11e]">lwip_netconn_do_bind</a> from api_msg.o(i.lwip_netconn_do_bind) referenced from api_lib.o(i.netconn_bind)
 <LI><a href="#[11f]">lwip_netconn_do_close</a> from api_msg.o(i.lwip_netconn_do_close) referenced from api_lib.o(i.netconn_close_shutdown)
 <LI><a href="#[120]">lwip_netconn_do_connect</a> from api_msg.o(i.lwip_netconn_do_connect) referenced from api_lib.o(i.netconn_connect)
 <LI><a href="#[119]">lwip_netconn_do_connected</a> from api_msg.o(i.lwip_netconn_do_connected) referenced from api_msg.o(i.lwip_netconn_do_connect)
 <LI><a href="#[127]">lwip_netconn_do_delconn</a> from api_msg.o(i.lwip_netconn_do_delconn) referenced from api_lib.o(i.netconn_prepare_delete)
 <LI><a href="#[121]">lwip_netconn_do_disconnect</a> from api_msg.o(i.lwip_netconn_do_disconnect) referenced from api_lib.o(i.netconn_disconnect)
 <LI><a href="#[11a]">lwip_netconn_do_dns_found</a> from api_msg.o(i.lwip_netconn_do_dns_found) referenced from api_msg.o(i.lwip_netconn_do_gethostbyname)
 <LI><a href="#[122]">lwip_netconn_do_getaddr</a> from api_msg.o(i.lwip_netconn_do_getaddr) referenced from api_lib.o(i.netconn_getaddr)
 <LI><a href="#[123]">lwip_netconn_do_gethostbyname</a> from api_msg.o(i.lwip_netconn_do_gethostbyname) referenced from api_lib.o(i.netconn_gethostbyname)
 <LI><a href="#[124]">lwip_netconn_do_join_leave_group</a> from api_msg.o(i.lwip_netconn_do_join_leave_group) referenced from api_lib.o(i.netconn_join_leave_group)
 <LI><a href="#[125]">lwip_netconn_do_listen</a> from api_msg.o(i.lwip_netconn_do_listen) referenced from api_lib.o(i.netconn_listen_with_backlog)
 <LI><a href="#[126]">lwip_netconn_do_newconn</a> from api_msg.o(i.lwip_netconn_do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[129]">lwip_netconn_do_recv</a> from api_msg.o(i.lwip_netconn_do_recv) referenced from api_lib.o(i.netconn_tcp_recvd_msg)
 <LI><a href="#[128]">lwip_netconn_do_send</a> from api_msg.o(i.lwip_netconn_do_send) referenced from api_lib.o(i.netconn_send)
 <LI><a href="#[12a]">lwip_netconn_do_write</a> from api_msg.o(i.lwip_netconn_do_write) referenced from api_lib.o(i.netconn_write_vectors_partly)
 <LI><a href="#[19d]">lwip_netdev_netstat</a> from ethernetif.o(i.lwip_netdev_netstat) referenced from ethernetif.o(.constdata)
 <LI><a href="#[19c]">lwip_netdev_ping</a> from ethernetif.o(i.lwip_netdev_ping) referenced from ethernetif.o(.constdata)
 <LI><a href="#[19a]">lwip_netdev_set_addr_info</a> from ethernetif.o(i.lwip_netdev_set_addr_info) referenced from ethernetif.o(.constdata)
 <LI><a href="#[19e]">lwip_netdev_set_default</a> from ethernetif.o(i.lwip_netdev_set_default) referenced from ethernetif.o(.constdata)
 <LI><a href="#[19b]">lwip_netdev_set_dns_server</a> from ethernetif.o(i.lwip_netdev_set_dns_server) referenced from ethernetif.o(.constdata)
 <LI><a href="#[199]">lwip_netdev_set_down</a> from ethernetif.o(i.lwip_netdev_set_down) referenced from ethernetif.o(.constdata)
 <LI><a href="#[198]">lwip_netdev_set_up</a> from ethernetif.o(i.lwip_netdev_set_up) referenced from ethernetif.o(.constdata)
 <LI><a href="#[1ab]">lwip_recvfrom</a> from sockets.o(i.lwip_recvfrom) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1aa]">lwip_sendto</a> from sockets.o(i.lwip_sendto) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1ad]">lwip_setsockopt</a> from sockets.o(i.lwip_setsockopt) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1ae]">lwip_shutdown</a> from sockets.o(i.lwip_shutdown) referenced from af_inet_lwip.o(.constdata)
 <LI><a href="#[1c1]">lwip_system_init</a> from sys_arch.o(i.lwip_system_init) referenced from sys_arch.o(.rti_fn.2)
 <LI><a href="#[131]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[14d]">mmcsd_detect</a> from mmcsd_core.o(i.mmcsd_detect) referenced from mmcsd_core.o(i.rt_mmcsd_core_init)
 <LI><a href="#[1dc]">msh_help</a> from msh.o(i.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[1fb]">netdev_dns</a> from netdev.o(i.netdev_dns) referenced from netdev.o(FSymTab)
 <LI><a href="#[1f9]">netdev_ifconfig</a> from netdev.o(i.netdev_ifconfig) referenced from netdev.o(FSymTab)
 <LI><a href="#[1fc]">netdev_netstat</a> from netdev.o(i.netdev_netstat) referenced from netdev.o(FSymTab)
 <LI><a href="#[1fa]">netdev_ping</a> from netdev.o(i.netdev_ping) referenced from netdev.o(FSymTab)
 <LI><a href="#[12b]">netif_null_output_ip4</a> from netif.o(i.netif_null_output_ip4) referenced from netif.o(i.netif_add)
 <LI><a href="#[10d]">netif_set_link_down</a> from netif.o(i.netif_set_link_down) referenced from ethernetif.o(i.eth_rx_thread_entry)
 <LI><a href="#[10c]">netif_set_link_up</a> from netif.o(i.netif_set_link_up) referenced from ethernetif.o(i.eth_rx_thread_entry)
 <LI><a href="#[12c]">netifapi_do_netif_add</a> from netifapi.o(i.netifapi_do_netif_add) referenced from netifapi.o(i.netifapi_netif_add)
 <LI><a href="#[12d]">netifapi_do_netif_common</a> from netifapi.o(i.netifapi_do_netif_common) referenced from netifapi.o(i.netifapi_netif_common)
 <LI><a href="#[12e]">pbuf_free_ooseq_callback</a> from pbuf.o(i.pbuf_free_ooseq_callback) referenced from pbuf.o(i.pbuf_pool_is_empty)
 <LI><a href="#[145]">phy_device_read</a> from phy.o(i.phy_device_read) referenced from phy.o(i.rt_hw_phy_register)
 <LI><a href="#[146]">phy_device_write</a> from phy.o(i.phy_device_write) referenced from phy.o(i.rt_hw_phy_register)
 <LI><a href="#[144]">phy_monitor_thread_entry</a> from drv_eth.o(i.phy_monitor_thread_entry) referenced from drv_eth.o(i.rt_hw_imxrt_eth_init)
 <LI><a href="#[117]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[117]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[1c8]">posix_mq_system_init</a> from mqueue.o(i.posix_mq_system_init) referenced from mqueue.o(.rti_fn.4)
 <LI><a href="#[1c9]">posix_sem_system_init</a> from semaphore.o(i.posix_sem_system_init) referenced from semaphore.o(.rti_fn.4)
 <LI><a href="#[1ca]">pthread_key_system_init</a> from pthread_tls.o(i.pthread_key_system_init) referenced from pthread_tls.o(.rti_fn.4)
 <LI><a href="#[1d3]">readwrite</a> from main.o(i.readwrite) referenced from main.o(FSymTab)
 <LI><a href="#[1da]">reboot</a> from board.o(i.reboot) referenced from board.o(FSymTab)
 <LI><a href="#[12f]">recv_raw</a> from api_msg.o(i.recv_raw) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[161]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[130]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[137]">rt_can_close</a> from can.o(i.rt_can_close) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[13a]">rt_can_control</a> from can.o(i.rt_can_control) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[135]">rt_can_init</a> from can.o(i.rt_can_init) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[136]">rt_can_open</a> from can.o(i.rt_can_open) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[138]">rt_can_read</a> from can.o(i.rt_can_read) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[139]">rt_can_write</a> from can.o(i.rt_can_write) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[1d6]">rt_client</a> from rt_client.o(i.rt_client) referenced from rt_client.o(FSymTab)
 <LI><a href="#[1bb]">rt_hw_can_init</a> from drv_can.o(i.rt_hw_can_init) referenced from drv_can.o(.rti_fn.1)
 <LI><a href="#[1c3]">rt_hw_imxrt_eth_init</a> from drv_eth.o(i.rt_hw_imxrt_eth_init) referenced from drv_eth.o(.rti_fn.3)
 <LI><a href="#[10]">rt_hw_mdio_init</a> from drv_mdio.o(i.rt_hw_mdio_init) referenced 2 times from drv_mdio.o(.data)
 <LI><a href="#[11]">rt_hw_mdio_read</a> from drv_mdio.o(i.rt_hw_mdio_read) referenced 2 times from drv_mdio.o(.data)
 <LI><a href="#[12]">rt_hw_mdio_write</a> from drv_mdio.o(i.rt_hw_mdio_write) referenced 2 times from drv_mdio.o(.data)
 <LI><a href="#[1b9]">rt_hw_pin_init</a> from drv_gpio.o(i.rt_hw_pin_init) referenced from drv_gpio.o(.rti_fn.1)
 <LI><a href="#[1ba]">rt_hw_uart_init</a> from drv_uart.o(i.rt_hw_uart_init) referenced from drv_uart.o(.rti_fn.1)
 <LI><a href="#[13e]">rt_imxrt_eth_close</a> from drv_eth.o(i.rt_imxrt_eth_close) referenced from drv_eth.o(i.rt_hw_imxrt_eth_init)
 <LI><a href="#[141]">rt_imxrt_eth_control</a> from drv_eth.o(i.rt_imxrt_eth_control) referenced from drv_eth.o(i.rt_hw_imxrt_eth_init)
 <LI><a href="#[13c]">rt_imxrt_eth_init</a> from drv_eth.o(i.rt_imxrt_eth_init) referenced from drv_eth.o(i.rt_hw_imxrt_eth_init)
 <LI><a href="#[13d]">rt_imxrt_eth_open</a> from drv_eth.o(i.rt_imxrt_eth_open) referenced from drv_eth.o(i.rt_hw_imxrt_eth_init)
 <LI><a href="#[13f]">rt_imxrt_eth_read</a> from drv_eth.o(i.rt_imxrt_eth_read) referenced from drv_eth.o(i.rt_hw_imxrt_eth_init)
 <LI><a href="#[142]">rt_imxrt_eth_rx</a> from drv_eth.o(i.rt_imxrt_eth_rx) referenced from drv_eth.o(i.rt_hw_imxrt_eth_init)
 <LI><a href="#[143]">rt_imxrt_eth_tx</a> from drv_eth.o(i.rt_imxrt_eth_tx) referenced from drv_eth.o(i.rt_hw_imxrt_eth_init)
 <LI><a href="#[140]">rt_imxrt_eth_write</a> from drv_eth.o(i.rt_imxrt_eth_write) referenced from drv_eth.o(i.rt_hw_imxrt_eth_init)
 <LI><a href="#[150]">rt_mmcsd_close</a> from block_dev.o(i.rt_mmcsd_close) referenced from block_dev.o(i.rt_mmcsd_create_blkdev)
 <LI><a href="#[153]">rt_mmcsd_control</a> from block_dev.o(i.rt_mmcsd_control) referenced from block_dev.o(i.rt_mmcsd_create_blkdev)
 <LI><a href="#[1bf]">rt_mmcsd_core_init</a> from mmcsd_core.o(i.rt_mmcsd_core_init) referenced from mmcsd_core.o(.rti_fn.2)
 <LI><a href="#[14e]">rt_mmcsd_init</a> from block_dev.o(i.rt_mmcsd_init) referenced from block_dev.o(i.rt_mmcsd_create_blkdev)
 <LI><a href="#[14f]">rt_mmcsd_open</a> from block_dev.o(i.rt_mmcsd_open) referenced from block_dev.o(i.rt_mmcsd_create_blkdev)
 <LI><a href="#[151]">rt_mmcsd_read</a> from block_dev.o(i.rt_mmcsd_read) referenced from block_dev.o(i.rt_mmcsd_create_blkdev)
 <LI><a href="#[152]">rt_mmcsd_write</a> from block_dev.o(i.rt_mmcsd_write) referenced from block_dev.o(i.rt_mmcsd_create_blkdev)
 <LI><a href="#[1c2]">rt_phy_8720a_register</a> from lan8720a.o(i.rt_phy_8720a_register) referenced from lan8720a.o(.rti_fn.3)
 <LI><a href="#[6]">rt_phy_init</a> from lan8720a.o(i.rt_phy_init) referenced 2 times from lan8720a.o(.data)
 <LI><a href="#[9]">rt_phy_loopback</a> from lan8720a.o(i.rt_phy_loopback) referenced 2 times from lan8720a.o(.data)
 <LI><a href="#[7]">rt_phy_read</a> from lan8720a.o(i.rt_phy_read) referenced 2 times from lan8720a.o(.data)
 <LI><a href="#[8]">rt_phy_write</a> from lan8720a.o(i.rt_phy_write) referenced 2 times from lan8720a.o(.data)
 <LI><a href="#[149]">rt_serial_close</a> from serial.o(i.rt_serial_close) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[14c]">rt_serial_control</a> from serial.o(i.rt_serial_control) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[147]">rt_serial_init</a> from serial.o(i.rt_serial_init) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[148]">rt_serial_open</a> from serial.o(i.rt_serial_open) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[14a]">rt_serial_read</a> from serial.o(i.rt_serial_read) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[14b]">rt_serial_write</a> from serial.o(i.rt_serial_write) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[154]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[158]">rt_udisk_control</a> from udisk.o(i.rt_udisk_control) referenced from udisk.o(i.rt_udisk_run)
 <LI><a href="#[155]">rt_udisk_init</a> from udisk.o(i.rt_udisk_init) referenced from udisk.o(i.rt_udisk_run)
 <LI><a href="#[156]">rt_udisk_read</a> from udisk.o(i.rt_udisk_read) referenced from udisk.o(i.rt_udisk_run)
 <LI><a href="#[157]">rt_udisk_write</a> from udisk.o(i.rt_udisk_write) referenced from udisk.o(i.rt_udisk_run)
 <LI><a href="#[1bc]">rt_usbd_class_list_init</a> from usbdevice.o(i.rt_usbd_class_list_init) referenced from usbdevice.o(.rti_fn.1)
 <LI><a href="#[15a]">rt_usbh_hub_disable</a> from hub.o(i.rt_usbh_hub_disable) referenced from hub.o(i.rt_usbh_class_driver_hub)
 <LI><a href="#[159]">rt_usbh_hub_enable</a> from hub.o(i.rt_usbh_hub_enable) referenced from hub.o(i.rt_usbh_class_driver_hub)
 <LI><a href="#[15d]">rt_usbh_hub_irq</a> from hub.o(i.rt_usbh_hub_irq) referenced from hub.o(i.rt_usbh_hub_enable)
 <LI><a href="#[15e]">rt_usbh_hub_thread_entry</a> from hub.o(i.rt_usbh_hub_thread_entry) referenced from hub.o(i.rt_usbh_hub_init)
 <LI><a href="#[15c]">rt_usbh_storage_disable</a> from mass.o(i.rt_usbh_storage_disable) referenced from mass.o(i.rt_usbh_class_driver_storage)
 <LI><a href="#[15b]">rt_usbh_storage_enable</a> from mass.o(i.rt_usbh_storage_enable) referenced from mass.o(i.rt_usbh_class_driver_storage)
 <LI><a href="#[1be]">rt_work_sys_workqueue_init</a> from workqueue.o(i.rt_work_sys_workqueue_init) referenced from workqueue.o(.rti_fn.2)
 <LI><a href="#[1bd]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[1b8]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[1ce]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[1b7]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[1cb]">sal_init</a> from sal_socket.o(i.sal_init) referenced from sal_socket.o(.rti_fn.4)
 <LI><a href="#[1cc]">sd_mount</a> from sdcard_port.o(i.sd_mount) referenced from sdcard_port.o(.rti_fn.6)
 <LI><a href="#[116]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[116]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[163]">tcp_accept_null</a> from tcp.o(i.tcp_accept_null) referenced from tcp.o(i.tcp_listen_with_backlog_and_err)
 <LI><a href="#[162]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[194]">tcp_tmr</a> from tcp.o(i.tcp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[11d]">tcpip_init_done_callback</a> from sys_arch.o(i.tcpip_init_done_callback) referenced from sys_arch.o(i.lwip_system_init)
 <LI><a href="#[109]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[164]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcp_timer_needed)
 <LI><a href="#[164]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcpip_tcp_timer)
 <LI><a href="#[165]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[fc]">usb0_host_callback</a> from drv_usbh.o(i.usb0_host_callback) referenced from drv_usbh.o(i._ehci0_usbh_init)
 <LI><a href="#[fe]">usb1_host_callback</a> from drv_usbh.o(i.usb1_host_callback) referenced from drv_usbh.o(i._ehci1_usbh_init)
 <LI><a href="#[1ee]">version</a> from cmd.o(i.version) referenced from cmd.o(FSymTab)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1fd]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1fe]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[200]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[6f8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6f9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6fa]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[6fb]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[201]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[6fc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[202]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[229]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[204]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[206]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[6fd]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[214]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[208]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[6fe]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[6ff]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[20a]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[700]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[20c]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[701]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[702]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[20e]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[703]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[704]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[705]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[706]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[707]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[708]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[709]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[70a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[70b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[20f]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[70c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[70d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[70e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[70f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[710]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[711]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[219]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[712]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[713]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[211]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[714]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[715]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[716]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[717]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[718]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[719]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1ff]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[71a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[71b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[213]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[71c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[215]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[71d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[25d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[218]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[71e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[21a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[45d]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>

<P><STRONG><a name="[35c]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_clock_time_system_init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_detach_irq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_attach_irq
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_poll
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
</UL>

<P><STRONG><a name="[35f]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_clock_time_system_init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_detach_irq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_attach_irq
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_poll
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
</UL>

<P><STRONG><a name="[64b]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[64c]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[23]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[650]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[71f]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>FLEXIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>BEE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CSU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DCDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DCP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(RESET)
<LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>ENC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>ENC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>ENC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>ENC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>FLEXIO2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>GPT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>GPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>KPP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>LCDIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>PIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>PMU_EVENT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>PWM3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>PWM3_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>PWM3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>PWM3_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>PWM3_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>PWM4_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>PWM4_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>PWM4_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>PWM4_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>PWM4_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>PXP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>Reserved123_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>Reserved78_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>SEMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SJC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>SRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TSC_DIG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>USB_PHY1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USB_PHY2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[720]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[721]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[22f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[722]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[723]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[724]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[725]"></a>__I$use$heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[726]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferSendNonBlocking
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferReceiveNonBlocking
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceive
</UL>

<P><STRONG><a name="[727]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[423]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[21e]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[220]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
</UL>

<P><STRONG><a name="[221]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShellMainVoid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShellMain
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestShellFunc
</UL>

<P><STRONG><a name="[224]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[225]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[223]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[203]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[227]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[22a]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
</UL>

<P><STRONG><a name="[22c]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[248]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[22e]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[231]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
</UL>

<P><STRONG><a name="[233]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[20b]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[234]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv (via Veneer)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock (via Veneer)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_enet_pins_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexDestroy
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexCreate
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventDestroy
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventCreate
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetSdClock
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock (via Veneer)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetCallback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReadFrame
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetRxFrameSize
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetRxErrBeforeReadFrame
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetDefaultConfig
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ENET_SendFrame
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ENET_ActiveSend
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetSMI
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_mdio_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferSendNonBlocking
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferReceiveNonBlocking
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferCreateHandle
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTxMbConfig
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxMbConfig
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxIndividualMask
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetDefaultConfig
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_read
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock (via Veneer)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetInternalDmaConfig
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetADMA2Descriptor
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetADMA1Descriptor
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SendCommand
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInstance
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate (via Veneer)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate (via Veneer)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_UpdateReadBuffers
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetTxBufferDescriptors
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetRxBufferDescriptors
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetHandler
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate (via Veneer)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_WriteTxMb
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceiveFifo
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceive
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTimingConfig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxMb
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxFifo
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetInstance
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_DriverIRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_DriverIRQHandler
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetBaudRate
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Reset
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbIntEnabled
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_TransmitIRQHandler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReceiveIRQHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ErrorIRQHandler
</UL>

<P><STRONG><a name="[728]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[5c8]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[3f0]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>

<P><STRONG><a name="[4c1]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>

<P><STRONG><a name="[37b]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[3dd]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
</UL>

<P><STRONG><a name="[441]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>

<P><STRONG><a name="[4c3]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReadFrame
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ENET_SendFrame
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[237]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[729]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[239]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[72a]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_config
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_init
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[72b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[72c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[72d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[241]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[23e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[23d]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[249]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_test
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_test
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_request
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetDefaultConfig
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferCreateHandle
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetDefaultConfig
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetHandler
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[72e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[72f]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[240]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sample
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_test
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
</UL>

<P><STRONG><a name="[3b4]"></a>strcmp</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[20d]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[226]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[242]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[243]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[205]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[207]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[222]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[22d]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[22b]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[f0]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[232]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[230]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[236]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[730]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[731]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[23b]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[732]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[245]"></a>__vfscanf</STRONG> (Thumb, 880 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[244]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[210]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _initio &rArr; freopen &rArr; _sys_open &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[212]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[246]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[251]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[4ce]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[733]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[24a]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = freopen &rArr; _sys_open &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[25a]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[24d]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[734]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[250]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[24f]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[24b]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = __rt_SIGRTRED &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[259]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[735]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[257]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[25b]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[252]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[25e]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[25f]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[235]"></a>__assert_puts</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, assert_stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[266]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[265]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[264]"></a>fputs</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputs &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[260]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[736]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[268]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 1452 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetSaiMClkClockSource
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPllBypass
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv (via Veneer)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock (via Veneer)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SwitchOsc
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitRcOsc24M
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitVideoPll
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitUsb2Pll
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitEnetPll
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[27a]"></a>BOARD_InitPins</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = BOARD_InitPins &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[e1]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CAN1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = CAN1_DriverIRQHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CAN2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = CAN2_DriverIRQHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[270]"></a>CLOCK_DeinitAudioPll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_DeinitAudioPll))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[273]"></a>CLOCK_DeinitEnetPll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_DeinitEnetPll))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[274]"></a>CLOCK_DeinitUsb2Pll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_DeinitUsb2Pll))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[272]"></a>CLOCK_DeinitVideoPll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_DeinitVideoPll))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[310]"></a>CLOCK_EnableUsbhs0Clock</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_EnableUsbhs0Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableUsbhs0Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostClockInit
</UL>

<P><STRONG><a name="[27d]"></a>CLOCK_EnableUsbhs0PhyPllClock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_EnableUsbhs0PhyPllClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_EnableUsbhs0PhyPllClock
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitUsb1Pll
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostClockInit
</UL>

<P><STRONG><a name="[311]"></a>CLOCK_EnableUsbhs1Clock</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_EnableUsbhs1Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableUsbhs1Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostClockInit
</UL>

<P><STRONG><a name="[27f]"></a>CLOCK_EnableUsbhs1PhyPllClock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_EnableUsbhs1PhyPllClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_EnableUsbhs1PhyPllClock
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitUsb2Pll
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostClockInit
</UL>

<P><STRONG><a name="[281]"></a>CLOCK_GetAhbFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetAhbFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
</UL>

<P><STRONG><a name="[283]"></a>CLOCK_GetFreq</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetIpgFreq
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_config
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanSrcFreq
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
</UL>

<P><STRONG><a name="[285]"></a>CLOCK_GetIpgFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetIpgFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[286]"></a>CLOCK_GetPerClkFreq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPerClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = CLOCK_GetPerClkFreq &rArr;  CLOCK_GetFreq (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[288]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, fsl_clock.o(i.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartSrcFreq
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[284]"></a>CLOCK_GetSemcFreq</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetSemcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLOCK_GetSemcFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[28a]"></a>CLOCK_GetSysPfdFreq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetSysPfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_set_iocfg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[289]"></a>CLOCK_GetUsb1PfdFreq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetUsb1PfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
</UL>

<P><STRONG><a name="[26f]"></a>CLOCK_InitArmPll</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_InitArmPll))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[377]"></a>CLOCK_InitEnetPll</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_InitEnetPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitEnetPll
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_clk_init
</UL>

<P><STRONG><a name="[269]"></a>CLOCK_InitExternalClk</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_InitExternalClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = CLOCK_InitExternalClk &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[26a]"></a>CLOCK_InitRcOsc24M</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_InitRcOsc24M))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[27e]"></a>CLOCK_InitUsb1Pll</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_InitUsb1Pll))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbhs0PhyPllClock
</UL>

<P><STRONG><a name="[280]"></a>CLOCK_InitUsb2Pll</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_InitUsb2Pll))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbhs1PhyPllClock
</UL>

<P><STRONG><a name="[26b]"></a>CLOCK_SwitchOsc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SwitchOsc))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[28b]"></a>DCACHE_CleanByRange</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fsl_cache.o(i.DCACHE_CleanByRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCACHE_CleanByRange &rArr; SCB_CleanDCache_by_Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ENET_SendFrame
</UL>

<P><STRONG><a name="[28d]"></a>DCACHE_CleanInvalidateByRange</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fsl_cache.o(i.DCACHE_CleanInvalidateByRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCACHE_CleanInvalidateByRange &rArr; SCB_CleanInvalidateDCache_by_Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanInvalidateDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[28f]"></a>DCACHE_InvalidateByRange</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fsl_cache.o(i.DCACHE_InvalidateByRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCACHE_InvalidateByRange &rArr; SCB_InvalidateDCache_by_Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_InvalidateDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReadFrame
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetRxBufferDescriptors
</UL>

<P><STRONG><a name="[98]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_enet.o(i.ENET_1588_Timer_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENET_1588_Timer_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[291]"></a>ENET_CommonFrame0IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fsl_enet.o(i.ENET_CommonFrame0IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_DriverIRQHandler
</UL>

<P><STRONG><a name="[293]"></a>ENET_Deinit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fsl_enet.o(i.ENET_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = ENET_Deinit &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_config
</UL>

<P><STRONG><a name="[ed]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_enet.o(i.ENET_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = ENET_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>ENET_ErrorIRQHandler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fsl_enet.o(i.ENET_ErrorIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = ENET_ErrorIRQHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_enet.o(i.ENET_SetHandler)
</UL>
<P><STRONG><a name="[295]"></a>ENET_GetDefaultConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_enet.o(i.ENET_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = ENET_GetDefaultConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_config
</UL>

<P><STRONG><a name="[292]"></a>ENET_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_enet.o(i.ENET_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = ENET_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Deinit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_mdio_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetHandler
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>

<P><STRONG><a name="[296]"></a>ENET_GetRxErrBeforeReadFrame</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fsl_enet.o(i.ENET_GetRxErrBeforeReadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = ENET_GetRxErrBeforeReadFrame &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_rx
</UL>

<P><STRONG><a name="[297]"></a>ENET_GetRxFrameSize</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fsl_enet.o(i.ENET_GetRxFrameSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = ENET_GetRxFrameSize &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_rx
</UL>

<P><STRONG><a name="[298]"></a>ENET_Init</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, fsl_enet.o(i.ENET_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = ENET_Init &rArr; ENET_SetMacController &rArr; ENET_SetSMI &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetTxBufferDescriptors
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetRxBufferDescriptors
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetMacController
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetHandler
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_config
</UL>

<P><STRONG><a name="[29d]"></a>ENET_ReadFrame</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, fsl_enet.o(i.ENET_ReadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = ENET_ReadFrame &rArr; ENET_UpdateReadBuffers &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_UpdateReadBuffers
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_InvalidateByRange
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_rx
</UL>

<P><STRONG><a name="[f7]"></a>ENET_ReceiveIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_enet.o(i.ENET_ReceiveIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = ENET_ReceiveIRQHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_enet.o(i.ENET_SetHandler)
</UL>
<P><STRONG><a name="[29f]"></a>ENET_SetCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fsl_enet.o(i.ENET_SetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = ENET_SetCallback &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_config
</UL>

<P><STRONG><a name="[2a1]"></a>ENET_SetMacAddr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_enet.o(i.ENET_SetMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENET_SetMacAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetMacController
</UL>

<P><STRONG><a name="[2a2]"></a>ENET_SetSMI</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, fsl_enet.o(i.ENET_SetSMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = ENET_SetSMI &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_mdio_init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetMacController
</UL>

<P><STRONG><a name="[630]"></a>ENET_StartSMIRead</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_enet.o(i.ENET_StartSMIRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ENET_StartSMIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_mdio_read
</UL>

<P><STRONG><a name="[631]"></a>ENET_StartSMIWrite</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, fsl_enet.o(i.ENET_StartSMIWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ENET_StartSMIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_mdio_write
</UL>

<P><STRONG><a name="[f6]"></a>ENET_TransmitIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_enet.o(i.ENET_TransmitIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = ENET_TransmitIRQHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_enet.o(i.ENET_SetHandler)
</UL>
<P><STRONG><a name="[2a3]"></a>FLEXCAN_GetDefaultConfig</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fsl_flexcan.o(i.FLEXCAN_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_GetDefaultConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cfg
</UL>

<P><STRONG><a name="[2a4]"></a>FLEXCAN_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferCreateHandle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[2a5]"></a>FLEXCAN_Init</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, fsl_flexcan.o(i.FLEXCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_Init &rArr; FLEXCAN_SetBaudRate &rArr; FLEXCAN_SetTimingConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetInstance
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetBaudRate
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Reset
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Enable
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cfg
</UL>

<P><STRONG><a name="[2ab]"></a>FLEXCAN_ReadRxFifo</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_ReadRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_ReadRxFifo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[2ac]"></a>FLEXCAN_ReadRxMb</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, fsl_flexcan.o(i.FLEXCAN_ReadRxMb))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_ReadRxMb &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[2af]"></a>FLEXCAN_SetRxIndividualMask</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_SetRxIndividualMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_SetRxIndividualMask &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ExitFreezeMode
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnterFreezeMode
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_control
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cfg
</UL>

<P><STRONG><a name="[2b2]"></a>FLEXCAN_SetRxMbConfig</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, fsl_flexcan.o(i.FLEXCAN_SetRxMbConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_SetRxMbConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_control
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cfg
</UL>

<P><STRONG><a name="[2ae]"></a>FLEXCAN_SetTimingConfig</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_SetTimingConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_SetTimingConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ExitFreezeMode
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnterFreezeMode
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetBaudRate
</UL>

<P><STRONG><a name="[2b3]"></a>FLEXCAN_SetTxMbConfig</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_SetTxMbConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_SetTxMbConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
</UL>

<P><STRONG><a name="[2b4]"></a>FLEXCAN_TransferAbortReceive</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, fsl_flexcan.o(i.FLEXCAN_TransferAbortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_TransferAbortReceive &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_DisableMbInterrupts
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[2b7]"></a>FLEXCAN_TransferAbortReceiveFifo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_TransferAbortReceiveFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_TransferAbortReceiveFifo &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_DisableMbInterrupts
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[2b8]"></a>FLEXCAN_TransferAbortSend</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, fsl_flexcan.o(i.FLEXCAN_TransferAbortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_TransferAbortSend &rArr; FLEXCAN_SetTxMbConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTxMbConfig
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_DisableMbInterrupts
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[2b9]"></a>FLEXCAN_TransferCreateHandle</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, fsl_flexcan.o(i.FLEXCAN_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_TransferCreateHandle &rArr; FLEXCAN_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetInstance
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cfg
</UL>

<P><STRONG><a name="[f9]"></a>FLEXCAN_TransferHandleIRQ</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, fsl_flexcan.o(i.FLEXCAN_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_TransferHandleIRQ &rArr; FLEXCAN_TransferAbortSend &rArr; FLEXCAN_SetTxMbConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceiveFifo
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceive
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxMb
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxFifo
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbIntEnabled
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMbStatusFlags
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearStatusFlags
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearMbStatusFlags
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_flexcan.o(i.FLEXCAN_TransferCreateHandle)
</UL>
<P><STRONG><a name="[2be]"></a>FLEXCAN_TransferReceiveNonBlocking</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, fsl_flexcan.o(i.FLEXCAN_TransferReceiveNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_TransferReceiveNonBlocking &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnableMbInterrupts
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexcan_callback
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cfg
</UL>

<P><STRONG><a name="[2c0]"></a>FLEXCAN_TransferSendNonBlocking</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, fsl_flexcan.o(i.FLEXCAN_TransferSendNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_WriteTxMb
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnableMbInterrupts
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
</UL>

<P><STRONG><a name="[2c1]"></a>FLEXCAN_WriteTxMb</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, fsl_flexcan.o(i.FLEXCAN_WriteTxMb))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetFirstValidMb
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ERRATA_6032
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferSendNonBlocking
</UL>

<P><STRONG><a name="[590]"></a>FrameworkInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, framework_init.o(i.FrameworkInit))
<BR><BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[75]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIO1_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO1_Combined_0_15_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIO1_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO1_Combined_16_31_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIO2_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO2_Combined_0_15_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIO2_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO2_Combined_16_31_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIO3_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO3_Combined_0_15_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIO3_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO3_Combined_16_31_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIO4_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO4_Combined_0_15_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIO4_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO4_Combined_16_31_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_gpio.o(i.GPIO5_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO5_Combined_0_15_IRQHandler &rArr; imxrt_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2c8]"></a>GPIO_PinInit</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = GPIO_PinInit &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_mode
</UL>

<P><STRONG><a name="[2ca]"></a>GPIO_PinSetInterruptConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, fsl_gpio.o(i.GPIO_PinSetInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_irq_enable
</UL>

<P><STRONG><a name="[2c9]"></a>GPIO_PinWrite</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = GPIO_PinWrite &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_write
</UL>

<P><STRONG><a name="[2cb]"></a>GetCanSrcFreq</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_can.o(i.GetCanSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetCanSrcFreq &rArr; CLOCK_GetFreq &rArr; CLOCK_GetIpgFreq &rArr; CLOCK_GetAhbFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_cfg
</UL>

<P><STRONG><a name="[2cc]"></a>GetUartSrcFreq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, drv_uart.o(i.GetUartSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetUartSrcFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_configure
</UL>

<P><STRONG><a name="[d1]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart.o(i.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = LPUART1_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart.o(i.LPUART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = LPUART2_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart.o(i.LPUART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = LPUART3_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart.o(i.LPUART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = LPUART6_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[2cf]"></a>LPUART_ClearStatusFlags</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[4fc]"></a>LPUART_EnableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_control
</UL>

<P><STRONG><a name="[2d1]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_configure
</UL>

<P><STRONG><a name="[2d2]"></a>LPUART_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = LPUART_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[2d0]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_putc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_getc
</UL>

<P><STRONG><a name="[2d3]"></a>LPUART_Init</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, fsl_lpuart.o(i.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_configure
</UL>

<P><STRONG><a name="[2d5]"></a>OSA_EnterCritical</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_os_abstraction_rtthread.o(i.OSA_EnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSA_EnterCritical &rArr; rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseInstance
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostGetInstance
</UL>

<P><STRONG><a name="[2d8]"></a>OSA_EventCreate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_os_abstraction_rtthread.o(i.OSA_EventCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = OSA_EventCreate &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCreate
</UL>

<P><STRONG><a name="[2da]"></a>OSA_EventDestroy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_os_abstraction_rtthread.o(i.OSA_EventDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = OSA_EventDestroy &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciDestory
</UL>

<P><STRONG><a name="[2dc]"></a>OSA_EventSet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_os_abstraction_rtthread.o(i.OSA_EventSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = OSA_EventSet &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciPortChange
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciIsrFunction
</UL>

<P><STRONG><a name="[2de]"></a>OSA_EventWait</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, fsl_os_abstraction_rtthread.o(i.OSA_EventWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = OSA_EventWait &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTaskFunction
</UL>

<P><STRONG><a name="[2e1]"></a>OSA_ExitCritical</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_os_abstraction_rtthread.o(i.OSA_ExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = OSA_ExitCritical &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseInstance
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostGetInstance
</UL>

<P><STRONG><a name="[2e3]"></a>OSA_MemoryAllocate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_os_abstraction_rtthread.o(i.OSA_MemoryAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = OSA_MemoryAllocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCreate
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostAttachDevice
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostProcessCallback
</UL>

<P><STRONG><a name="[2e6]"></a>OSA_MemoryFree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_os_abstraction_rtthread.o(i.OSA_MemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = OSA_MemoryFree &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciDestory
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCreate
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostAttachDevice
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseDeviceResource
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostProcessCallback
</UL>

<P><STRONG><a name="[2e8]"></a>OSA_MutexCreate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_os_abstraction_rtthread.o(i.OSA_MutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = OSA_MutexCreate &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCreate
</UL>

<P><STRONG><a name="[2ea]"></a>OSA_MutexDestroy</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_os_abstraction_rtthread.o(i.OSA_MutexDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = OSA_MutexDestroy &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciDestory
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCreate
</UL>

<P><STRONG><a name="[2ec]"></a>OSA_MutexLock</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fsl_os_abstraction_rtthread.o(i.OSA_MutexLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenPipe
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciIoctl
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciClosePipe
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTransferQtdListDeinit
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQtdListRelease
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhQtdListInit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhQtdListDeinit
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhInit
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhDeinit
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostMallocTransfer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostDetachDevice
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCloseDeviceInterface
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostAttachDevice
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseDeviceAddress
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostSendSetup
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostFreeTransfer
</UL>

<P><STRONG><a name="[2ee]"></a>OSA_MutexUnlock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_os_abstraction_rtthread.o(i.OSA_MutexUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = OSA_MutexUnlock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenPipe
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciIoctl
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciClosePipe
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTransferQtdListDeinit
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQtdListRelease
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhQtdListInit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhQtdListDeinit
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhInit
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhDeinit
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostMallocTransfer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostDetachDevice
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCloseDeviceInterface
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostAttachDevice
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseDeviceAddress
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostSendSetup
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostFreeTransfer
</UL>

<P><STRONG><a name="[1d7]"></a>RS232_test</STRONG> (Thumb, 216 bytes, Stack size 120 bytes, test_232.o(i.RS232_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = RS232_test &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_232.o(FSymTab)
</UL>
<P><STRONG><a name="[1d2]"></a>RS485_test</STRONG> (Thumb, 202 bytes, Stack size 120 bytes, test_485.o(i.RS485_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = RS485_test &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_485.o(FSymTab)
</UL>
<P><STRONG><a name="[24]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>SystemInit</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, system_mimxrt1052.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[2fb]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1052.o(i.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1d1]"></a>TestShellFunc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, test_shell.o(i.TestShellFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TestShellFunc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_shell.o(FSymTab)
</UL>
<P><STRONG><a name="[1cf]"></a>TestShellMain</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, test_shell.o(i.TestShellMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TestShellMain &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_shell.o(FSymTab)
</UL>
<P><STRONG><a name="[1d0]"></a>TestShellMainVoid</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, test_shell.o(i.TestShellMainVoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = TestShellMainVoid &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_shell.o(FSymTab)
</UL>
<P><STRONG><a name="[2fd]"></a>USB_EhciPhyGetBase</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, usb_phy.o(i.USB_EhciPhyGetBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_EhciPhyGetBase
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EhciPhyInit
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EhcihostPhyDisconnectDetectCmd
</UL>

<P><STRONG><a name="[2fc]"></a>USB_EhciPhyInit</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, usb_phy.o(i.USB_EhciPhyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_EhciPhyInit &rArr; USB_EhciPhyGetBase
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EhciPhyGetBase
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostClockInit
</UL>

<P><STRONG><a name="[2fe]"></a>USB_EhcihostPhyDisconnectDetectCmd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usb_phy.o(i.USB_EhcihostPhyDisconnectDetectCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_EhcihostPhyDisconnectDetectCmd &rArr; USB_EhciPhyGetBase
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EhciPhyGetBase
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciPortChange
</UL>

<P><STRONG><a name="[2ff]"></a>USB_HostAttachDevice</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, usb_host_devices.o(i.USB_HostAttachDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = USB_HostAttachDevice &rArr; USB_HostProcessState &rArr; USB_HostStandardSetGetDescriptor &rArr; USB_HostCh9RequestCommon &rArr; USB_HostSendSetup &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostOpenPipe
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemoryFree
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemoryAllocate
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostProcessState
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostNotifyDevice
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostAllocateDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTaskFunction
</UL>

<P><STRONG><a name="[318]"></a>USB_HostCancelTransfer</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, usb_host_hci.o(i.USB_HostCancelTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_HostCancelTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostDetachDeviceInternal
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseDeviceResource
</UL>

<P><STRONG><a name="[30c]"></a>USB_HostCh9RequestCommon</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usb_host_framework.o(i.USB_HostCh9RequestCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = USB_HostCh9RequestCommon &rArr; USB_HostSendSetup &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostSendSetup
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostFreeTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostProcessState
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostStandardSetGetDescriptor
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostStandardSetAddress
</UL>

<P><STRONG><a name="[312]"></a>USB_HostCloseDeviceInterface</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, usb_host_devices.o(i.USB_HostCloseDeviceInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = USB_HostCloseDeviceInterface &rArr; USB_HostReleaseDeviceResource &rArr; USB_HostReleaseDeviceAddress &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostValidateDevice
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostRemoveDeviceInstance
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseDeviceResource
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb1_host_callback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb0_host_callback
</UL>

<P><STRONG><a name="[33e]"></a>USB_HostClosePipe</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, usb_host_hci.o(i.USB_HostClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_HostClosePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_close_pipe
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_close_pipe
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseDeviceResource
</UL>

<P><STRONG><a name="[316]"></a>USB_HostDetachDevice</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, usb_host_devices.o(i.USB_HostDetachDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = USB_HostDetachDevice &rArr; USB_HostDetachDeviceInternal &rArr; USB_HostReleaseDeviceResource &rArr; USB_HostReleaseDeviceAddress &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostDetachDeviceInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTaskFunction
</UL>

<P><STRONG><a name="[317]"></a>USB_HostDetachDeviceInternal</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usb_host_devices.o(i.USB_HostDetachDeviceInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = USB_HostDetachDeviceInternal &rArr; USB_HostReleaseDeviceResource &rArr; USB_HostReleaseDeviceAddress &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCancelTransfer
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostRemoveDeviceInstance
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseDeviceResource
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostNotifyDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostDetachDevice
</UL>

<P><STRONG><a name="[178]"></a>USB_HostEhciClosePipe</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, usb_host_ehci.o(i.USB_HostEhciClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciClosePipe &rArr; USB_HostEhciCloseInterrupt &rArr; USB_HostEhciQhDeinit &rArr; USB_HostEhciQhQtdListDeinit &rArr; USB_HostEhciQtdListRelease &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCloseInterrupt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCloseControlBulk
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_host_hci.o(.constdata)
</UL>
<P><STRONG><a name="[324]"></a>USB_HostEhciControlBus</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usb_host_ehci.o(i.USB_HostEhciControlBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_HostEhciControlBus
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciIoctl
</UL>

<P><STRONG><a name="[175]"></a>USB_HostEhciCreate</STRONG> (Thumb, 500 bytes, Stack size 56 bytes, usb_host_ehci.o(i.USB_HostEhciCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciCreate &rArr; OSA_MutexDestroy &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexDestroy
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexCreate
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventCreate
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStartIP
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciResetIP
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemoryFree
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemoryAllocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_host_hci.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>USB_HostEhciDestory</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_host_ehci.o(i.USB_HostEhciDestory))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciDestory &rArr; OSA_MutexDestroy &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexDestroy
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventDestroy
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemoryFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_host_hci.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>USB_HostEhciIoctl</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, usb_host_ehci.o(i.USB_HostEhciIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciIoctl &rArr; USB_HostEhciCancelPipe &rArr; USB_HostEhciTransferQtdListDeinit &rArr; USB_HostEhciQtdListRelease &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostHelperGetPeripheralInformation
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStartAsync
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciControlBus
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStopAsync
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciDelay
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCancelPipe
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_host_hci.o(.constdata)
</UL>
<P><STRONG><a name="[326]"></a>USB_HostEhciIsrFunction</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usb_host_ehci.o(i.USB_HostEhciIsrFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciIsrFunction &rArr; OSA_EventSet &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG2_IRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG1_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>USB_HostEhciOpenPipe</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, usb_host_ehci.o(i.USB_HostEhciOpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciOpenPipe &rArr; USB_HostEhciOpenInterrupt &rArr; USB_HostEhciQhInit &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostHelperGetPeripheralInformation
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciZeroMem
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenInterrupt
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenControlBulk
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciGet2PowerValue
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_host_hci.o(.constdata)
</UL>
<P><STRONG><a name="[32d]"></a>USB_HostEhciPortChange</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, usb_host_ehci.o(i.USB_HostEhciPortChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciPortChange &rArr; OSA_EventSet &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EhcihostPhyDisconnectDetectCmd
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStopPeriodic
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStopAsync
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTaskFunction
</UL>

<P><STRONG><a name="[17a]"></a>USB_HostEhciReadpipe</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usb_host_ehci.o(i.USB_HostEhciReadpipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciReadpipe &rArr; USB_HostEhciWritePipe &rArr; USB_HostEhciQhQtdListInit &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciWritePipe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_host_hci.o(.constdata)
</UL>
<P><STRONG><a name="[31e]"></a>USB_HostEhciStartAsync</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, usb_host_ehci.o(i.USB_HostEhciStartAsync))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTimer0
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTaskFunction
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciIoctl
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTransferQtdListDeinit
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhQtdListInit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhQtdListDeinit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCloseControlBulk
</UL>

<P><STRONG><a name="[334]"></a>USB_HostEhciStartPeriodic</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, usb_host_ehci.o(i.USB_HostEhciStartPeriodic))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTaskFunction
</UL>

<P><STRONG><a name="[331]"></a>USB_HostEhciTaskFunction</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, usb_host_ehci.o(i.USB_HostEhciTaskFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciTaskFunction &rArr; USB_HostAttachDevice &rArr; USB_HostProcessState &rArr; USB_HostStandardSetGetDescriptor &rArr; USB_HostCh9RequestCommon &rArr; USB_HostSendSetup &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTransactionDone
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTimer0
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStartPeriodic
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStartAsync
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciPortChange
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostDetachDevice
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostAttachDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_usbh_thread
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_usbh_thread
</UL>

<P><STRONG><a name="[332]"></a>USB_HostEhciTimer0</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, usb_host_ehci.o(i.USB_HostEhciTimer0))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciTimer0 &rArr; USB_HostEhciQtdListRelease &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStartAsync
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStopAsync
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQtdListRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTaskFunction
</UL>

<P><STRONG><a name="[333]"></a>USB_HostEhciTransactionDone</STRONG> (Thumb, 488 bytes, Stack size 48 bytes, usb_host_ehci.o(i.USB_HostEhciTransactionDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciTransactionDone &rArr; USB_HostEhciQtdListRelease &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQtdListRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTaskFunction
</UL>

<P><STRONG><a name="[179]"></a>USB_HostEhciWritePipe</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, usb_host_ehci.o(i.USB_HostEhciWritePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciWritePipe &rArr; USB_HostEhciQhQtdListInit &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhQtdListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_pipe_xfer
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_pipe_xfer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciReadpipe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_host_hci.o(.constdata)
</UL>
<P><STRONG><a name="[30e]"></a>USB_HostFreeTransfer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usb_host_hci.o(i.USB_HostFreeTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = USB_HostFreeTransfer &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_pipe_xfer
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_pipe_xfer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEnumerationTransferCallback
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCh9RequestCommon
</UL>

<P><STRONG><a name="[305]"></a>USB_HostHelperGetPeripheralInformation</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, usb_host_hci.o(i.USB_HostHelperGetPeripheralInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_HostHelperGetPeripheralInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenPipe
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciIoctl
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhInit
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostComputeCurrentHsAll
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostComputeCurrentFsls
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostAllocateInterrupt
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthFslsHostAllocate
</UL>

<P><STRONG><a name="[336]"></a>USB_HostInit</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, usb_host_hci.o(i.USB_HostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = USB_HostInit &rArr; OSA_MutexDestroy &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexDestroy
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexCreate
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseInstance
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostGetInstance
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostGetControllerInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_usbh_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_usbh_init
</UL>

<P><STRONG><a name="[371]"></a>USB_HostIsrEnable</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, drv_usbh.o(i.USB_HostIsrEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_HostIsrEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_usbh_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_usbh_init
</UL>

<P><STRONG><a name="[339]"></a>USB_HostMallocTransfer</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_host_hci.o(i.USB_HostMallocTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = USB_HostMallocTransfer &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_pipe_xfer
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_pipe_xfer
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostProcessState
</UL>

<P><STRONG><a name="[302]"></a>USB_HostOpenPipe</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_host_hci.o(i.USB_HostOpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_HostOpenPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_open_pipe
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_open_pipe
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostAttachDevice
</UL>

<P><STRONG><a name="[30d]"></a>USB_HostSendSetup</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usb_host_hci.o(i.USB_HostSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = USB_HostSendSetup &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCh9RequestCommon
</UL>

<P><STRONG><a name="[33c]"></a>USB_HostStandardSetAddress</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usb_host_framework.o(i.USB_HostStandardSetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = USB_HostStandardSetAddress &rArr; USB_HostCh9RequestCommon &rArr; USB_HostSendSetup &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCh9RequestCommon
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostProcessState
</UL>

<P><STRONG><a name="[33b]"></a>USB_HostStandardSetGetDescriptor</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_host_framework.o(i.USB_HostStandardSetGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = USB_HostStandardSetGetDescriptor &rArr; USB_HostCh9RequestCommon &rArr; USB_HostSendSetup &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCh9RequestCommon
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostProcessState
</UL>

<P><STRONG><a name="[313]"></a>USB_HostValidateDevice</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_host_devices.o(i.USB_HostValidateDevice))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCloseDeviceInterface
</UL>

<P><STRONG><a name="[96]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_usbh.o(i.USB_OTG1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = USB_OTG1_IRQHandler &rArr; USB_HostEhciIsrFunction &rArr; OSA_EventSet &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciIsrFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_usbh.o(i.USB_OTG2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = USB_OTG2_IRQHandler &rArr; USB_HostEhciIsrFunction &rArr; OSA_EventSet &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciIsrFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_usdhc.o(i.USDHC1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_usdhc.o(i.USDHC2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[341]"></a>USDHC_Init</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, fsl_usdhc.o(i.USDHC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = USDHC_Init &rArr; USDHC_SetTransferInterrupt &rArr; USDHC_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Reset
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetTransferInterrupt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInstance
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_host_init
</UL>

<P><STRONG><a name="[2f7]"></a>USDHC_Reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_usdhc.o(i.USDHC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ErrorRecovery
</UL>

<P><STRONG><a name="[348]"></a>USDHC_SendCommand</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fsl_usdhc.o(i.USDHC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = USDHC_SendCommand &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[349]"></a>USDHC_SetADMA1Descriptor</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, fsl_usdhc.o(i.USDHC_SetADMA1Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = USDHC_SetADMA1Descriptor &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
</UL>

<P><STRONG><a name="[34a]"></a>USDHC_SetADMA2Descriptor</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, fsl_usdhc.o(i.USDHC_SetADMA2Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = USDHC_SetADMA2Descriptor &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
</UL>

<P><STRONG><a name="[34b]"></a>USDHC_SetAdmaTableConfig</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, fsl_usdhc.o(i.USDHC_SetAdmaTableConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = USDHC_SetAdmaTableConfig &rArr; USDHC_SetADMA2Descriptor &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetInternalDmaConfig
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetADMA2Descriptor
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetADMA1Descriptor
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[34c]"></a>USDHC_SetInternalDmaConfig</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fsl_usdhc.o(i.USDHC_SetInternalDmaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = USDHC_SetInternalDmaConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
</UL>

<P><STRONG><a name="[34d]"></a>USDHC_SetSdClock</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, fsl_usdhc.o(i.USDHC_SetSdClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = USDHC_SetSdClock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_set_iocfg
</UL>

<P><STRONG><a name="[34e]"></a>USDHC_TransferBlocking</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, fsl_usdhc.o(i.USDHC_TransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = USDHC_TransferBlocking &rArr; USDHC_SetAdmaTableConfig &rArr; USDHC_SetADMA2Descriptor &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanByRange
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanInvalidateByRange
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SendCommand
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetDataTransferConfig
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableInternalDMA
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_request
</UL>

<P><STRONG><a name="[3a9]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>

<P><STRONG><a name="[359]"></a>__rt_libc_exit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stdlib.o(i.__rt_libc_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[100]"></a>_enet_callback</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, drv_eth.o(i._enet_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _enet_callback &rArr; _enet_rx_callback &rArr; eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_tx_callback
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_rx_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i._enet_config)
</UL>
<P><STRONG><a name="[374]"></a>_enet_rx_callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_eth.o(i._enet_rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _enet_rx_callback &rArr; eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_callback
</UL>

<P><STRONG><a name="[375]"></a>_enet_tx_callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_eth.o(i._enet_tx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _enet_tx_callback &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_callback
</UL>

<P><STRONG><a name="[37e]"></a>_imxrt_mci_init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, drv_sdio.o(i._imxrt_mci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = _imxrt_mci_init &rArr; _mmcsd_host_init &rArr; USDHC_Init &rArr; USDHC_SetTransferInterrupt &rArr; USDHC_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_free_host
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_change
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_isr_init
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_host_init
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_gpio_init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_clk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_mci_init
</UL>

<P><STRONG><a name="[228]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[38f]"></a>_memheap_alloc</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, memheap.o(i._memheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_realloc
</UL>

<P><STRONG><a name="[392]"></a>_memheap_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, memheap.o(i._memheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_realloc
</UL>

<P><STRONG><a name="[394]"></a>_memheap_realloc</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, memheap.o(i._memheap_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_free
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[25c]"></a>_sys_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, syscalls.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _sys_close &rArr; close &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[21b]"></a>_sys_exit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, syscalls.o(i._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[254]"></a>_sys_flen</STRONG> (Thumb, 28 bytes, Stack size 72 bytes, syscalls.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[255]"></a>_sys_istty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, syscalls.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[258]"></a>_sys_open</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, syscalls.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = _sys_open &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[261]"></a>_sys_seek</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, syscalls.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _sys_seek &rArr; lseek &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[262]"></a>_sys_write</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, syscalls.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _sys_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[263]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, syscalls.o(i._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[3db]"></a>asctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i.asctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = asctime &rArr; asctime_r &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[3dc]"></a>asctime_r</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, time.o(i.asctime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = asctime_r &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2str
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[1d5]"></a>can_sample</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, can_test.o(i.can_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = can_sample &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_test.o(FSymTab)
</UL>
<P><STRONG><a name="[3e3]"></a>cat</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, dfs_file.o(i.cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
</UL>

<P><STRONG><a name="[3e7]"></a>chdir</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, dfs_posix.o(i.chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = chdir &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
</UL>

<P><STRONG><a name="[3b2]"></a>close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dfs_posix.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = close &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readwrite
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[3ec]"></a>closedir</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfs_posix.o(i.closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = closedir &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[3f6]"></a>closesocket</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, net_sockets.o(i.closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
</UL>

<P><STRONG><a name="[1d8]"></a>cmd_canstat</STRONG> (Thumb, 218 bytes, Stack size 80 bytes, can.o(i.cmd_canstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = cmd_canstat &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(FSymTab)
</UL>
<P><STRONG><a name="[1de]"></a>cmd_free</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, msh.o(i.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = cmd_free &rArr; rt_memory_info &rArr; rt_memheap_info &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[1dd]"></a>cmd_ps</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[408]"></a>connect</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, net_sockets.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = connect &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_connect
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
</UL>

<P><STRONG><a name="[3f9]"></a>copy</STRONG> (Thumb, 280 bytes, Stack size 88 bytes, dfs_file.o(i.copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
</UL>

<P><STRONG><a name="[41b]"></a>ctime</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, time.o(i.ctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ctime &rArr; localtime &rArr; localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>

<P><STRONG><a name="[420]"></a>devfs_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, devfs.o(i.devfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = devfs_init &rArr; dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[3fa]"></a>df</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, dfs_fs.o(i.df))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
</UL>

<P><STRONG><a name="[17d]"></a>dfs_device_fs_close</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = dfs_device_fs_close &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>dfs_device_fs_getdents</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, devfs.o(i.dfs_device_fs_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dfs_device_fs_getdents &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>dfs_device_fs_ioctl</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dfs_device_fs_ioctl &rArr; rt_device_control
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>dfs_device_fs_mount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_mount))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>dfs_device_fs_open</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, devfs.o(i.dfs_device_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = dfs_device_fs_open &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>dfs_device_fs_read</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_device_fs_read &rArr; rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>dfs_device_fs_stat</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = dfs_device_fs_stat &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>dfs_device_fs_write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_device_fs_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>dfs_elm_close</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dfs_elm.o(i.dfs_elm_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = dfs_elm_close &rArr; f_close &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>dfs_elm_flush</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfs_elm.o(i.dfs_elm_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = dfs_elm_flush &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>dfs_elm_getdents</STRONG> (Thumb, 194 bytes, Stack size 320 bytes, dfs_elm.o(i.dfs_elm_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = dfs_elm_getdents &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>dfs_elm_ioctl</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = dfs_elm_ioctl &rArr; f_lseek &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>dfs_elm_lseek</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = dfs_elm_lseek &rArr; f_seekdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>dfs_elm_mkfs</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, dfs_elm.o(i.dfs_elm_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = dfs_elm_mkfs &rArr; f_mkfs &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>dfs_elm_mount</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, dfs_elm.o(i.dfs_elm_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = dfs_elm_mount &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>dfs_elm_open</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = dfs_elm_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>dfs_elm_read</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = dfs_elm_read &rArr; f_read &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>dfs_elm_rename</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = dfs_elm_rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>dfs_elm_stat</STRONG> (Thumb, 256 bytes, Stack size 384 bytes, dfs_elm.o(i.dfs_elm_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 932 + Unknown Stack Size
<LI>Call Chain = dfs_elm_stat &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>dfs_elm_statfs</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = dfs_elm_statfs &rArr; f_getfree &rArr; mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>dfs_elm_unlink</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = dfs_elm_unlink &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>dfs_elm_unmount</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = dfs_elm_unmount &rArr; f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>dfs_elm_write</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = dfs_elm_write &rArr; f_write &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[4bb]"></a>dfs_fdtable_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs.o(i.dfs_fdtable_get))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[3e6]"></a>dfs_file_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
</UL>

<P><STRONG><a name="[40d]"></a>dfs_file_getdents</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
</UL>

<P><STRONG><a name="[534]"></a>dfs_file_lseek</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
</UL>

<P><STRONG><a name="[3e4]"></a>dfs_file_open</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, dfs_file.o(i.dfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[3e5]"></a>dfs_file_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[43c]"></a>dfs_file_rename</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, dfs_file.o(i.dfs_file_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>

<P><STRONG><a name="[40a]"></a>dfs_file_stat</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, dfs_file.o(i.dfs_file_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
</UL>

<P><STRONG><a name="[43d]"></a>dfs_file_unlink</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
</UL>

<P><STRONG><a name="[40e]"></a>dfs_file_write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[43f]"></a>dfs_filesystem_get_mounted_path</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs_fs.o(i.dfs_filesystem_get_mounted_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dfs_filesystem_get_mounted_path &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
</UL>

<P><STRONG><a name="[440]"></a>dfs_filesystem_get_partition</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, dfs_fs.o(i.dfs_filesystem_get_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = dfs_filesystem_get_partition &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[439]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_filesystem_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[1c0]"></a>dfs_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dfs.o(i.dfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = dfs_init &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[3e8]"></a>dfs_lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dfs.o(i.dfs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[3fe]"></a>dfs_mkfs</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
</UL>

<P><STRONG><a name="[3ff]"></a>dfs_mount</STRONG> (Thumb, 402 bytes, Stack size 88 bytes, dfs_fs.o(i.dfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mount
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[6a9]"></a>dfs_net_get_fops</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_net.o(i.dfs_net_get_fops))
<BR><BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[3f7]"></a>dfs_net_getsocket</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dfs_net.o(i.dfs_net_getsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[3ea]"></a>dfs_normalize_path</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, dfs.o(i.dfs_normalize_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[421]"></a>dfs_register</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
</UL>

<P><STRONG><a name="[422]"></a>dfs_statfs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dfs_fs.o(i.dfs_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[43a]"></a>dfs_subdir</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfs.o(i.dfs_subdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfs_subdir &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[3e9]"></a>dfs_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs.o(i.dfs_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[405]"></a>dfs_unmount</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_umount
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>

<P><STRONG><a name="[4b4]"></a>disk_initialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(i.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[417]"></a>disk_ioctl</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = disk_ioctl &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[459]"></a>disk_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = disk_read &rArr; rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[5c2]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[41a]"></a>disk_write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[46c]"></a>dns_gethostbyname_addrtype</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, dns.o(i.dns_gethostbyname_addrtype))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</UL>

<P><STRONG><a name="[54e]"></a>dns_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dns.o(i.dns_init))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[478]"></a>dns_setserver</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dns.o(i.dns_setserver))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dns_setserver &rArr; netdev_get_by_name &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dns_server
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_dns_server
</UL>

<P><STRONG><a name="[197]"></a>dns_tmr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[42f]"></a>elm_get_vol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(i.elm_get_vol))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[1c7]"></a>elm_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.elm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = elm_init &rArr; dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[536]"></a>err_to_errno</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, err.o(i.err_to_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[480]"></a>eth_device_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethernetif.o(i.eth_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_imxrt_eth_init
</UL>

<P><STRONG><a name="[481]"></a>eth_device_init_with_flag</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, ethernetif.o(i.eth_device_init_with_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
</UL>

<P><STRONG><a name="[487]"></a>eth_device_linkchange</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ethernetif.o(i.eth_device_linkchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = eth_device_linkchange &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_imxrt_eth_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
</UL>

<P><STRONG><a name="[379]"></a>eth_device_ready</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ethernetif.o(i.eth_device_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_rx_callback
</UL>

<P><STRONG><a name="[490]"></a>eth_system_device_init_private</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ethernetif.o(i.eth_system_device_init_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = eth_system_device_init_private &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[493]"></a>etharp_cleanup_netif</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, etharp.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[497]"></a>etharp_input</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, etharp.o(i.etharp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = etharp_input &rArr; etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[10b]"></a>etharp_output</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_netif_device_init)
</UL>
<P><STRONG><a name="[49c]"></a>etharp_query</STRONG> (Thumb, 612 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[49e]"></a>etharp_request</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[195]"></a>etharp_tmr</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = etharp_tmr &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>ethernet_input</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ethernet.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[49d]"></a>ethernet_output</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ethernet.o(i.ethernet_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = ethernet_output &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[424]"></a>f_close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = f_close &rArr; f_sync &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[436]"></a>f_getfree</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = f_getfree &rArr; mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
</UL>

<P><STRONG><a name="[429]"></a>f_lseek</STRONG> (Thumb, 828 bytes, Stack size 72 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = f_lseek &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
</UL>

<P><STRONG><a name="[430]"></a>f_mkdir</STRONG> (Thumb, 310 bytes, Stack size 96 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[42d]"></a>f_mkfs</STRONG> (Thumb, 1824 bytes, Stack size 152 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = f_mkfs &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[42c]"></a>f_mount</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[431]"></a>f_open</STRONG> (Thumb, 550 bytes, Stack size 112 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[42e]"></a>f_opendir</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[432]"></a>f_read</STRONG> (Thumb, 512 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = f_read &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
</UL>

<P><STRONG><a name="[427]"></a>f_readdir</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</UL>

<P><STRONG><a name="[433]"></a>f_rename</STRONG> (Thumb, 330 bytes, Stack size 168 bytes, ff.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
</UL>

<P><STRONG><a name="[42a]"></a>f_seekdir</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ff.o(i.f_seekdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = f_seekdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</UL>

<P><STRONG><a name="[434]"></a>f_stat</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, ff.o(i.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[426]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = f_sync &rArr; get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
</UL>

<P><STRONG><a name="[428]"></a>f_truncate</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, ff.o(i.f_truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = f_truncate &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
</UL>

<P><STRONG><a name="[437]"></a>f_unlink</STRONG> (Thumb, 212 bytes, Stack size 120 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
</UL>

<P><STRONG><a name="[438]"></a>f_write</STRONG> (Thumb, 580 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = f_write &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
</UL>

<P><STRONG><a name="[3f4]"></a>fd_get</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dfs.o(i.fd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>

<P><STRONG><a name="[43e]"></a>fd_is_open</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, dfs.o(i.fd_is_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[4bc]"></a>fd_new</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dfs.o(i.fd_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[3f5]"></a>fd_put</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dfs.o(i.fd_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>

<P><STRONG><a name="[4b6]"></a>ff_cre_syncobj</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfs_elm.o(i.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[4b5]"></a>ff_del_syncobj</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = ff_del_syncobj &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[44d]"></a>ff_memalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[44e]"></a>ff_memfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = ff_memfree &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[6b2]"></a>ff_oem2uni</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ffunicode.o(i.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[4bd]"></a>ff_rel_grant</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[4be]"></a>ff_req_grant</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[415]"></a>ff_uni2oem</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ffunicode.o(i.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[407]"></a>ff_wtoupper</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ffunicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[4c0]"></a>finsh_get_prompt</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, shell.o(i.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = finsh_get_prompt &rArr; getcwd &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[4c4]"></a>finsh_getchar</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, shell.o(i.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = finsh_getchar &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[4c5]"></a>finsh_set_device</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, shell.o(i.finsh_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[4c7]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, shell.o(i.finsh_set_prompt_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[4c6]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1cd]"></a>finsh_system_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, shell.o(i.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[111]"></a>finsh_thread_entry</STRONG> (Thumb, 1272 bytes, Stack size 0 bytes, shell.o(i.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = finsh_thread_entry &rArr; shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_system_init)
</UL>
<P><STRONG><a name="[f3]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[24e]"></a>free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall_mem.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = free &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[3b3]"></a>fstat</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs_posix.o(i.fstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[4af]"></a>get_fattime</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, dfs_elm.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = get_fattime &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[4c2]"></a>getcwd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dfs_posix.o(i.getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = getcwd &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[4d9]"></a>gethostbyname</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_netdb.o(i.gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gethostbyname &rArr; sal_gethostbyname &rArr; netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
</UL>

<P><STRONG><a name="[4d5]"></a>gmtime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i.gmtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gmtime &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[4db]"></a>gmtime_r</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, time.o(i.gmtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_is_dst
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
</UL>

<P><STRONG><a name="[4e1]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4e3]"></a>icmp_input</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[54d]"></a>igmp_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, igmp.o(i.igmp_init))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4eb]"></a>igmp_input</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, igmp.o(i.igmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4ef]"></a>igmp_joingroup</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, igmp.o(i.igmp_joingroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
</UL>

<P><STRONG><a name="[4f0]"></a>igmp_joingroup_netif</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, igmp.o(i.igmp_joingroup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = igmp_joingroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>

<P><STRONG><a name="[4f3]"></a>igmp_leavegroup</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, igmp.o(i.igmp_leavegroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
</UL>

<P><STRONG><a name="[4f4]"></a>igmp_leavegroup_netif</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, igmp.o(i.igmp_leavegroup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>

<P><STRONG><a name="[4ec]"></a>igmp_lookfor_group</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, igmp.o(i.igmp_lookfor_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>

<P><STRONG><a name="[4f6]"></a>igmp_report_groups</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, igmp.o(i.igmp_report_groups))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>

<P><STRONG><a name="[4f7]"></a>igmp_start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, igmp.o(i.igmp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[196]"></a>igmp_tmr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, igmp.o(i.igmp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = igmp_tmr &rArr; igmp_timeout &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[4f9]"></a>imxrt_can1_pins_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, board.o(i.imxrt_can1_pins_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = imxrt_can1_pins_init &rArr; IOMUXC_SetPinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[4fd]"></a>imxrt_enet_pins_init</STRONG> (Thumb, 682 bytes, Stack size 40 bytes, board.o(i.imxrt_enet_pins_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = imxrt_enet_pins_init &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1c4]"></a>imxrt_mci_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_sdio.o(i.imxrt_mci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = imxrt_mci_init &rArr; _imxrt_mci_init &rArr; _mmcsd_host_init &rArr; USDHC_Init &rArr; USDHC_SetTransferInterrupt &rArr; USDHC_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imxrt_mci_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdio.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[501]"></a>imxrt_sdio_pins_init</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, board.o(i.imxrt_sdio_pins_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = imxrt_sdio_pins_init &rArr; IOMUXC_SetPinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[502]"></a>imxrt_uart_pins_init</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, board.o(i.imxrt_uart_pins_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = imxrt_uart_pins_init &rArr; IOMUXC_SetPinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1c5]"></a>imxrt_usbh_register</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, drv_usbh.o(i.imxrt_usbh_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = imxrt_usbh_register &rArr; rt_usb_host_init &rArr; rt_usbh_hub_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[4e6]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>

<P><STRONG><a name="[4e4]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[507]"></a>inet_chksum_pseudo</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>

<P><STRONG><a name="[1b1]"></a>inet_ioctlsocket</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, af_inet_lwip.o(i.inet_ioctlsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = inet_ioctlsocket &rArr; lwip_fcntl &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[50e]"></a>init_mmc</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, mmc.o(i.init_mmc))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = init_mmc &rArr; mmcsd_mmc_init_card &rArr; mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[516]"></a>init_sd</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, sd.o(i.init_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = init_sd &rArr; rt_mmcsd_blk_probe &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[519]"></a>init_sdio</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sdio.o(i.init_sdio))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = init_sdio &rArr; sdio_init_card &rArr; sdio_initialize_function &rArr; sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[49a]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip4_addr.o(i.ip4_addr_isbroadcast_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input_accept
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[167]"></a>ip4_input</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, ip4.o(i.ip4_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input_accept
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[4e7]"></a>ip4_output_if</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, ip4.o(i.ip4_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[4ee]"></a>ip4_output_if_opt</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, ip4.o(i.ip4_output_if_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
</UL>

<P><STRONG><a name="[521]"></a>ip4_output_if_opt_src</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, ip4.o(i.ip4_output_if_opt_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ip4_output_if_opt_src &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>

<P><STRONG><a name="[522]"></a>ip4_output_if_src</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, ip4.o(i.ip4_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[523]"></a>ip4_route</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, ip4.o(i.ip4_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ip4_route &rArr; lwip_ip4_route_src
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ip4_route_src
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
</UL>

<P><STRONG><a name="[4e8]"></a>ip4_route_src</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ip4.o(i.ip4_route_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ip4_route_src &rArr; ip4_route &rArr; lwip_ip4_route_src
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ip4_route_src
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[46d]"></a>ip4addr_aton</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, ip4_addr.o(i.ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ip4addr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[525]"></a>ip4addr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ip4_addr.o(i.ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip4addr_ntoa &rArr; ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>

<P><STRONG><a name="[526]"></a>ip4addr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ip4_addr.o(i.ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
</UL>

<P><STRONG><a name="[527]"></a>ip_chksum_pseudo</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, inet_chksum.o(i.ip_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ip_chksum_pseudo &rArr; inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[485]"></a>ipaddr_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip4_addr.o(i.ipaddr_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ipaddr_addr &rArr; ip4addr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[1f8]"></a>list_device</STRONG> (Thumb, 172 bytes, Stack size 96 bytes, cmd.o(i.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_device &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1f1]"></a>list_event</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, cmd.o(i.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1db]"></a>list_fd</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, dfs.o(i.list_fd))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = list_fd &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(FSymTab)
</UL>
<P><STRONG><a name="[1f3]"></a>list_mailbox</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1f5]"></a>list_memheap</STRONG> (Thumb, 158 bytes, Stack size 96 bytes, cmd.o(i.list_memheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_memheap &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1f6]"></a>list_mempool</STRONG> (Thumb, 232 bytes, Stack size 112 bytes, cmd.o(i.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1f4]"></a>list_msgqueue</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1f2]"></a>list_mutex</STRONG> (Thumb, 168 bytes, Stack size 104 bytes, cmd.o(i.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1f0]"></a>list_sem</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[52e]"></a>list_tcps</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, ethernetif.o(i.list_tcps))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_tcps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_state_str
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_netstat
</UL>

<P><STRONG><a name="[1ef]"></a>list_thread</STRONG> (Thumb, 294 bytes, Stack size 232 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1f7]"></a>list_timer</STRONG> (Thumb, 212 bytes, Stack size 96 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[530]"></a>list_udps</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, ethernetif.o(i.list_udps))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_udps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_netstat
</UL>

<P><STRONG><a name="[41c]"></a>localtime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i.localtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = localtime &rArr; localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[531]"></a>localtime_r</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, time.o(i.localtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_get
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[3fc]"></a>ls</STRONG> (Thumb, 210 bytes, Stack size 88 bytes, dfs_file.o(i.ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = ls &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ls
</UL>

<P><STRONG><a name="[3b6]"></a>lseek</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dfs_posix.o(i.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = lseek &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
</UL>

<P><STRONG><a name="[504]"></a>lwip_accept</STRONG> (Thumb, 484 bytes, Stack size 80 bytes, sockets.o(i.lwip_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = lwip_accept &rArr; free_socket &rArr; free_socket_free_elements &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_accept
</UL>

<P><STRONG><a name="[1a6]"></a>lwip_bind</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, sockets.o(i.lwip_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>lwip_close</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sockets.o(i.lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = lwip_close &rArr; free_socket &rArr; free_socket_free_elements &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>lwip_connect</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, sockets.o(i.lwip_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lwip_connect &rArr; netconn_connect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[50a]"></a>lwip_fcntl</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, sockets.o(i.lwip_fcntl))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = lwip_fcntl &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ioctlsocket
</UL>

<P><STRONG><a name="[1b6]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, netdb.o(i.lwip_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = lwip_freeaddrinfo &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>lwip_getaddrinfo</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, netdb.o(i.lwip_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>lwip_gethostbyname</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, netdb.o(i.lwip_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>lwip_gethostbyname_r</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, netdb.o(i.lwip_gethostbyname_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = lwip_gethostbyname_r &rArr; netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>lwip_getpeername</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(i.lwip_getpeername))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = lwip_getpeername &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[509]"></a>lwip_getsockname</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(i.lwip_getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_getsockname
</UL>

<P><STRONG><a name="[1ac]"></a>lwip_getsockopt</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, sockets.o(i.lwip_getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = lwip_getsockopt &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[472]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
</UL>

<P><STRONG><a name="[46f]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_recv
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>

<P><STRONG><a name="[546]"></a>lwip_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[50b]"></a>lwip_ioctl</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, sockets.o(i.lwip_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lwip_ioctl &rArr; get_socket &rArr; tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ioctlsocket
</UL>

<P><STRONG><a name="[524]"></a>lwip_ip4_route_src</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sys_arch.o(i.lwip_ip4_route_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_ip4_route_src
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>

<P><STRONG><a name="[1a7]"></a>lwip_listen</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sockets.o(i.lwip_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = lwip_listen &rArr; netconn_listen_with_backlog &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>lwip_netconn_do_bind</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = lwip_netconn_do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_bind)
</UL>
<P><STRONG><a name="[11f]"></a>lwip_netconn_do_close</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = lwip_netconn_do_close &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_close_shutdown)
</UL>
<P><STRONG><a name="[120]"></a>lwip_netconn_do_connect</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = lwip_netconn_do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_connect)
</UL>
<P><STRONG><a name="[127]"></a>lwip_netconn_do_delconn</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = lwip_netconn_do_delconn &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_prepare_delete)
</UL>
<P><STRONG><a name="[121]"></a>lwip_netconn_do_disconnect</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = lwip_netconn_do_disconnect &rArr; udp_disconnect &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_disconnect)
</UL>
<P><STRONG><a name="[122]"></a>lwip_netconn_do_getaddr</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = lwip_netconn_do_getaddr &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[123]"></a>lwip_netconn_do_gethostbyname</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_gethostbyname)
</UL>
<P><STRONG><a name="[124]"></a>lwip_netconn_do_join_leave_group</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_join_leave_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = lwip_netconn_do_join_leave_group &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_join_leave_group)
</UL>
<P><STRONG><a name="[125]"></a>lwip_netconn_do_listen</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = lwip_netconn_do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_listen_with_backlog)
</UL>
<P><STRONG><a name="[126]"></a>lwip_netconn_do_newconn</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = lwip_netconn_do_newconn &rArr; pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[129]"></a>lwip_netconn_do_recv</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_tcp_recvd_msg)
</UL>
<P><STRONG><a name="[128]"></a>lwip_netconn_do_send</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = lwip_netconn_do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_send)
</UL>
<P><STRONG><a name="[12a]"></a>lwip_netconn_do_write</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = lwip_netconn_do_write &rArr; lwip_netconn_do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write_vectors_partly)
</UL>
<P><STRONG><a name="[569]"></a>lwip_netconn_is_err_msg</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_is_err_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = lwip_netconn_is_err_msg &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[19d]"></a>lwip_netdev_netstat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.lwip_netdev_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = lwip_netdev_netstat &rArr; list_udps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>lwip_netdev_ping</STRONG> (Thumb, 306 bytes, Stack size 128 bytes, ethernetif.o(i.lwip_netdev_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = lwip_netdev_ping &rArr; lwip_ping_recv &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; pbuf_free_header &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[56b]"></a>lwip_ping_recv</STRONG> (Thumb, 98 bytes, Stack size 120 bytes, ping.o(i.lwip_ping_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = lwip_ping_recv &rArr; lwip_recvfrom &rArr; lwip_recv_tcp &rArr; pbuf_free_header &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[56a]"></a>lwip_ping_send</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, ping.o(i.lwip_ping_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = lwip_ping_send &rArr; lwip_sendto &rArr; netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[1ab]"></a>lwip_recvfrom</STRONG> (Thumb, 246 bytes, Stack size 96 bytes, sockets.o(i.lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = lwip_recvfrom &rArr; lwip_recv_tcp &rArr; pbuf_free_header &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp_from
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[57a]"></a>lwip_send</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, sockets.o(i.lwip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + In Cycle
<LI>Call Chain = lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[1aa]"></a>lwip_sendto</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, sockets.o(i.lwip_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = lwip_sendto &rArr; netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>lwip_setsockopt</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, sockets.o(i.lwip_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = lwip_setsockopt &rArr; lwip_setsockopt_impl &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>lwip_shutdown</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, sockets.o(i.lwip_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[50d]"></a>lwip_socket</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_socket
</UL>

<P><STRONG><a name="[506]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>

<P><STRONG><a name="[46b]"></a>lwip_strnicmp</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, def.o(i.lwip_strnicmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[1c1]"></a>lwip_system_init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, sys_arch.o(i.lwip_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = lwip_system_init &rArr; tcpip_init &rArr; lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[4a8]"></a>lwip_tryget_socket</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sockets.o(i.lwip_tryget_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwip_tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket_unconn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_socket
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_poll
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_accept
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[58c]"></a>$Super$$main</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameworkInit
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[131]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[256]"></a>malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall_mem.o(i.malloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[592]"></a>mem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mem_free &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[548]"></a>mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[593]"></a>mem_malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mem_malloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[594]"></a>mem_overflow_check_raw</STRONG> (Thumb, 148 bytes, Stack size 160 bytes, sys_arch.o(i.mem_overflow_check_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element
</UL>

<P><STRONG><a name="[595]"></a>mem_overflow_init_raw</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sys_arch.o(i.mem_overflow_init_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mem_overflow_init_raw &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_init_element
</UL>

<P><STRONG><a name="[606]"></a>mem_trim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.mem_trim))
<BR><BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[4a3]"></a>memp_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
</UL>

<P><STRONG><a name="[549]"></a>memp_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = memp_init &rArr; memp_init_pool &rArr; memp_overflow_init_element &rArr; mem_overflow_init_raw &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[596]"></a>memp_init_pool</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, memp.o(i.memp_init_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = memp_init_pool &rArr; memp_overflow_init_element &rArr; mem_overflow_init_raw &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_init_element
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
</UL>

<P><STRONG><a name="[4a2]"></a>memp_malloc_fn</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, memp.o(i.memp_malloc_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
</UL>

<P><STRONG><a name="[3fd]"></a>mkdir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dfs_posix.o(i.mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = mkdir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[598]"></a>mktime</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, time.o(i.mktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mktime &rArr; timegm
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_get
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[5a1]"></a>mmc_send_op_cond</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, mmc.o(i.mmc_send_op_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = mmc_send_op_cond &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[5a3]"></a>mmcsd_all_get_cid</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, mmcsd_core.o(i.mmcsd_all_get_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = mmcsd_all_get_cid &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[37f]"></a>mmcsd_alloc_host</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_alloc_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mmcsd_alloc_host &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imxrt_mci_init
</UL>

<P><STRONG><a name="[5a5]"></a>mmcsd_app_set_bus_width</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, sd.o(i.mmcsd_app_set_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = mmcsd_app_set_bus_width &rArr; mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[384]"></a>mmcsd_change</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mmcsd_change &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imxrt_mci_init
</UL>

<P><STRONG><a name="[14d]"></a>mmcsd_detect</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = mmcsd_detect &rArr; init_mmc &rArr; mmcsd_mmc_init_card &rArr; mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_if_cond
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_off
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmcsd_core.o(i.rt_mmcsd_core_init)
</UL>
<P><STRONG><a name="[385]"></a>mmcsd_free_host</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_free_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mmcsd_free_host &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imxrt_mci_init
</UL>

<P><STRONG><a name="[5ae]"></a>mmcsd_get_card_addr</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, sd.o(i.mmcsd_get_card_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = mmcsd_get_card_addr &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[5af]"></a>mmcsd_get_cid</STRONG> (Thumb, 240 bytes, Stack size 120 bytes, mmcsd_core.o(i.mmcsd_get_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = mmcsd_get_cid &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5b0]"></a>mmcsd_get_csd</STRONG> (Thumb, 232 bytes, Stack size 120 bytes, mmcsd_core.o(i.mmcsd_get_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = mmcsd_get_csd &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5b1]"></a>mmcsd_get_scr</STRONG> (Thumb, 190 bytes, Stack size 112 bytes, sd.o(i.mmcsd_get_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = mmcsd_get_scr &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[517]"></a>mmcsd_go_idle</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, mmcsd_core.o(i.mmcsd_go_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = mmcsd_go_idle &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_chip_select
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[514]"></a>mmcsd_host_lock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_host_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mmcsd_host_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[512]"></a>mmcsd_host_unlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_host_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mmcsd_host_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[398]"></a>mmcsd_req_complete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_req_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = mmcsd_req_complete &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_request
</UL>

<P><STRONG><a name="[5b7]"></a>mmcsd_select_card</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_select_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = mmcsd_select_card &rArr; _mmcsd_select_card &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[510]"></a>mmcsd_select_voltage</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_select_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_select_voltage &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
</UL>

<P><STRONG><a name="[5a6]"></a>mmcsd_send_app_cmd</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, sd.o(i.mmcsd_send_app_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_set_bus_width
</UL>

<P><STRONG><a name="[5ac]"></a>mmcsd_send_app_op_cond</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, sd.o(i.mmcsd_send_app_op_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = mmcsd_send_app_op_cond &rArr; mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[39d]"></a>mmcsd_send_cmd</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, mmcsd_core.o(i.mmcsd_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_if_cond
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_card_addr
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
</UL>

<P><STRONG><a name="[5a9]"></a>mmcsd_send_if_cond</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, sd.o(i.mmcsd_send_if_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = mmcsd_send_if_cond &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[59c]"></a>mmcsd_send_request</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
</UL>

<P><STRONG><a name="[5b5]"></a>mmcsd_set_bus_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_bus_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_bus_mode &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[59f]"></a>mmcsd_set_bus_width</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_bus_width &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
</UL>

<P><STRONG><a name="[5b3]"></a>mmcsd_set_chip_select</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_chip_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_chip_select &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
</UL>

<P><STRONG><a name="[5b9]"></a>mmcsd_set_clock</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_clock &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[5b2]"></a>mmcsd_set_data_timeout</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, mmcsd_core.o(i.mmcsd_set_data_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mmcsd_set_data_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
</UL>

<P><STRONG><a name="[50f]"></a>mmcsd_spi_read_ocr</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, mmcsd_core.o(i.mmcsd_spi_read_ocr))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = mmcsd_spi_read_ocr &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[5b4]"></a>mmcsd_spi_use_crc</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, mmcsd_core.o(i.mmcsd_spi_use_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = mmcsd_spi_use_crc &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[5c1]"></a>mmcsd_wait_cd_changed</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_wait_cd_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = mmcsd_wait_cd_changed &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_mount
</UL>

<P><STRONG><a name="[5c3]"></a>msh_auto_complete</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, msh.o(i.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[5c4]"></a>msh_auto_complete_path</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, msh.o(i.msh_auto_complete_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[4cc]"></a>msh_exec</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, msh.o(i.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = msh_exec &rArr; msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[5c7]"></a>msh_exec_script</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, msh_file.o(i.msh_exec_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + In Cycle
<LI>Call Chain = msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[1dc]"></a>msh_help</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh.o(i.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[4d2]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_free_elements
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[57e]"></a>netbuf_free</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[57c]"></a>netbuf_ref</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netbuf.o(i.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[535]"></a>netconn_accept</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, api_lib.o(i.netconn_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = netconn_accept &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[3ce]"></a>netconn_alloc</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = netconn_alloc &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[53a]"></a>netconn_bind</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, api_lib.o(i.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[53e]"></a>netconn_connect</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, api_lib.o(i.netconn_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_connect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[4d3]"></a>netconn_delete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = netconn_delete &rArr; netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_free_elements
</UL>

<P><STRONG><a name="[53d]"></a>netconn_disconnect</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, api_lib.o(i.netconn_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = netconn_disconnect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[545]"></a>netconn_err</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, api_lib.o(i.netconn_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netconn_err &rArr; sys_arch_unprotect
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[3d7]"></a>netconn_free</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[539]"></a>netconn_getaddr</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, api_lib.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp_from
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[541]"></a>netconn_gethostbyname</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, api_lib.o(i.netconn_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[588]"></a>netconn_join_leave_group</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, api_lib.o(i.netconn_join_leave_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
</UL>

<P><STRONG><a name="[550]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, api_lib.o(i.netconn_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_listen_with_backlog &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[587]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[53c]"></a>netconn_prepare_delete</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, api_lib.o(i.netconn_prepare_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = netconn_prepare_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[573]"></a>netconn_recv_tcp_pbuf_flags</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, api_lib.o(i.netconn_recv_tcp_pbuf_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = netconn_recv_tcp_pbuf_flags &rArr; netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[579]"></a>netconn_recv_udp_raw_netbuf_flags</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, api_lib.o(i.netconn_recv_udp_raw_netbuf_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_recv_udp_raw_netbuf_flags &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
</UL>

<P><STRONG><a name="[57d]"></a>netconn_send</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, api_lib.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_send &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[586]"></a>netconn_shutdown</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, api_lib.o(i.netconn_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[575]"></a>netconn_tcp_recvd</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, api_lib.o(i.netconn_tcp_recvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = netconn_tcp_recvd &rArr; netconn_tcp_recvd_msg &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[57b]"></a>netconn_write_partly</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, api_lib.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = netconn_write_partly &rArr; netconn_write_vectors_partly &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[5d5]"></a>netconn_write_vectors_partly</STRONG> (Thumb, 312 bytes, Stack size 80 bytes, api_lib.o(i.netconn_write_vectors_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = netconn_write_vectors_partly &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
</UL>

<P><STRONG><a name="[5dd]"></a>netdev_cmd_ping</STRONG> (Thumb, 444 bytes, Stack size 72 bytes, netdev.o(i.netdev_cmd_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = netdev_cmd_ping &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ping
</UL>

<P><STRONG><a name="[1fb]"></a>netdev_dns</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netdev.o(i.netdev_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = netdev_dns &rArr; netdev_set_dns &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[5e2]"></a>netdev_get_by_family</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, netdev.o(i.netdev_get_by_family))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netdev_get_by_family
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
</UL>

<P><STRONG><a name="[479]"></a>netdev_get_by_name</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, netdev.o(i.netdev_get_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netdev_get_by_name &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_netmask
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_gw
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_flags_sync
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[5d9]"></a>netdev_get_first_by_flags</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, netdev.o(i.netdev_get_first_by_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_gethostbyname
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>

<P><STRONG><a name="[1f9]"></a>netdev_ifconfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netdev.o(i.netdev_ifconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = netdev_ifconfig &rArr; netdev_set_if &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[5ec]"></a>netdev_ip4addr_aton</STRONG> (Thumb, 390 bytes, Stack size 36 bytes, netdev_ipaddr.o(i.netdev_ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = netdev_ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[5de]"></a>netdev_ip4addr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, netdev_ipaddr.o(i.netdev_ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netdev_ip4addr_ntoa &rArr; netdev_ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
</UL>

<P><STRONG><a name="[5e5]"></a>netdev_ip4addr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, netdev_ipaddr.o(i.netdev_ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netdev_ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
</UL>

<P><STRONG><a name="[5e1]"></a>netdev_low_level_set_dhcp_status</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_dhcp_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netdev_low_level_set_dhcp_status
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_flags_sync
</UL>

<P><STRONG><a name="[47a]"></a>netdev_low_level_set_dns_server</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, netdev.o(i.netdev_low_level_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netdev_low_level_set_dns_server
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>

<P><STRONG><a name="[5e6]"></a>netdev_low_level_set_gw</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = netdev_low_level_set_gw &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_gw
</UL>

<P><STRONG><a name="[3f3]"></a>netdev_low_level_set_internet_status</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_internet_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netdev_low_level_set_internet_status
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
</UL>

<P><STRONG><a name="[5e8]"></a>netdev_low_level_set_ipaddr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = netdev_low_level_set_ipaddr &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
</UL>

<P><STRONG><a name="[5e9]"></a>netdev_low_level_set_link_status</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = netdev_low_level_set_link_status &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
</UL>

<P><STRONG><a name="[5ea]"></a>netdev_low_level_set_netmask</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = netdev_low_level_set_netmask &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_netmask
</UL>

<P><STRONG><a name="[5eb]"></a>netdev_low_level_set_status</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = netdev_low_level_set_status &rArr; netdev_auto_change_default &rArr; netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[1fc]"></a>netdev_netstat</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, netdev.o(i.netdev_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = netdev_netstat &rArr; netdev_cmd_netstat &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[1fa]"></a>netdev_ping</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, netdev.o(i.netdev_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = netdev_ping &rArr; netdev_cmd_ping &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[5d7]"></a>netdev_register</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, netdev.o(i.netdev_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netdev_register &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
</UL>

<P><STRONG><a name="[5da]"></a>netdev_set_default</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, netdev.o(i.netdev_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netdev_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>

<P><STRONG><a name="[5ed]"></a>netdev_set_dns_server</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netdev_set_dns_server
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[5ef]"></a>netdev_set_gw</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netdev_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[5ee]"></a>netdev_set_ipaddr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netdev_set_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[5f0]"></a>netdev_set_netmask</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netdev_set_netmask
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[5f1]"></a>netif_add</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_add
</UL>

<P><STRONG><a name="[580]"></a>netif_find</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, netif.o(i.netif_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = netif_find &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[60d]"></a>netif_get_by_index</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, netif.o(i.netif_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[54a]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[56c]"></a>netif_set_addr</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_netmask
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_addr_info
</UL>

<P><STRONG><a name="[48b]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_default
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[570]"></a>netif_set_down</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_down
</UL>

<P><STRONG><a name="[56f]"></a>netif_set_gw</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = netif_set_gw &rArr; netif_do_set_gw &rArr; netdev_low_level_set_gw &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_gw
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_addr_info
</UL>

<P><STRONG><a name="[56d]"></a>netif_set_ipaddr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = netif_set_ipaddr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_addr_info
</UL>

<P><STRONG><a name="[10d]"></a>netif_set_link_down</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netif.o(i.netif_set_link_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = netif_set_link_down &rArr; netdev_low_level_set_link_status &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_rx_thread_entry)
</UL>
<P><STRONG><a name="[10c]"></a>netif_set_link_up</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, netif.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = netif_set_link_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_rx_thread_entry)
</UL>
<P><STRONG><a name="[56e]"></a>netif_set_netmask</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = netif_set_netmask &rArr; netif_do_set_netmask &rArr; netdev_low_level_set_netmask &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_netmask
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_addr_info
</UL>

<P><STRONG><a name="[48c]"></a>netif_set_up</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_up
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[486]"></a>netifapi_netif_add</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, netifapi.o(i.netifapi_netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[48f]"></a>netifapi_netif_common</STRONG> (Thumb, 32 bytes, Stack size 56 bytes, netifapi.o(i.netifapi_netif_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[3b5]"></a>open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dfs_posix.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readwrite
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[3eb]"></a>opendir</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, dfs_posix.o(i.opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[4a5]"></a>pbuf_add_header</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[473]"></a>pbuf_alloc</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init_alloced_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_rx
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[5fc]"></a>pbuf_alloc_reference</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_alloc_reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init_alloced_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[5ff]"></a>pbuf_cat</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = pbuf_cat &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[600]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[6cb]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
</UL>

<P><STRONG><a name="[4a0]"></a>pbuf_clone</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = pbuf_clone &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
</UL>

<P><STRONG><a name="[4e5]"></a>pbuf_copy</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = pbuf_copy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
</UL>

<P><STRONG><a name="[358]"></a>pbuf_copy_partial</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = pbuf_copy_partial &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ENET_SendFrame
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[471]"></a>pbuf_free</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_rx
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_header
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_free_elements
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[574]"></a>pbuf_free_header</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = pbuf_free_header &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
</UL>

<P><STRONG><a name="[520]"></a>pbuf_header_force</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[475]"></a>pbuf_put_at</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_put_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_put_at &rArr; pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[51b]"></a>pbuf_realloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[4a1]"></a>pbuf_ref</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = pbuf_ref &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
</UL>

<P><STRONG><a name="[4a4]"></a>pbuf_remove_header</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_remove_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = pbuf_remove_header &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_header
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>

<P><STRONG><a name="[605]"></a>pbuf_skip</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
</UL>

<P><STRONG><a name="[474]"></a>pbuf_take</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = pbuf_take &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[476]"></a>pbuf_take_at</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_take_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[468]"></a>pbuf_try_get_at</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_try_get_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
</UL>

<P><STRONG><a name="[551]"></a>raw_bind</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, raw.o(i.raw_bind))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[583]"></a>raw_bind_netif</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, raw.o(i.raw_bind_netif))
<BR><BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[55a]"></a>raw_connect</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, raw.o(i.raw_connect))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[51d]"></a>raw_input</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = raw_input &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input_local_match
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[5f5]"></a>raw_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, raw.o(i.raw_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>

<P><STRONG><a name="[60c]"></a>raw_new</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = raw_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
</UL>

<P><STRONG><a name="[608]"></a>raw_new_ip_type</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = raw_new_ip_type &rArr; raw_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[609]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[55d]"></a>raw_remove</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, raw.o(i.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = raw_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[563]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; raw_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[564]"></a>raw_sendto</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = raw_sendto &rArr; raw_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[60e]"></a>raw_sendto_if_src</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, raw.o(i.raw_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = raw_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[404]"></a>read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = read &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readwrite
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
</UL>

<P><STRONG><a name="[457]"></a>readdir</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dfs_posix.o(i.readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = readdir &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[1d3]"></a>readwrite</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, main.o(i.readwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = readwrite &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(FSymTab)
</UL>
<P><STRONG><a name="[60f]"></a>recv</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, net_sockets.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
</UL>

<P><STRONG><a name="[401]"></a>rename</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(i.rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rename &rArr; dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[5c6]"></a>rewinddir</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dfs_posix.o(i.rewinddir))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rewinddir &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[610]"></a>rt_application_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[482]"></a>rt_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, kservice.o(i.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_create_blkdev
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>

<P><STRONG><a name="[1d6]"></a>rt_client</STRONG> (Thumb, 504 bytes, Stack size 1168 bytes, rt_client.o(i.rt_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 1700 + Unknown Stack Size
<LI>Call Chain = rt_client &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_client.o(FSymTab)
</UL>
<P><STRONG><a name="[386]"></a>rt_completion_done</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, completion.o(i.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imxrt_usb_host_send_callback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
</UL>

<P><STRONG><a name="[36e]"></a>rt_completion_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, completion.o(i.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_completion_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_pipe_xfer
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_pipe_xfer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>

<P><STRONG><a name="[365]"></a>rt_completion_wait</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, completion.o(i.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_pipe_xfer
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_pipe_xfer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>

<P><STRONG><a name="[62d]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[591]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[3b7]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(i.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[614]"></a>rt_console_set_device</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(i.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[615]"></a>rt_data_queue_deinit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dataqueue.o(i.rt_data_queue_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_data_queue_deinit &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
</UL>

<P><STRONG><a name="[617]"></a>rt_data_queue_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[619]"></a>rt_data_queue_len</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dataqueue.o(i.rt_data_queue_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_data_queue_len
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[61a]"></a>rt_data_queue_peek</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_data_queue_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[61b]"></a>rt_data_queue_pop</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, dataqueue.o(i.rt_data_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[3af]"></a>rt_data_queue_push</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, dataqueue.o(i.rt_data_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[616]"></a>rt_data_queue_reset</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, dataqueue.o(i.rt_data_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_data_queue_reset &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
</UL>

<P><STRONG><a name="[3e0]"></a>rt_device_close</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, device.o(i.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_test
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
</UL>

<P><STRONG><a name="[3a5]"></a>rt_device_control</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, device.o(i.rt_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_canstat
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cantimeout
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_clock_time_system_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[2f0]"></a>rt_device_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, device.o(i.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sample
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_test
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_test
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_canstat
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_clock_time_system_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_stat
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</UL>

<P><STRONG><a name="[48a]"></a>rt_device_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, device.o(i.rt_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[2f2]"></a>rt_device_open</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, device.o(i.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_device_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sample
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_test
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_test
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
</UL>

<P><STRONG><a name="[624]"></a>rt_device_pin_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pin.o(i.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[2f4]"></a>rt_device_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, device.o(i.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_test
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_test
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
</UL>

<P><STRONG><a name="[483]"></a>rt_device_register</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, device.o(i.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_create_blkdev
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_phy_register
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_usbh_register
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[3e1]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(i.rt_device_set_rx_indicate))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[626]"></a>rt_device_unregister</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, device.o(i.rt_device_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_device_unregister &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>

<P><STRONG><a name="[2f3]"></a>rt_device_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sample
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_test
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_test
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
</UL>

<P><STRONG><a name="[2d7]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
</UL>

<P><STRONG><a name="[2d9]"></a>rt_event_create</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ipc.o(i.rt_event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventCreate
</UL>

<P><STRONG><a name="[2db]"></a>rt_event_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(i.rt_event_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_event_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventDestroy
</UL>

<P><STRONG><a name="[2e0]"></a>rt_event_recv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, ipc.o(i.rt_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
</UL>

<P><STRONG><a name="[2dd]"></a>rt_event_send</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ipc.o(i.rt_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventSet
</UL>

<P><STRONG><a name="[2e2]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
</UL>

<P><STRONG><a name="[2e7]"></a>rt_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, kservice.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_free
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_compare_ext_csds
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_free_host
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_free_cis
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_align
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemoryFree
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_disable
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_free_pipe
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_disable
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
</UL>

<P><STRONG><a name="[397]"></a>rt_free_align</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kservice.o(i.rt_free_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_free_align &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_request
</UL>

<P><STRONG><a name="[62b]"></a>rt_hw_board_init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = rt_hw_board_init &rArr; BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_uart_pins_init
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_sdio_pins_init
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_enet_pins_init
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_can1_pins_init
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1bb]"></a>rt_hw_can_init</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, drv_can.o(i.rt_hw_can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_hw_can_init &rArr; rt_hw_can_register &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[4cd]"></a>rt_hw_can_isr</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, can.o(i.rt_hw_can_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexcan_callback
</UL>

<P><STRONG><a name="[62e]"></a>rt_hw_can_register</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, can.o(i.rt_hw_can_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_hw_can_register &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_init
</UL>

<P><STRONG><a name="[638]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[21c]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[64a]"></a>rt_hw_mdio_register</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_mdio.o(i.rt_hw_mdio_register))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_phy_init
</UL>

<P><STRONG><a name="[632]"></a>rt_hw_phy_register</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, phy.o(i.rt_hw_phy_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_hw_phy_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_phy_8720a_register
</UL>

<P><STRONG><a name="[1b9]"></a>rt_hw_pin_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_gpio.o(i.rt_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[633]"></a>rt_hw_serial_isr</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, serial.o(i.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[634]"></a>rt_hw_serial_register</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, serial.o(i.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
</UL>

<P><STRONG><a name="[3bc]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[1ba]"></a>rt_hw_uart_init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, drv_uart.o(i.rt_hw_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_hw_uart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_dma_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[142]"></a>rt_imxrt_eth_rx</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, drv_eth.o(i.rt_imxrt_eth_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = rt_imxrt_eth_rx &rArr; ENET_ReadFrame &rArr; ENET_UpdateReadBuffers &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReadFrame
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetRxFrameSize
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetRxErrBeforeReadFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_imxrt_eth_init)
</UL>
<P><STRONG><a name="[143]"></a>rt_imxrt_eth_tx</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drv_eth.o(i.rt_imxrt_eth_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = rt_imxrt_eth_tx &rArr; _ENET_SendFrame &rArr; _ENET_ActiveSend &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ENET_SendFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_imxrt_eth_init)
</UL>
<P><STRONG><a name="[2c4]"></a>rt_interrupt_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG2_IRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART6_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Combined_0_15_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Combined_16_31_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Combined_0_15_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_16_31_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[636]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>

<P><STRONG><a name="[2c6]"></a>rt_interrupt_leave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG2_IRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART6_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Combined_0_15_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Combined_16_31_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Combined_0_15_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_16_31_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[2f1]"></a>rt_kprintf</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_test
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sample
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readwrite
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_test
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_test
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_canstat
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_usbh_register
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_usbh_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_usbh_init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imxrt_mci_init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_rx
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_rx_callback
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostAttachDevice
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_umount
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwd
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sockopt_to_ipopt
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_overflow_check_raw
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_err_to_msg
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_read
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_interface_descriptor
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ping
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_netstat
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
</UL>

<P><STRONG><a name="[2e4]"></a>rt_malloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, kservice.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_alloc
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc_align
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imxrt_mci_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemoryAllocate
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_alloc_pipe
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[396]"></a>rt_malloc_align</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, kservice.o(i.rt_malloc_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_malloc_align &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_request
</UL>

<P><STRONG><a name="[639]"></a>rt_mb_create</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[63a]"></a>rt_mb_delete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ipc.o(i.rt_mb_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[491]"></a>rt_mb_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_mb_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</UL>

<P><STRONG><a name="[48e]"></a>rt_mb_recv</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, ipc.o(i.rt_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_wait_cd_changed
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[488]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_change
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>

<P><STRONG><a name="[63b]"></a>rt_mb_send_wait</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, ipc.o(i.rt_mb_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[360]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_create_blkdev
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_control
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_pipe_xfer
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_pipe_xfer
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_request
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_control
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_control
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_realloc
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_alloc_pipe
</UL>

<P><STRONG><a name="[390]"></a>rt_memheap_alloc</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, memheap.o(i.rt_memheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_alloc
</UL>

<P><STRONG><a name="[393]"></a>rt_memheap_free</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, memheap.o(i.rt_memheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_free
</UL>

<P><STRONG><a name="[63c]"></a>rt_memheap_info</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, memheap.o(i.rt_memheap_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_memheap_info &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[63d]"></a>rt_memheap_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, memheap.o(i.rt_memheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[395]"></a>rt_memheap_realloc</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, memheap.o(i.rt_memheap_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_remove_next_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_realloc
</UL>

<P><STRONG><a name="[3fb]"></a>rt_memory_info</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, kservice.o(i.rt_memory_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_memory_info &rArr; rt_memheap_info &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_info
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>

<P><STRONG><a name="[2e5]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_set_bus_width
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_card_addr
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_usbh_register
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imxrt_mci_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemoryAllocate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_overflow_init_raw
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pthread_key_system_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_alloc_pipe
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>

<P><STRONG><a name="[513]"></a>rt_mmcsd_blk_probe</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, block_dev.o(i.rt_mmcsd_blk_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_mmcsd_blk_probe &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_create_blkdev
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[515]"></a>rt_mmcsd_blk_remove</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, block_dev.o(i.rt_mmcsd_blk_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_mmcsd_blk_remove &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[1bf]"></a>rt_mmcsd_core_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mmcsd_core.o(i.rt_mmcsd_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rt_mmcsd_core_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdio_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmcsd_core.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[644]"></a>rt_mq_create</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ipc.o(i.rt_mq_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
</UL>

<P><STRONG><a name="[645]"></a>rt_mq_recv</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, ipc.o(i.rt_mq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_mq_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_thread_entry
</UL>

<P><STRONG><a name="[646]"></a>rt_mq_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(i.rt_mq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_event_signal
</UL>

<P><STRONG><a name="[647]"></a>rt_mq_send_wait</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, ipc.o(i.rt_mq_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>

<P><STRONG><a name="[2e9]"></a>rt_mutex_create</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexCreate
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
</UL>

<P><STRONG><a name="[2eb]"></a>rt_mutex_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(i.rt_mutex_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexDestroy
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[5ad]"></a>rt_mutex_detach</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(i.rt_mutex_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_mutex_detach &rArr; _ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_free_host
</UL>

<P><STRONG><a name="[442]"></a>rt_mutex_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
</UL>

<P><STRONG><a name="[2ef]"></a>rt_mutex_release</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ipc.o(i.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
</UL>

<P><STRONG><a name="[2ed]"></a>rt_mutex_take</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ipc.o(i.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
</UL>

<P><STRONG><a name="[62a]"></a>rt_object_allocate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
</UL>

<P><STRONG><a name="[622]"></a>rt_object_delete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
</UL>

<P><STRONG><a name="[621]"></a>rt_object_detach</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[623]"></a>rt_object_find</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, object.o(i.rt_object_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
</UL>

<P><STRONG><a name="[391]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_alloc
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
</UL>

<P><STRONG><a name="[625]"></a>rt_object_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
</UL>

<P><STRONG><a name="[620]"></a>rt_object_is_systemobject</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[58d]"></a>rt_pin_mode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pin.o(i.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_phy_init
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[58f]"></a>rt_pin_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pin.o(i.rt_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[58e]"></a>rt_pin_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pin.o(i.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_phy_init
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[4ba]"></a>rt_realloc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, kservice.o(i.rt_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memheap_realloc
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
</UL>

<P><STRONG><a name="[36b]"></a>rt_schedule</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>

<P><STRONG><a name="[3bf]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[3b9]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[642]"></a>rt_sdio_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdio.o(i.rt_sdio_init))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
</UL>

<P><STRONG><a name="[643]"></a>rt_sem_create</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_create_blkdev
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[641]"></a>rt_sem_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(i.rt_sem_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>

<P><STRONG><a name="[58a]"></a>rt_sem_detach</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(i.rt_sem_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_sem_detach &rArr; _ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_free_host
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[3e2]"></a>rt_sem_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sample
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_imxrt_eth_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_sem_system_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_mq_system_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[364]"></a>rt_sem_release</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_call
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_req_complete
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_tx_callback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_info
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[363]"></a>rt_sem_take</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_tx
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_info
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[3c9]"></a>rt_sem_trytake</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(i.rt_sem_trytake))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_sem_trytake &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
</UL>

<P><STRONG><a name="[3ab]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_read
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_info
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[64d]"></a>rt_show_version</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[3f2]"></a>rt_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, kservice.o(i.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_create_blkdev
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_overflow_check_raw
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
</UL>

<P><STRONG><a name="[458]"></a>rt_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, kservice.o(i.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[43b]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(i.rt_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[737]"></a>strdup</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, kservice.o(i.rt_strdup), UNUSED)

<P><STRONG><a name="[62c]"></a>rt_system_heap_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, kservice.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_system_heap_init &rArr; rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[690]"></a>rt_system_scheduler_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[64f]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_system_scheduler_start &rArr; rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[651]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[691]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[35a]"></a>rt_thread_control</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, thread.o(i.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>

<P><STRONG><a name="[36f]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sample
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_usbh_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_usbh_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_imxrt_eth_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
</UL>

<P><STRONG><a name="[61f]"></a>rt_thread_defunct_dequeue</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, idle.o(i.rt_thread_defunct_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_thread_defunct_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[3ba]"></a>rt_thread_defunct_enqueue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, idle.o(i.rt_thread_defunct_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[3a3]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_debounce
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>

<P><STRONG><a name="[653]"></a>rt_thread_delete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[652]"></a>rt_thread_detach</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, thread.o(i.rt_thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_detach &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[484]"></a>rt_thread_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, thread.o(i.rt_thread_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_thread_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[655]"></a>rt_thread_idle_init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[492]"></a>rt_thread_init</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</UL>

<P><STRONG><a name="[2f5]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_test
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_test
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_phy_init
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[36a]"></a>rt_thread_resume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>

<P><STRONG><a name="[2d6]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
</UL>

<P><STRONG><a name="[654]"></a>rt_thread_sleep</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[370]"></a>rt_thread_startup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_sample
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_usbh_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_usbh_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_imxrt_eth_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
</UL>

<P><STRONG><a name="[38b]"></a>rt_thread_suspend</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>

<P><STRONG><a name="[2df]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EventWait
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>

<P><STRONG><a name="[3a6]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_clock_time_system_init
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get_millisecond
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>

<P><STRONG><a name="[656]"></a>rt_tick_get_millisecond</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, clock.o(i.rt_tick_get_millisecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>

<P><STRONG><a name="[2f8]"></a>rt_tick_increase</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[657]"></a>rt_timer_check</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[3c6]"></a>rt_timer_control</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_control
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>

<P><STRONG><a name="[367]"></a>rt_timer_detach</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[3bd]"></a>rt_timer_init</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[3c7]"></a>rt_timer_start</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>

<P><STRONG><a name="[3c5]"></a>rt_timer_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
</UL>

<P><STRONG><a name="[65b]"></a>rt_udisk_run</STRONG> (Thumb, 874 bytes, Stack size 176 bytes, udisk.o(i.rt_udisk_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = rt_udisk_run &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udisk_get_id
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_clear_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
</UL>

<P><STRONG><a name="[663]"></a>rt_udisk_stop</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, udisk.o(i.rt_udisk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_udisk_stop &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udisk_free_id
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_disable
</UL>

<P><STRONG><a name="[3a4]"></a>rt_usb_hcd_pipe_xfer</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, usbhost_core.o(i.rt_usb_hcd_pipe_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_configure
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_address
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_descriptor
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_descriptor
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_irq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[503]"></a>rt_usb_host_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbhost.o(i.rt_usb_host_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_usb_host_init &rArr; rt_usbh_hub_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_storage
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_register
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_init
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_init
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_hub
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_usbh_register
</UL>

<P><STRONG><a name="[1bc]"></a>rt_usbd_class_list_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbdevice.o(i.rt_usbd_class_list_init))
<BR>[Address Reference Count : 1]<UL><LI> usbdevice.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[66e]"></a>rt_usbh_alloc_instance</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbhost_core.o(i.rt_usbh_alloc_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_usbh_alloc_instance &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[66f]"></a>rt_usbh_attatch_instance</STRONG> (Thumb, 602 bytes, Stack size 2104 bytes, usbhost_core.o(i.rt_usbh_attatch_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 2476<LI>Call Chain = rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_enable
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_configure
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_address
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_interface_descriptor
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_descriptor
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_free_pipe
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_alloc_pipe
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[67b]"></a>rt_usbh_class_driver_disable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, driver.o(i.rt_usbh_class_driver_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_usbh_class_driver_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
</UL>

<P><STRONG><a name="[678]"></a>rt_usbh_class_driver_enable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, driver.o(i.rt_usbh_class_driver_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_usbh_class_driver_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[677]"></a>rt_usbh_class_driver_find</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, driver.o(i.rt_usbh_class_driver_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_usbh_class_driver_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_register
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[66d]"></a>rt_usbh_class_driver_hub</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hub.o(i.rt_usbh_class_driver_hub))
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[66a]"></a>rt_usbh_class_driver_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, driver.o(i.rt_usbh_class_driver_init))
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[66c]"></a>rt_usbh_class_driver_register</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, driver.o(i.rt_usbh_class_driver_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_usbh_class_driver_register &rArr; rt_usbh_class_driver_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_find
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[66b]"></a>rt_usbh_class_driver_storage</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mass.o(i.rt_usbh_class_driver_storage))
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[3a2]"></a>rt_usbh_clear_feature</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, usbhost_core.o(i.rt_usbh_clear_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_usbh_clear_feature &rArr; rt_usb_hcd_setup_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[67a]"></a>rt_usbh_detach_instance</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, usbhost_core.o(i.rt_usbh_detach_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_usbh_detach_instance &rArr; rt_usb_hcd_free_pipe &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_class_driver_disable
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_free_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_disable
</UL>

<P><STRONG><a name="[67c]"></a>rt_usbh_event_signal</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hub.o(i.rt_usbh_event_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_disconnect_handler
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_connect_handler
</UL>

<P><STRONG><a name="[670]"></a>rt_usbh_get_descriptor</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, usbhost_core.o(i.rt_usbh_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_usbh_get_descriptor &rArr; rt_usb_hcd_pipe_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[676]"></a>rt_usbh_get_endpoint_descriptor</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, usbhost_core.o(i.rt_usbh_get_endpoint_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_usbh_get_endpoint_descriptor &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[675]"></a>rt_usbh_get_interface_descriptor</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, usbhost_core.o(i.rt_usbh_get_interface_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_usbh_get_interface_descriptor &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[672]"></a>rt_usbh_hub_clear_port_feature</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hub.o(i.rt_usbh_hub_clear_port_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_usbh_hub_clear_port_feature &rArr; rt_usb_hcd_setup_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;root_hub_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[67f]"></a>rt_usbh_hub_get_descriptor</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, hub.o(i.rt_usbh_hub_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_usbh_hub_get_descriptor &rArr; rt_usb_hcd_pipe_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[681]"></a>rt_usbh_hub_get_port_status</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, hub.o(i.rt_usbh_hub_get_port_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_usbh_hub_get_port_status &rArr; rt_usb_hcd_pipe_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;root_hub_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_debounce
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[669]"></a>rt_usbh_hub_init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, hub.o(i.rt_usbh_hub_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_usbh_hub_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_host_init
</UL>

<P><STRONG><a name="[683]"></a>rt_usbh_hub_port_debounce</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, hub.o(i.rt_usbh_hub_port_debounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_usbh_hub_port_debounce &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[671]"></a>rt_usbh_hub_reset_port</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, hub.o(i.rt_usbh_hub_reset_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_usbh_hub_reset_port &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>

<P><STRONG><a name="[680]"></a>rt_usbh_hub_set_port_feature</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hub.o(i.rt_usbh_hub_set_port_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_usbh_hub_set_port_feature &rArr; rt_usb_hcd_setup_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;root_hub_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_enable
</UL>

<P><STRONG><a name="[684]"></a>rt_usbh_root_hub_connect_handler</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, hub.o(i.rt_usbh_root_hub_connect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_usbh_root_hub_connect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb1_host_callback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb0_host_callback
</UL>

<P><STRONG><a name="[685]"></a>rt_usbh_root_hub_disconnect_handler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hub.o(i.rt_usbh_root_hub_disconnect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_usbh_root_hub_disconnect_handler &rArr; rt_usbh_event_signal &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_event_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb1_host_callback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb0_host_callback
</UL>

<P><STRONG><a name="[673]"></a>rt_usbh_set_address</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbhost_core.o(i.rt_usbh_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_usbh_set_address &rArr; rt_usb_hcd_pipe_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[674]"></a>rt_usbh_set_configure</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, usbhost_core.o(i.rt_usbh_set_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_usbh_set_configure &rArr; rt_usb_hcd_pipe_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[661]"></a>rt_usbh_storage_get_capacity</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, mass.o(i.rt_usbh_storage_get_capacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_usbh_storage_get_capacity &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[65d]"></a>rt_usbh_storage_get_max_lun</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, mass.o(i.rt_usbh_storage_get_max_lun))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_usbh_storage_get_max_lun &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[65e]"></a>rt_usbh_storage_inquiry</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, mass.o(i.rt_usbh_storage_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_usbh_storage_inquiry &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[65a]"></a>rt_usbh_storage_read10</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, mass.o(i.rt_usbh_storage_read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_usbh_storage_read10 &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_read
</UL>

<P><STRONG><a name="[65f]"></a>rt_usbh_storage_request_sense</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, mass.o(i.rt_usbh_storage_request_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_usbh_storage_request_sense &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[65c]"></a>rt_usbh_storage_reset</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mass.o(i.rt_usbh_storage_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_usbh_storage_reset &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_setup_xfer
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[660]"></a>rt_usbh_storage_test_unit_ready</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, mass.o(i.rt_usbh_storage_test_unit_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_usbh_storage_test_unit_ready &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[665]"></a>rt_usbh_storage_write10</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, mass.o(i.rt_usbh_storage_write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_usbh_storage_write10 &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_write
</UL>

<P><STRONG><a name="[637]"></a>rt_vsnprintf</STRONG> (Thumb, 824 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>

<P><STRONG><a name="[64e]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kservice.o(i.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[68a]"></a>rt_work_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, workqueue.o(i.rt_work_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_work_init
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>

<P><STRONG><a name="[68c]"></a>rt_work_submit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, workqueue.o(i.rt_work_submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>

<P><STRONG><a name="[68e]"></a>rt_workqueue_create</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, workqueue.o(i.rt_workqueue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_workqueue_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_sys_workqueue_init
</UL>

<P><STRONG><a name="[68d]"></a>rt_workqueue_submit_work</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, workqueue.o(i.rt_workqueue_submit_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_workqueue_submit_work &rArr; _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
</UL>

<P><STRONG><a name="[68f]"></a>rt_wqueue_remove</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, waitqueue.o(i.rt_wqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_wqueue_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
</UL>

<P><STRONG><a name="[4a9]"></a>rt_wqueue_wakeup</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, waitqueue.o(i.rt_wqueue_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_wqueue_wakeup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[267]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = rtthread_startup &rArr; rt_hw_board_init &rArr; BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e7]"></a>sal_check_netdev_internet_up</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sal_socket.o(i.sal_check_netdev_internet_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
</UL>

<P><STRONG><a name="[3f8]"></a>sal_closesocket</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sal_socket.o(i.sal_closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_close
</UL>

<P><STRONG><a name="[409]"></a>sal_connect</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sal_socket.o(i.sal_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sal_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[50c]"></a>sal_get_socket</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sal_socket.o(i.sal_get_socket))
<BR><BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_poll
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_poll
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_connect
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
</UL>

<P><STRONG><a name="[4da]"></a>sal_gethostbyname</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sal_socket.o(i.sal_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sal_gethostbyname &rArr; netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>

<P><STRONG><a name="[1cb]"></a>sal_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sal_socket.o(i.sal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = sal_init &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_socket.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[443]"></a>sal_ioctlsocket</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sal_socket.o(i.sal_ioctlsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sal_ioctlsocket
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_ioctl
</UL>

<P><STRONG><a name="[5d6]"></a>sal_lwip_netdev_set_pf_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, af_inet_lwip.o(i.sal_lwip_netdev_set_pf_info))
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
</UL>

<P><STRONG><a name="[444]"></a>sal_poll</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sal_socket.o(i.sal_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sal_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_poll
</UL>

<P><STRONG><a name="[445]"></a>sal_recvfrom</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, sal_socket.o(i.sal_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sal_recvfrom
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_read
</UL>

<P><STRONG><a name="[446]"></a>sal_sendto</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, sal_socket.o(i.sal_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sal_sendto
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_write
</UL>

<P><STRONG><a name="[694]"></a>sal_socket</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, sal_socket.o(i.sal_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[1cc]"></a>sd_mount</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sdcard_port.o(i.sd_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = sd_mount &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_wait_cd_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdcard_port.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[698]"></a>sdio_free_cis</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sdio.o(i.sdio_free_cis))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = sdio_free_cis &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[6a0]"></a>sdio_io_readb</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, sdio.o(i.sdio_io_readb))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_highspeed
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_fbr
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
</UL>

<P><STRONG><a name="[6a1]"></a>sdio_io_rw_direct</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, sdio.o(i.sdio_io_rw_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>

<P><STRONG><a name="[5aa]"></a>sdio_io_send_op_cond</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, sdio.o(i.sdio_io_send_op_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sdio_io_send_op_cond &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[6a2]"></a>sdio_io_writeb</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sdio.o(i.sdio_io_writeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sdio_io_writeb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_highspeed
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
</UL>

<P><STRONG><a name="[613]"></a>send</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, net_sockets.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = send &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
</UL>

<P><STRONG><a name="[41f]"></a>set_date</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, rtc.o(i.set_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = set_date &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>

<P><STRONG><a name="[41e]"></a>set_time</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, rtc.o(i.set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = set_time &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>

<P><STRONG><a name="[612]"></a>socket</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, net_sockets.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_get_fops
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_client
</UL>

<P><STRONG><a name="[402]"></a>stat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(i.stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
</UL>

<P><STRONG><a name="[3cd]"></a>sys_arch_assert</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sockopt_to_ipopt
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto_if_src
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_overflow_check_raw
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_err_to_msg
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[5cb]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[5ca]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[3d9]"></a>sys_arch_protect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_arch_protect
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[555]"></a>sys_arch_sem_wait</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[3da]"></a>sys_arch_unprotect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_unprotect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_arch_unprotect
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[6ac]"></a>sys_check_timeouts</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, timeouts.o(i.sys_check_timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[547]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[3d5]"></a>sys_mbox_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = sys_mbox_free &rArr; rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[560]"></a>sys_mbox_new</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[3d6]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[3cc]"></a>sys_mbox_trypost</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[3ca]"></a>sys_mbox_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[537]"></a>sys_mutex_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[6ad]"></a>sys_mutex_new</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sys_arch.o(i.sys_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sys_mutex_new &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[538]"></a>sys_mutex_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[53f]"></a>sys_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_arch.o(i.sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sys_now &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_cyclic_timer
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[5d0]"></a>sys_sem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[5cc]"></a>sys_sem_new</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[5d1]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[47f]"></a>sys_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_check_waiters
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
</UL>

<P><STRONG><a name="[47e]"></a>sys_sem_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_valid))
<BR><BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
</UL>

<P><STRONG><a name="[6ae]"></a>sys_thread_new</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[6af]"></a>sys_timeout</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, timeouts.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[54f]"></a>sys_timeouts_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timeouts.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6b0]"></a>sys_timeouts_sleeptime</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timeouts.o(i.sys_timeouts_sleeptime))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sys_timeouts_sleeptime &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[6b3]"></a>tcp_abandon</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
</UL>

<P><STRONG><a name="[559]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[556]"></a>tcp_accept</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[6b8]"></a>tcp_alloc</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handle_closepend
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
</UL>

<P><STRONG><a name="[3d0]"></a>tcp_arg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[552]"></a>tcp_bind</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[581]"></a>tcp_bind_netif</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(i.tcp_bind_netif))
<BR><BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[557]"></a>tcp_close</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[55c]"></a>tcp_connect</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[52f]"></a>tcp_debug_state_str</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(i.tcp_debug_state_str))
<BR><BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>

<P><STRONG><a name="[6c7]"></a>tcp_eff_send_mss_netif</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = tcp_eff_send_mss_netif &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[6c8]"></a>tcp_enqueue_flags</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[3d4]"></a>tcp_err</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_err &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[6cc]"></a>tcp_fasttmr</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[6b5]"></a>tcp_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tcp.o(i.tcp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = tcp_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
</UL>

<P><STRONG><a name="[602]"></a>tcp_free_ooseq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcp.o(i.tcp_free_ooseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = tcp_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>

<P><STRONG><a name="[54c]"></a>tcp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcp.o(i.tcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[51f]"></a>tcp_input</STRONG> (Thumb, 1984 bytes, Stack size 56 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[6d4]"></a>tcp_keepalive</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = tcp_keepalive &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[55f]"></a>tcp_listen_with_backlog_and_err</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, tcp.o(i.tcp_listen_with_backlog_and_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[5f3]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp.o(i.tcp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>

<P><STRONG><a name="[60a]"></a>tcp_new_ip_type</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tcp.o(i.tcp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[6c6]"></a>tcp_next_iss</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = tcp_next_iss &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[568]"></a>tcp_output</STRONG> (Thumb, 688 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[6c0]"></a>tcp_pcb_purge</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_pcb_purge &rArr; tcp_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_ooseq
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[6b4]"></a>tcp_pcb_remove</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[3d3]"></a>tcp_poll</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_poll &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[6cd]"></a>tcp_process_refused_data</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[3d1]"></a>tcp_recv</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_recv &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[162]"></a>tcp_recv_null</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[562]"></a>tcp_recved</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
</UL>

<P><STRONG><a name="[6e4]"></a>tcp_rexmit</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = tcp_rexmit &rArr; tcp_output_segment_busy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[6e5]"></a>tcp_rexmit_fast</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; tcp_output_segment_busy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[6e2]"></a>tcp_rexmit_rto</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[6e9]"></a>tcp_rexmit_rto_commit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_rto_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[6e8]"></a>tcp_rexmit_rto_prepare</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = tcp_rexmit_rto_prepare &rArr; tcp_output_segment_busy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[6b7]"></a>tcp_rst</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = tcp_rst &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[6e7]"></a>tcp_seg_copy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[6ca]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
</UL>

<P><STRONG><a name="[6b6]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_ooseq
</UL>

<P><STRONG><a name="[6d1]"></a>tcp_send_empty_ack</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[6c5]"></a>tcp_send_fin</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[3d2]"></a>tcp_sent</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[558]"></a>tcp_shutdown</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[6ea]"></a>tcp_slowtmr</STRONG> (Thumb, 1678 bytes, Stack size 56 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_ooseq
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[6ec]"></a>tcp_split_unsent_seg</STRONG> (Thumb, 518 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_split_unsent_seg))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tcp_split_unsent_seg &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[6be]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[194]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[6c1]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[6e6]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>

<P><STRONG><a name="[567]"></a>tcp_write</STRONG> (Thumb, 1838 bytes, Stack size 120 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[6eb]"></a>tcp_zero_window_probe</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = tcp_zero_window_probe &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_fill_options
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[5fa]"></a>tcpip_api_call</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_api_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = tcpip_api_call &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
</UL>

<P><STRONG><a name="[589]"></a>tcpip_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = tcpip_init &rArr; lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[6ee]"></a>tcpip_inpkt</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_inpkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = tcpip_inpkt &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[109]"></a>tcpip_input</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tcpip_input &rArr; tcpip_inpkt &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[5ce]"></a>tcpip_send_msg_wait_sem</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_send_msg_wait_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>

<P><STRONG><a name="[604]"></a>tcpip_try_callback</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_try_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcpip_try_callback &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>

<P><STRONG><a name="[41d]"></a>time</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, time.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[435]"></a>timegm</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, time.o(i.timegm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timegm
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[532]"></a>tz_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time.o(i.tz_get))
<BR><BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>

<P><STRONG><a name="[4dd]"></a>tz_is_dst</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, time.o(i.tz_is_dst))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[45e]"></a>udp_bind</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = udp_bind &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[582]"></a>udp_bind_netif</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, udp.o(i.udp_bind_netif))
<BR><BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[55b]"></a>udp_connect</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[55e]"></a>udp_disconnect</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, udp.o(i.udp_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = udp_disconnect &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
</UL>

<P><STRONG><a name="[54b]"></a>udp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, udp.o(i.udp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[51e]"></a>udp_input</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[5f4]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, udp.o(i.udp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
</UL>

<P><STRONG><a name="[6f4]"></a>udp_new</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
</UL>

<P><STRONG><a name="[45c]"></a>udp_new_ip_type</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, udp.o(i.udp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[460]"></a>udp_recv</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, udp.o(i.udp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = udp_recv &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[45f]"></a>udp_remove</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[565]"></a>udp_send</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[477]"></a>udp_sendto</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[6f5]"></a>udp_sendto_if</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[6f6]"></a>udp_sendto_if_src</STRONG> (Thumb, 476 bytes, Stack size 72 bytes, udp.o(i.udp_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[400]"></a>unlink</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(i.unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[1ee]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[3b8]"></a>write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = write &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readwrite
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
</UL>

<P><STRONG><a name="[ef]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[209]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[738]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[739]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1d4]"></a>can2_test</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, main.o(i.can2_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = can2_test &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(FSymTab)
</UL>
<P><STRONG><a name="[105]"></a>can_rx_call</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, can_test.o(i.can_rx_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = can_rx_call &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_test.o(i.can_rx_thread)
</UL>
<P><STRONG><a name="[106]"></a>can_rx_thread</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, can_test.o(i.can_rx_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = can_rx_thread &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_test.o(i.can_sample)
</UL>
<P><STRONG><a name="[4dc]"></a>__isleap</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, time.o(i.__isleap))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[1c6]"></a>_rt_clock_time_system_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, time.o(i._rt_clock_time_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _rt_clock_time_system_init &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[4d8]"></a>get_timeval</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, time.o(i.get_timeval))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[3de]"></a>num2str</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, time.o(i.num2str))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</UL>

<P><STRONG><a name="[3df]"></a>bus_fault_track</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, cpuport.o(i.bus_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[4de]"></a>hard_fault_track</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cpuport.o(i.hard_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = hard_fault_track &rArr; usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[4df]"></a>mem_manage_fault_track</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cpuport.o(i.mem_manage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[4e0]"></a>usage_fault_track</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cpuport.o(i.usage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[35b]"></a>_can_int_rx</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, can.o(i._can_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _can_int_rx &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_read
</UL>

<P><STRONG><a name="[362]"></a>_can_int_tx</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, can.o(i._can_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _can_int_tx &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_write
</UL>

<P><STRONG><a name="[366]"></a>_can_int_tx_priv</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, can.o(i._can_int_tx_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _can_int_tx_priv &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_write
</UL>

<P><STRONG><a name="[13b]"></a>cantimeout</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, can.o(i.cantimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cantimeout &rArr; rt_device_control
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[137]"></a>rt_can_close</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, can.o(i.rt_can_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_can_close &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[13a]"></a>rt_can_control</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, can.o(i.rt_can_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_can_control &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[135]"></a>rt_can_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, can.o(i.rt_can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_can_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[136]"></a>rt_can_open</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, can.o(i.rt_can_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_can_open &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[138]"></a>rt_can_read</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, can.o(i.rt_can_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_can_read &rArr; _can_int_rx &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[139]"></a>rt_can_write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, can.o(i.rt_can_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_can_write &rArr; _can_int_tx_priv &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[611]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
</UL>

<P><STRONG><a name="[361]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
</UL>

<P><STRONG><a name="[35d]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
</UL>

<P><STRONG><a name="[35e]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
</UL>

<P><STRONG><a name="[618]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[61c]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[61d]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[103]"></a>_delayed_work_timeout_handler</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, workqueue.o(i._delayed_work_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _delayed_work_timeout_handler &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(i._workqueue_submit_work)
</UL>
<P><STRONG><a name="[3c4]"></a>_workqueue_submit_work</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, workqueue.o(i._workqueue_submit_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _workqueue_submit_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
</UL>

<P><STRONG><a name="[15f]"></a>_workqueue_thread_entry</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, workqueue.o(i._workqueue_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _workqueue_thread_entry &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(i.rt_workqueue_create)
</UL>
<P><STRONG><a name="[68b]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_init
</UL>

<P><STRONG><a name="[369]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
</UL>

<P><STRONG><a name="[3c8]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
</UL>

<P><STRONG><a name="[368]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
</UL>

<P><STRONG><a name="[1be]"></a>rt_work_sys_workqueue_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, workqueue.o(i.rt_work_sys_workqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_work_sys_workqueue_init &rArr; rt_workqueue_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[134]"></a>_pin_control</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, pin.o(i._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pin_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[132]"></a>_pin_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, pin.o(i._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[133]"></a>_pin_write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, pin.o(i._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[145]"></a>phy_device_read</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, phy.o(i.phy_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = phy_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy.o(i.rt_hw_phy_register)
</UL>
<P><STRONG><a name="[146]"></a>phy_device_write</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, phy.o(i.phy_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = phy_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy.o(i.rt_hw_phy_register)
</UL>
<P><STRONG><a name="[1d9]"></a>date</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, rtc.o(i.date))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = date &rArr; set_time &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[59b]"></a>GET_BITS</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, mmc.o(i.GET_BITS))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
</UL>

<P><STRONG><a name="[599]"></a>mmc_compare_ext_csds</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, mmc.o(i.mmc_compare_ext_csds))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
</UL>

<P><STRONG><a name="[59a]"></a>mmc_get_ext_csd</STRONG> (Thumb, 156 bytes, Stack size 112 bytes, mmc.o(i.mmc_get_ext_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = mmc_get_ext_csd &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_compare_ext_csds
</UL>

<P><STRONG><a name="[5b8]"></a>mmc_parse_ext_csd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mmc.o(i.mmc_parse_ext_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mmc_parse_ext_csd
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[59d]"></a>mmc_select_bus_width</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, mmc.o(i.mmc_select_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_compare_ext_csds
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5a2]"></a>mmc_set_card_addr</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, mmc.o(i.mmc_set_card_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = mmc_set_card_addr &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[59e]"></a>mmc_switch</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, mmc.o(i.mmc_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = mmc_switch &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
</UL>

<P><STRONG><a name="[5a0]"></a>mmcsd_delay_ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mmc.o(i.mmcsd_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mmcsd_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
</UL>

<P><STRONG><a name="[511]"></a>mmcsd_mmc_init_card</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, mmc.o(i.mmcsd_mmc_init_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = mmcsd_mmc_init_card &rArr; mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_card_addr
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_parse_ext_csd
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[5b6]"></a>mmcsd_parse_csd</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, mmc.o(i.mmcsd_parse_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mmcsd_parse_csd &rArr; GET_BITS
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5bb]"></a>GET_BITS</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, sd.o(i.GET_BITS))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_scr
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
</UL>

<P><STRONG><a name="[5a4]"></a>mmcsd_app_cmd</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, sd.o(i.mmcsd_app_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
</UL>

<P><STRONG><a name="[5ba]"></a>mmcsd_parse_csd</STRONG> (Thumb, 564 bytes, Stack size 16 bytes, sd.o(i.mmcsd_parse_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mmcsd_parse_csd &rArr; GET_BITS
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[5bc]"></a>mmcsd_parse_scr</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, sd.o(i.mmcsd_parse_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mmcsd_parse_scr &rArr; GET_BITS
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[518]"></a>mmcsd_sd_init_card</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, sd.o(i.mmcsd_sd_init_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = mmcsd_sd_init_card &rArr; mmcsd_send_app_op_cond &rArr; mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_if_cond
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_set_bus_width
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_scr
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
</UL>

<P><STRONG><a name="[5bf]"></a>mmcsd_switch</STRONG> (Thumb, 290 bytes, Stack size 120 bytes, sd.o(i.mmcsd_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = mmcsd_switch &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[5c0]"></a>mmcsd_set_blksize</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, block_dev.o(i.mmcsd_set_blksize))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = mmcsd_set_blksize &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[150]"></a>rt_mmcsd_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, block_dev.o(i.rt_mmcsd_close))
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_create_blkdev)
</UL>
<P><STRONG><a name="[153]"></a>rt_mmcsd_control</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, block_dev.o(i.rt_mmcsd_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_mmcsd_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_create_blkdev)
</UL>
<P><STRONG><a name="[640]"></a>rt_mmcsd_create_blkdev</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, block_dev.o(i.rt_mmcsd_create_blkdev))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_mmcsd_create_blkdev &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[14e]"></a>rt_mmcsd_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, block_dev.o(i.rt_mmcsd_init))
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_create_blkdev)
</UL>
<P><STRONG><a name="[14f]"></a>rt_mmcsd_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, block_dev.o(i.rt_mmcsd_open))
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_create_blkdev)
</UL>
<P><STRONG><a name="[151]"></a>rt_mmcsd_read</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, block_dev.o(i.rt_mmcsd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_mmcsd_read &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_create_blkdev)
</UL>
<P><STRONG><a name="[63f]"></a>rt_mmcsd_req_blk</STRONG> (Thumb, 308 bytes, Stack size 184 bytes, block_dev.o(i.rt_mmcsd_req_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[152]"></a>rt_mmcsd_write</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, block_dev.o(i.rt_mmcsd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rt_mmcsd_write &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_create_blkdev)
</UL>
<P><STRONG><a name="[6a3]"></a>cistpl_funce_func</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sdio.o(i.cistpl_funce_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cistpl_funce_func
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>

<P><STRONG><a name="[6a4]"></a>cistpl_funce_func0</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, sdio.o(i.cistpl_funce_func0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cistpl_funce_func0
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>

<P><STRONG><a name="[6a5]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdio.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
</UL>

<P><STRONG><a name="[6a6]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdio.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
</UL>

<P><STRONG><a name="[51a]"></a>sdio_init_card</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, sdio.o(i.sdio_init_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = sdio_init_card &rArr; sdio_initialize_function &rArr; sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_free_cis
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_highspeed
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
</UL>

<P><STRONG><a name="[69d]"></a>sdio_initialize_function</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sdio.o(i.sdio_initialize_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = sdio_initialize_function &rArr; sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_free_cis
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_fbr
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[6a7]"></a>sdio_match_card</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sdio.o(i.sdio_match_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdio_match_card
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
</UL>

<P><STRONG><a name="[699]"></a>sdio_read_cccr</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, sdio.o(i.sdio_read_cccr))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = sdio_read_cccr &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[69a]"></a>sdio_read_cis</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, sdio.o(i.sdio_read_cis))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_func0
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_func
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[69f]"></a>sdio_read_fbr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sdio.o(i.sdio_read_fbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = sdio_read_fbr &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
</UL>

<P><STRONG><a name="[69e]"></a>sdio_register_card</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sdio.o(i.sdio_register_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = sdio_register_card &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_card
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[69c]"></a>sdio_set_bus_wide</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sdio.o(i.sdio_set_bus_wide))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = sdio_set_bus_wide &rArr; sdio_io_writeb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[69b]"></a>sdio_set_highspeed</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdio.o(i.sdio_set_highspeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = sdio_set_highspeed &rArr; sdio_io_writeb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[5be]"></a>__rt_fls</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, mmcsd_core.o(i.__rt_fls))
<BR><BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
</UL>

<P><STRONG><a name="[39c]"></a>_mmcsd_select_card</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, mmcsd_core.o(i._mmcsd_select_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _mmcsd_select_card &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
</UL>

<P><STRONG><a name="[5a7]"></a>mmcsd_delay_ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mmcsd_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
</UL>

<P><STRONG><a name="[5ab]"></a>mmcsd_power_off</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mmcsd_power_off &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[5a8]"></a>mmcsd_power_up</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_power_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mmcsd_power_up &rArr; mmcsd_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[5bd]"></a>mmcsd_set_iocfg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_iocfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_chip_select
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_off
</UL>

<P><STRONG><a name="[629]"></a>_serial_check_buffer_size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial.o(i._serial_check_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
</UL>

<P><STRONG><a name="[3aa]"></a>_serial_dma_rx</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, serial.o(i._serial_dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _serial_dma_rx &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[3ae]"></a>_serial_dma_tx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, serial.o(i._serial_dma_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[627]"></a>_serial_fifo_calc_recved_len</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, serial.o(i._serial_fifo_calc_recved_len))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>

<P><STRONG><a name="[3b0]"></a>_serial_int_rx</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, serial.o(i._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _serial_int_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[3b1]"></a>_serial_int_tx</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, serial.o(i._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[3ac]"></a>rt_dma_calc_recved_len</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serial.o(i.rt_dma_calc_recved_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_dma_calc_recved_len
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[3ad]"></a>rt_dma_recv_update_get_index</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, serial.o(i.rt_dma_recv_update_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_dma_recv_update_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[628]"></a>rt_dma_recv_update_put_index</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, serial.o(i.rt_dma_recv_update_put_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_dma_recv_update_put_index
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[149]"></a>rt_serial_close</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, serial.o(i.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_serial_close &rArr; rt_data_queue_deinit &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[14c]"></a>rt_serial_control</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, serial.o(i.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_serial_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[147]"></a>rt_serial_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, serial.o(i.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_serial_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[148]"></a>rt_serial_open</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, serial.o(i.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[14a]"></a>rt_serial_read</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, serial.o(i.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_serial_read &rArr; _serial_dma_rx &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[14b]"></a>rt_serial_write</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, serial.o(i.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_serial_write &rArr; _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[27c]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, pin_mux.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[27b]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, pin_mux.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[b]"></a>get_link_speed_duplex</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lan8720a.o(i.get_link_speed_duplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_link_speed_duplex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720a.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>get_link_status</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lan8720a.o(i.get_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_link_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720a.o(.data)
</UL>
<P><STRONG><a name="[1c2]"></a>rt_phy_8720a_register</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lan8720a.o(i.rt_phy_8720a_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_phy_8720a_register &rArr; rt_hw_phy_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_phy_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720a.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[6]"></a>rt_phy_init</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, lan8720a.o(i.rt_phy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_phy_init &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_mdio_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720a.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>rt_phy_loopback</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lan8720a.o(i.rt_phy_loopback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_phy_loopback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720a.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>rt_phy_read</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, lan8720a.o(i.rt_phy_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_phy_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720a.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>rt_phy_write</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, lan8720a.o(i.rt_phy_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_phy_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720a.o(.data)
</UL>
<P><STRONG><a name="[276]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, board.o(i.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BOARD_ConfigMPU &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_DisableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[4fb]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, board.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_uart_pins_init
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_sdio_pins_init
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_enet_pins_init
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_can1_pins_init
</UL>

<P><STRONG><a name="[4fa]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, board.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_uart_pins_init
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_sdio_pins_init
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_enet_pins_init
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_can1_pins_init
</UL>

<P><STRONG><a name="[277]"></a>SCB_DisableDCache</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, board.o(i.SCB_DisableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_DisableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[278]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, board.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[279]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, board.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[1da]"></a>reboot</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, board.o(i.reboot))
<BR>[Address Reference Count : 1]<UL><LI> board.o(FSymTab)
</UL>
<P><STRONG><a name="[26e]"></a>CLOCK_DisableClock</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, clock_config.o(i.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = CLOCK_DisableClock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN (via Veneer)
</UL>

<P><STRONG><a name="[26d]"></a>CLOCK_SetDiv</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clock_config.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN (via Veneer)
</UL>

<P><STRONG><a name="[26c]"></a>CLOCK_SetMux</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clock_config.o(i.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[271]"></a>CLOCK_SetPllBypass</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, clock_config.o(i.CLOCK_SetPllBypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetPllBypass
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[275]"></a>IOMUXC_SetSaiMClkClockSource</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, clock_config.o(i.IOMUXC_SetSaiMClkClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetSaiMClkClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[4fe]"></a>CLOCK_EnableClock</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, drv_gpio.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = CLOCK_EnableClock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_mode (via Veneer)
</UL>

<P><STRONG><a name="[500]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, drv_gpio.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_mode
</UL>

<P><STRONG><a name="[4ff]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, drv_gpio.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imxrt_pin_mode
</UL>

<P><STRONG><a name="[2c5]"></a>imxrt_isr</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, drv_gpio.o(i.imxrt_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = imxrt_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO5_Combined_0_15_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Combined_16_31_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Combined_0_15_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_16_31_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_16_31_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>imxrt_pin_attach_irq</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, drv_gpio.o(i.imxrt_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = imxrt_pin_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>imxrt_pin_detach_irq</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, drv_gpio.o(i.imxrt_pin_detach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = imxrt_pin_detach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>imxrt_pin_irq_enable</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, drv_gpio.o(i.imxrt_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = imxrt_pin_irq_enable &rArr; GPIO_PinSetInterruptConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>imxrt_pin_mode</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, drv_gpio.o(i.imxrt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = imxrt_pin_mode &rArr; GPIO_PinInit &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>imxrt_pin_read</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, drv_gpio.o(i.imxrt_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = imxrt_pin_read &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>imxrt_pin_write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv_gpio.o(i.imxrt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = imxrt_pin_write &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[2cd]"></a>CLOCK_GetDiv</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_uart.o(i.CLOCK_GetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartSrcFreq
</UL>

<P><STRONG><a name="[16e]"></a>imxrt_configure</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, drv_uart.o(i.imxrt_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = imxrt_configure &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartSrcFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>imxrt_control</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, drv_uart.o(i.imxrt_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = imxrt_control
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>imxrt_getc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_uart.o(i.imxrt_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = imxrt_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>imxrt_putc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_uart.o(i.imxrt_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = imxrt_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.constdata)
</UL>
<P><STRONG><a name="[635]"></a>uart_get_dma_config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_uart.o(i.uart_get_dma_config))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
</UL>

<P><STRONG><a name="[2ce]"></a>uart_isr</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_uart.o(i.uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART6_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[c]"></a>can_cfg</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, drv_can.o(i.can_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = can_cfg &rArr; FLEXCAN_Init &rArr; FLEXCAN_SetBaudRate &rArr; FLEXCAN_SetTimingConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferReceiveNonBlocking
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferCreateHandle
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxMbConfig
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxIndividualMask
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetDefaultConfig
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanSrcFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>can_control</STRONG> (Thumb, 732 bytes, Stack size 88 bytes, drv_can.o(i.can_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = can_control &rArr; FLEXCAN_SetRxMbConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxMbConfig
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxIndividualMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>can_recv</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, drv_can.o(i.can_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>can_send</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, drv_can.o(i.can_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = can_send &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferSendNonBlocking
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTxMbConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.data)
</UL>
<P><STRONG><a name="[104]"></a>flexcan_callback</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, drv_can.o(i.flexcan_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = flexcan_callback &rArr; FLEXCAN_TransferReceiveNonBlocking &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferReceiveNonBlocking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(i.can_cfg)
</UL>
<P><STRONG><a name="[301]"></a>USB_HostAllocateDeviceAddress</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, usb_host_devices.o(i.USB_HostAllocateDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_HostAllocateDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostAttachDevice
</UL>

<P><STRONG><a name="[33f]"></a>USB_HostControlBus</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, usb_host_devices.o(i.USB_HostControlBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_HostControlBus
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseDeviceResource
</UL>

<P><STRONG><a name="[fa]"></a>USB_HostEnumerationTransferCallback</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, usb_host_devices.o(i.USB_HostEnumerationTransferCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = USB_HostEnumerationTransferCallback &rArr; USB_HostProcessState &rArr; USB_HostStandardSetGetDescriptor &rArr; USB_HostCh9RequestCommon &rArr; USB_HostSendSetup &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostProcessState
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostNotifyDevice
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostFreeTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_host_devices.o(i.USB_HostProcessState)
</UL>
<P><STRONG><a name="[300]"></a>USB_HostNotifyDevice</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, usb_host_devices.o(i.USB_HostNotifyDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_HostNotifyDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostDetachDeviceInternal
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostAttachDevice
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostProcessState
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostProcessCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEnumerationTransferCallback
</UL>

<P><STRONG><a name="[33a]"></a>USB_HostParseDeviceConfigurationDescriptor</STRONG> (Thumb, 618 bytes, Stack size 24 bytes, usb_host_devices.o(i.USB_HostParseDeviceConfigurationDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_HostParseDeviceConfigurationDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostProcessCallback
</UL>

<P><STRONG><a name="[172]"></a>USB_HostProcessCallback</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, usb_host_devices.o(i.USB_HostProcessCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = USB_HostProcessCallback &rArr; OSA_MemoryAllocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemoryFree
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemoryAllocate
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostParseDeviceConfigurationDescriptor
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostNotifyDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_host_devices.o(.constdata)
</UL>
<P><STRONG><a name="[303]"></a>USB_HostProcessState</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, usb_host_devices.o(i.USB_HostProcessState))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = USB_HostProcessState &rArr; USB_HostStandardSetGetDescriptor &rArr; USB_HostCh9RequestCommon &rArr; USB_HostSendSetup &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostMallocTransfer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostNotifyDevice
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostStandardSetGetDescriptor
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostStandardSetAddress
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCh9RequestCommon
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostAttachDevice
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEnumerationTransferCallback
</UL>

<P><STRONG><a name="[33d]"></a>USB_HostReleaseDeviceAddress</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_host_devices.o(i.USB_HostReleaseDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = USB_HostReleaseDeviceAddress &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseDeviceResource
</UL>

<P><STRONG><a name="[315]"></a>USB_HostReleaseDeviceResource</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usb_host_devices.o(i.USB_HostReleaseDeviceResource))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = USB_HostReleaseDeviceResource &rArr; USB_HostReleaseDeviceAddress &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostClosePipe
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCancelTransfer
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MemoryFree
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostReleaseDeviceAddress
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostControlBus
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostDetachDeviceInternal
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCloseDeviceInterface
</UL>

<P><STRONG><a name="[314]"></a>USB_HostRemoveDeviceInstance</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, usb_host_devices.o(i.USB_HostRemoveDeviceInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_HostRemoveDeviceInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostDetachDeviceInternal
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCloseDeviceInterface
</UL>

<P><STRONG><a name="[62f]"></a>ENET_ClearInterruptStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_mdio.o(i.ENET_ClearInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_mdio_write
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_mdio_read
</UL>

<P><STRONG><a name="[10]"></a>rt_hw_mdio_init</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, drv_mdio.o(i.rt_hw_mdio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = rt_hw_mdio_init &rArr; ENET_SetSMI &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetSMI
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mdio.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>rt_hw_mdio_read</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, drv_mdio.o(i.rt_hw_mdio_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_hw_mdio_read &rArr; ENET_StartSMIRead
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_StartSMIRead
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ClearInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mdio.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>rt_hw_mdio_write</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, drv_mdio.o(i.rt_hw_mdio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_hw_mdio_write &rArr; ENET_StartSMIWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_StartSMIWrite
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ClearInterruptStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mdio.o(.data)
</UL>
<P><STRONG><a name="[356]"></a>_ENET_ActiveSend</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_eth.o(i._ENET_ActiveSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = _ENET_ActiveSend &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ENET_SendFrame
</UL>

<P><STRONG><a name="[357]"></a>_ENET_SendFrame</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, drv_eth.o(i._ENET_SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = _ENET_SendFrame &rArr; _ENET_ActiveSend &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanByRange
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ENET_ActiveSend
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_tx
</UL>

<P><STRONG><a name="[376]"></a>_enet_clk_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, drv_eth.o(i._enet_clk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _enet_clk_init &rArr; CLOCK_InitEnetPll
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitEnetPll
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_imxrt_eth_init
</UL>

<P><STRONG><a name="[378]"></a>_enet_config</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, drv_eth.o(i._enet_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = _enet_config &rArr; ENET_Init &rArr; ENET_SetMacController &rArr; ENET_SetSMI &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetCallback
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetDefaultConfig
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Deinit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_init
</UL>

<P><STRONG><a name="[144]"></a>phy_monitor_thread_entry</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, drv_eth.o(i.phy_monitor_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = phy_monitor_thread_entry &rArr; rt_imxrt_eth_init &rArr; _enet_config &rArr; ENET_Init &rArr; ENET_SetMacController &rArr; ENET_SetSMI &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_imxrt_eth_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_imxrt_eth_init)
</UL>
<P><STRONG><a name="[1c3]"></a>rt_hw_imxrt_eth_init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, drv_eth.o(i.rt_hw_imxrt_eth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_hw_imxrt_eth_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_clk_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[13e]"></a>rt_imxrt_eth_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_eth.o(i.rt_imxrt_eth_close))
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_imxrt_eth_init)
</UL>
<P><STRONG><a name="[141]"></a>rt_imxrt_eth_control</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_eth.o(i.rt_imxrt_eth_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_imxrt_eth_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_imxrt_eth_init)
</UL>
<P><STRONG><a name="[13c]"></a>rt_imxrt_eth_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_eth.o(i.rt_imxrt_eth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = rt_imxrt_eth_init &rArr; _enet_config &rArr; ENET_Init &rArr; ENET_SetMacController &rArr; ENET_SetSMI &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enet_config
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_imxrt_eth_init)
</UL>
<P><STRONG><a name="[13d]"></a>rt_imxrt_eth_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_eth.o(i.rt_imxrt_eth_open))
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_imxrt_eth_init)
</UL>
<P><STRONG><a name="[13f]"></a>rt_imxrt_eth_read</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, drv_eth.o(i.rt_imxrt_eth_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_imxrt_eth_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_imxrt_eth_init)
</UL>
<P><STRONG><a name="[140]"></a>rt_imxrt_eth_write</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, drv_eth.o(i.rt_imxrt_eth_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_imxrt_eth_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_eth.o(i.rt_hw_imxrt_eth_init)
</UL>
<P><STRONG><a name="[39a]"></a>CLOCK_EnableClock</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, drv_sdio.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = CLOCK_EnableClock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_gpio_init (via Veneer)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_clk_init (via Veneer)
</UL>

<P><STRONG><a name="[39b]"></a>CLOCK_SetDiv</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, drv_sdio.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_clk_init (via Veneer)
</UL>

<P><STRONG><a name="[2f6]"></a>SDMMCHOST_ErrorRecovery</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drv_sdio.o(i.SDMMCHOST_ErrorRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDMMCHOST_ErrorRecovery &rArr; USDHC_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_request
</UL>

<P><STRONG><a name="[399]"></a>USDHC_SetDataBusWidth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_sdio.o(i.USDHC_SetDataBusWidth))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_set_iocfg
</UL>

<P><STRONG><a name="[173]"></a>_mmc_request</STRONG> (Thumb, 462 bytes, Stack size 112 bytes, drv_sdio.o(i._mmc_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = _mmc_request &rArr; USDHC_TransferBlocking &rArr; USDHC_SetAdmaTableConfig &rArr; USDHC_SetADMA2Descriptor &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_req_complete
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc_align
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_align
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ErrorRecovery
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdio.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>_mmc_set_iocfg</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, drv_sdio.o(i._mmc_set_iocfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = _mmc_set_iocfg &rArr; USDHC_SetSdClock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetSdClock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetDataBusWidth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdio.o(.constdata)
</UL>
<P><STRONG><a name="[380]"></a>_mmcsd_clk_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_sdio.o(i._mmcsd_clk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = _mmcsd_clk_init &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imxrt_mci_init
</UL>

<P><STRONG><a name="[382]"></a>_mmcsd_gpio_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_sdio.o(i._mmcsd_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = _mmcsd_gpio_init &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imxrt_mci_init
</UL>

<P><STRONG><a name="[383]"></a>_mmcsd_host_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_sdio.o(i._mmcsd_host_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = _mmcsd_host_init &rArr; USDHC_Init &rArr; USDHC_SetTransferInterrupt &rArr; USDHC_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imxrt_mci_init
</UL>

<P><STRONG><a name="[381]"></a>_mmcsd_isr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_sdio.o(i._mmcsd_isr_init))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imxrt_mci_init
</UL>

<P><STRONG><a name="[306]"></a>USB_HostBandwidthComputeTime</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, usb_host_ehci.o(i.USB_HostBandwidthComputeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_HostBandwidthComputeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostAllocateInterrupt
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthFslsHostAllocate
</UL>

<P><STRONG><a name="[304]"></a>USB_HostBandwidthFslsHostAllocate</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, usb_host_ehci.o(i.USB_HostBandwidthFslsHostAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_HostBandwidthFslsHostAllocate &rArr; USB_HostHelperGetPeripheralInformation
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostHelperGetPeripheralInformation
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthFslsHostComputeCurrent
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthComputeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenInterrupt
</UL>

<P><STRONG><a name="[307]"></a>USB_HostBandwidthFslsHostComputeCurrent</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_host_ehci.o(i.USB_HostBandwidthFslsHostComputeCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_HostBandwidthFslsHostComputeCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthFslsHostAllocate
</UL>

<P><STRONG><a name="[308]"></a>USB_HostBandwidthHsHostAllocateHsCommon</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, usb_host_ehci.o(i.USB_HostBandwidthHsHostAllocateHsCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USB_HostBandwidthHsHostAllocateHsCommon &rArr; USB_HostBandwidthHsHostComputeCurrentHsAll &rArr; USB_HostHelperGetPeripheralInformation
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostComputeCurrentHsAll
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostAllocateInterrupt
</UL>

<P><STRONG><a name="[30a]"></a>USB_HostBandwidthHsHostAllocateInterrupt</STRONG> (Thumb, 664 bytes, Stack size 88 bytes, usb_host_ehci.o(i.USB_HostBandwidthHsHostAllocateInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USB_HostBandwidthHsHostAllocateInterrupt &rArr; USB_HostBandwidthHsHostAllocateHsCommon &rArr; USB_HostBandwidthHsHostComputeCurrentHsAll &rArr; USB_HostHelperGetPeripheralInformation
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostHelperGetPeripheralInformation
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostComputeCurrentHsAll
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostComputeCurrentFsls
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostAllocateHsCommon
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthComputeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenInterrupt
</UL>

<P><STRONG><a name="[30b]"></a>USB_HostBandwidthHsHostComputeCurrentFsls</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, usb_host_ehci.o(i.USB_HostBandwidthHsHostComputeCurrentFsls))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_HostBandwidthHsHostComputeCurrentFsls &rArr; USB_HostHelperGetPeripheralInformation
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostHelperGetPeripheralInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostAllocateInterrupt
</UL>

<P><STRONG><a name="[309]"></a>USB_HostBandwidthHsHostComputeCurrentHsAll</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, usb_host_ehci.o(i.USB_HostBandwidthHsHostComputeCurrentHsAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_HostBandwidthHsHostComputeCurrentHsAll &rArr; USB_HostHelperGetPeripheralInformation
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostHelperGetPeripheralInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostAllocateInterrupt
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostAllocateHsCommon
</UL>

<P><STRONG><a name="[32a]"></a>USB_HostEhciAddQhToFrame</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, usb_host_ehci.o(i.USB_HostEhciAddQhToFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_HostEhciAddQhToFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenInterrupt
</UL>

<P><STRONG><a name="[319]"></a>USB_HostEhciCancelPipe</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usb_host_ehci.o(i.USB_HostEhciCancelPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciCancelPipe &rArr; USB_HostEhciTransferQtdListDeinit &rArr; USB_HostEhciQtdListRelease &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTransferQtdListDeinit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhQtdListDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciIoctl
</UL>

<P><STRONG><a name="[31c]"></a>USB_HostEhciCloseControlBulk</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, usb_host_ehci.o(i.USB_HostEhciCloseControlBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciCloseControlBulk &rArr; USB_HostEhciQhDeinit &rArr; USB_HostEhciQhQtdListDeinit &rArr; USB_HostEhciQtdListRelease &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStartAsync
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStopAsync
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciClosePipe
</UL>

<P><STRONG><a name="[320]"></a>USB_HostEhciCloseInterrupt</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usb_host_ehci.o(i.USB_HostEhciCloseInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciCloseInterrupt &rArr; USB_HostEhciQhDeinit &rArr; USB_HostEhciQhQtdListDeinit &rArr; USB_HostEhciQtdListRelease &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciRemoveFromFrame
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciClosePipe
</UL>

<P><STRONG><a name="[325]"></a>USB_HostEhciDelay</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, usb_host_ehci.o(i.USB_HostEhciDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_HostEhciDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciPortChange
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciIoctl
</UL>

<P><STRONG><a name="[32c]"></a>USB_HostEhciGet2PowerValue</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, usb_host_ehci.o(i.USB_HostEhciGet2PowerValue))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenPipe
</UL>

<P><STRONG><a name="[327]"></a>USB_HostEhciOpenControlBulk</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_host_ehci.o(i.USB_HostEhciOpenControlBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciOpenControlBulk &rArr; USB_HostEhciQhInit &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhInit
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenPipe
</UL>

<P><STRONG><a name="[329]"></a>USB_HostEhciOpenInterrupt</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usb_host_ehci.o(i.USB_HostEhciOpenInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciOpenInterrupt &rArr; USB_HostEhciQhInit &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhInit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciAddQhToFrame
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthHsHostAllocateInterrupt
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostBandwidthFslsHostAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenPipe
</UL>

<P><STRONG><a name="[31f]"></a>USB_HostEhciQhDeinit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usb_host_ehci.o(i.USB_HostEhciQhDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciQhDeinit &rArr; USB_HostEhciQhQtdListDeinit &rArr; USB_HostEhciQtdListRelease &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhQtdListDeinit
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCloseInterrupt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCloseControlBulk
</UL>

<P><STRONG><a name="[328]"></a>USB_HostEhciQhInit</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, usb_host_ehci.o(i.USB_HostEhciQhInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciQhInit &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostHelperGetPeripheralInformation
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciZeroMem
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenInterrupt
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenControlBulk
</UL>

<P><STRONG><a name="[31a]"></a>USB_HostEhciQhQtdListDeinit</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, usb_host_ehci.o(i.USB_HostEhciQhQtdListDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciQhQtdListDeinit &rArr; USB_HostEhciQtdListRelease &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStartAsync
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStopAsync
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQtdListRelease
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhDeinit
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCancelPipe
</UL>

<P><STRONG><a name="[330]"></a>USB_HostEhciQhQtdListInit</STRONG> (Thumb, 640 bytes, Stack size 64 bytes, usb_host_ehci.o(i.USB_HostEhciQhQtdListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciQhQtdListInit &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStartAsync
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciWritePipe
</UL>

<P><STRONG><a name="[32f]"></a>USB_HostEhciQtdListRelease</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usb_host_ehci.o(i.USB_HostEhciQtdListRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciQtdListRelease &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTransactionDone
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTimer0
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTransferQtdListDeinit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhQtdListDeinit
</UL>

<P><STRONG><a name="[321]"></a>USB_HostEhciRemoveFromFrame</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usb_host_ehci.o(i.USB_HostEhciRemoveFromFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_HostEhciRemoveFromFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCloseInterrupt
</UL>

<P><STRONG><a name="[322]"></a>USB_HostEhciResetIP</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usb_host_ehci.o(i.USB_HostEhciResetIP))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCreate
</UL>

<P><STRONG><a name="[323]"></a>USB_HostEhciStartIP</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, usb_host_ehci.o(i.USB_HostEhciStartIP))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCreate
</UL>

<P><STRONG><a name="[31d]"></a>USB_HostEhciStopAsync</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, usb_host_ehci.o(i.USB_HostEhciStopAsync))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTimer0
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciPortChange
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciIoctl
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTransferQtdListDeinit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhQtdListDeinit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCloseControlBulk
</UL>

<P><STRONG><a name="[32e]"></a>USB_HostEhciStopPeriodic</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, usb_host_ehci.o(i.USB_HostEhciStopPeriodic))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciPortChange
</UL>

<P><STRONG><a name="[31b]"></a>USB_HostEhciTransferQtdListDeinit</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, usb_host_ehci.o(i.USB_HostEhciTransferQtdListDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = USB_HostEhciTransferQtdListDeinit &rArr; USB_HostEhciQtdListRelease &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStartAsync
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciStopAsync
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQtdListRelease
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexUnlock
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciCancelPipe
</UL>

<P><STRONG><a name="[32b]"></a>USB_HostEhciZeroMem</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_host_ehci.o(i.USB_HostEhciZeroMem))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciOpenPipe
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciQhInit
</UL>

<P><STRONG><a name="[30f]"></a>USB_HostClockInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drv_usbh.o(i.USB_HostClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USB_HostClockInit &rArr; USB_EhciPhyInit &rArr; USB_EhciPhyGetBase
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbhs1PhyPllClock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbhs1Clock
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbhs0PhyPllClock
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbhs0Clock
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EhciPhyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_usbh_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_usbh_init
</UL>

<P><STRONG><a name="[16]"></a>_ehci0_close_pipe</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_usbh.o(i._ehci0_close_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ehci0_close_pipe &rArr; USB_HostClosePipe
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_free_pipe_index
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostClosePipe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(.data)
</UL>
<P><STRONG><a name="[36c]"></a>_ehci0_free_pipe_index</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_usbh.o(i._ehci0_free_pipe_index))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_close_pipe
</UL>

<P><STRONG><a name="[36d]"></a>_ehci0_get_free_pipe_index</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, drv_usbh.o(i._ehci0_get_free_pipe_index))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_open_pipe
</UL>

<P><STRONG><a name="[15]"></a>_ehci0_open_pipe</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drv_usbh.o(i._ehci0_open_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ehci0_open_pipe &rArr; USB_HostOpenPipe
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci0_get_free_pipe_index
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostOpenPipe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>_ehci0_pipe_xfer</STRONG> (Thumb, 564 bytes, Stack size 32 bytes, drv_usbh.o(i._ehci0_pipe_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = _ehci0_pipe_xfer &rArr; USB_HostEhciWritePipe &rArr; USB_HostEhciQhQtdListInit &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciWritePipe
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostMallocTransfer
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostFreeTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>_ehci0_reset_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_usbh.o(i._ehci0_reset_port))
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(.data)
</UL>
<P><STRONG><a name="[112]"></a>_ehci0_usbh_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_usbh.o(i._ehci0_usbh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = _ehci0_usbh_init &rArr; USB_HostInit &rArr; OSA_MutexDestroy &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostIsrEnable
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostClockInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(i.imxrt_usbh_register)
</UL>
<P><STRONG><a name="[fd]"></a>_ehci0_usbh_thread</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_usbh.o(i._ehci0_usbh_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = _ehci0_usbh_thread &rArr; USB_HostEhciTaskFunction &rArr; USB_HostAttachDevice &rArr; USB_HostProcessState &rArr; USB_HostStandardSetGetDescriptor &rArr; USB_HostCh9RequestCommon &rArr; USB_HostSendSetup &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTaskFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(i._ehci0_usbh_init)
</UL>
<P><STRONG><a name="[1a]"></a>_ehci1_close_pipe</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_usbh.o(i._ehci1_close_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ehci1_close_pipe &rArr; USB_HostClosePipe
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_free_pipe_index
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostClosePipe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(.data)
</UL>
<P><STRONG><a name="[372]"></a>_ehci1_free_pipe_index</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_usbh.o(i._ehci1_free_pipe_index))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_close_pipe
</UL>

<P><STRONG><a name="[373]"></a>_ehci1_get_free_pipe_index</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, drv_usbh.o(i._ehci1_get_free_pipe_index))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_open_pipe
</UL>

<P><STRONG><a name="[19]"></a>_ehci1_open_pipe</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, drv_usbh.o(i._ehci1_open_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ehci1_open_pipe &rArr; USB_HostOpenPipe
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ehci1_get_free_pipe_index
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostOpenPipe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>_ehci1_pipe_xfer</STRONG> (Thumb, 566 bytes, Stack size 40 bytes, drv_usbh.o(i._ehci1_pipe_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = _ehci1_pipe_xfer &rArr; USB_HostEhciWritePipe &rArr; USB_HostEhciQhQtdListInit &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciWritePipe
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostMallocTransfer
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostFreeTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>_ehci1_reset_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_usbh.o(i._ehci1_reset_port))
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(.data)
</UL>
<P><STRONG><a name="[113]"></a>_ehci1_usbh_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_usbh.o(i._ehci1_usbh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = _ehci1_usbh_init &rArr; USB_HostInit &rArr; OSA_MutexDestroy &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostIsrEnable
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostClockInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(i.imxrt_usbh_register)
</UL>
<P><STRONG><a name="[ff]"></a>_ehci1_usbh_thread</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_usbh.o(i._ehci1_usbh_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = _ehci1_usbh_thread &rArr; USB_HostEhciTaskFunction &rArr; USB_HostAttachDevice &rArr; USB_HostProcessState &rArr; USB_HostStandardSetGetDescriptor &rArr; USB_HostCh9RequestCommon &rArr; USB_HostSendSetup &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostEhciTaskFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(i._ehci1_usbh_init)
</UL>
<P><STRONG><a name="[fb]"></a>_imxrt_usb_host_send_callback</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, drv_usbh.o(i._imxrt_usb_host_send_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _imxrt_usb_host_send_callback &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>
<BR>[Address Reference Count : 2]<UL><LI> drv_usbh.o(i._ehci0_pipe_xfer)
<LI> drv_usbh.o(i._ehci1_pipe_xfer)
</UL>
<P><STRONG><a name="[fc]"></a>usb0_host_callback</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, drv_usbh.o(i.usb0_host_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = usb0_host_callback &rArr; USB_HostCloseDeviceInterface &rArr; USB_HostReleaseDeviceResource &rArr; USB_HostReleaseDeviceAddress &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_disconnect_handler
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_connect_handler
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCloseDeviceInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(i._ehci0_usbh_init)
</UL>
<P><STRONG><a name="[fe]"></a>usb1_host_callback</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, drv_usbh.o(i.usb1_host_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = usb1_host_callback &rArr; USB_HostCloseDeviceInterface &rArr; USB_HostReleaseDeviceResource &rArr; USB_HostReleaseDeviceAddress &rArr; OSA_MutexLock &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_disconnect_handler
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_root_hub_connect_handler
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostCloseDeviceInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(i._ehci1_usbh_init)
</UL>
<P><STRONG><a name="[337]"></a>USB_HostGetControllerInterface</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_host_hci.o(i.USB_HostGetControllerInterface))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[335]"></a>USB_HostGetInstance</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, usb_host_hci.o(i.USB_HostGetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USB_HostGetInstance &rArr; OSA_ExitCritical &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[338]"></a>USB_HostReleaseInstance</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usb_host_hci.o(i.USB_HostReleaseInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = USB_HostReleaseInstance &rArr; OSA_ExitCritical &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[4b9]"></a>fd_alloc</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, dfs.o(i.fd_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[37a]"></a>_get_path_lastname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfs_file.o(i._get_path_lastname))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[40c]"></a>copydir</STRONG> (Thumb, 250 bytes, Stack size 384 bytes, dfs_file.o(i.copydir))
<BR><BR>[Stack]<UL><LI>Max Depth = 884 + In Cycle
<LI>Call Chain = copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[40b]"></a>copyfile</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, dfs_file.o(i.copyfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = copyfile &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[182]"></a>dfs_device_fs_poll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_poll))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[425]"></a>elm_result_to_dfs</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, dfs_elm.o(i.elm_result_to_dfs))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[42b]"></a>get_disk</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dfs_elm.o(i.get_disk))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[3ed]"></a>check_fs</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[4ad]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[44c]"></a>clst2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[406]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[40f]"></a>create_chain</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[412]"></a>create_name</STRONG> (Thumb, 592 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = create_name &rArr; tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[416]"></a>create_partition</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, ff.o(i.create_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = create_partition &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[4d4]"></a>dbc_1st</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[6b1]"></a>dbc_2nd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.dbc_2nd))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[447]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[44a]"></a>dir_clear</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[44f]"></a>dir_find</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[449]"></a>dir_next</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[451]"></a>dir_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[453]"></a>dir_register</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[456]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dir_remove &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[448]"></a>dir_sdi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[4bf]"></a>find_volume</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[4ae]"></a>follow_path</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[454]"></a>gen_numname</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[410]"></a>get_fat</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[4b8]"></a>get_fileinfo</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_fileinfo &rArr; put_utf &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[4b3]"></a>get_ldnumber</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[4b7]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[3f1]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[3ef]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[533]"></a>lock_fs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ff.o(i.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[4ac]"></a>mount_volume</STRONG> (Thumb, 670 bytes, Stack size 64 bytes, ff.o(i.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[3ee]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[452]"></a>pick_lfn</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[411]"></a>put_fat</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[455]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4d6]"></a>put_utf</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ff.o(i.put_utf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_utf &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[4b2]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[4b0]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[418]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[419]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[450]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[4b1]"></a>sync_fs</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[44b]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[413]"></a>tchar2uni</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ff.o(i.tchar2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[4ab]"></a>unlock_fs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ff.o(i.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[4aa]"></a>validate</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[110]"></a>finsh_rx_ind</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, shell.o(i.finsh_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_set_device)
</UL>
<P><STRONG><a name="[4c9]"></a>shell_auto_complete</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(i.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[4c8]"></a>shell_handle_history</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shell.o(i.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = shell_handle_history &rArr; finsh_get_prompt &rArr; getcwd &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[4cb]"></a>shell_push_history</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, shell.o(i.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shell_push_history &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[39e]"></a>_msh_exec_cmd</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, msh.o(i._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[39f]"></a>msh_get_cmd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msh.o(i.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[3a0]"></a>msh_split</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, msh.o(i.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[5c5]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msh.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[1e2]"></a>cmd_cat</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = cmd_cat &rArr; cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1e4]"></a>cmd_cd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cd))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = cmd_cd &rArr; chdir &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1e0]"></a>cmd_cp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 988<LI>Call Chain = cmd_cp &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1ea]"></a>cmd_df</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, msh_file.o(i.cmd_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = cmd_df &rArr; df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1eb]"></a>cmd_echo</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, msh_file.o(i.cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = cmd_echo &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1df]"></a>cmd_ls</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, msh_file.o(i.cmd_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = cmd_ls &rArr; ls &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1e6]"></a>cmd_mkdir</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msh_file.o(i.cmd_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = cmd_mkdir &rArr; mkdir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1e7]"></a>cmd_mkfs</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, msh_file.o(i.cmd_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = cmd_mkfs &rArr; dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1e8]"></a>cmd_mount</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, msh_file.o(i.cmd_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = cmd_mount &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1e1]"></a>cmd_mv</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, msh_file.o(i.cmd_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = cmd_mv &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1e5]"></a>cmd_pwd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, msh_file.o(i.cmd_pwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = cmd_pwd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1e3]"></a>cmd_rm</STRONG> (Thumb, 268 bytes, Stack size 96 bytes, msh_file.o(i.cmd_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = cmd_rm &rArr; directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1ec]"></a>cmd_tail</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, msh_file.o(i.cmd_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = cmd_tail &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1e9]"></a>cmd_umount</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, msh_file.o(i.cmd_umount))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = cmd_umount &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[403]"></a>directory_delete_for_msh</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, msh_file.o(i.directory_delete_for_msh))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + In Cycle
<LI>Call Chain = directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
</UL>

<P><STRONG><a name="[5c9]"></a>msh_readline</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, msh_file.o(i.msh_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = msh_readline &rArr; read &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[1ed]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[528]"></a>list_find_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cmd.o(i.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[52a]"></a>list_get_next</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cmd.o(i.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[529]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(i.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[52b]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[52c]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[52d]"></a>show_wait_queue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cmd.o(i.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[63e]"></a>_remove_next_ptr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, memheap.o(i._remove_next_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
</UL>

<P><STRONG><a name="[3a7]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, scheduler.o(i._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[3a8]"></a>_scheduler_get_highest_priority_thread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, scheduler.o(i._scheduler_get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _scheduler_get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[61e]"></a>rt_defunct_execute</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, idle.o(i.rt_defunct_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[154]"></a>rt_thread_idle_entry</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_thread_idle_entry &rArr; rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[648]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[649]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[37c]"></a>_heap_lock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kservice.o(i._heap_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[37d]"></a>_heap_unlock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kservice.o(i._heap_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[689]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 60 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[688]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1bd]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[1b8]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[1ce]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[1b7]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[101]"></a>_thread_exit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, thread.o(i._thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._thread_init)
</UL>
<P><STRONG><a name="[3bb]"></a>_thread_init</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, thread.o(i._thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[102]"></a>_thread_timeout</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, thread.o(i._thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._thread_init)
</UL>
<P><STRONG><a name="[3be]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[3c0]"></a>_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[3c2]"></a>_timer_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i._timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[3c1]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
</UL>

<P><STRONG><a name="[658]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[659]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[3c3]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>

<P><STRONG><a name="[387]"></a>_ipc_list_resume</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(i._ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[388]"></a>_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(i._ipc_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
</UL>

<P><STRONG><a name="[38a]"></a>_ipc_list_suspend</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ipc.o(i._ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>

<P><STRONG><a name="[38d]"></a>_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i._ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
</UL>

<P><STRONG><a name="[38e]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>

<P><STRONG><a name="[38c]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>

<P><STRONG><a name="[389]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>

<P><STRONG><a name="[2fa]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, system_mimxrt1052.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2f9]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, system_mimxrt1052.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2c7]"></a>GPIO_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = GPIO_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[2d4]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_lpuart.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init (via Veneer)
</UL>

<P><STRONG><a name="[342]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_usdhc.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init (via Veneer)
</UL>

<P><STRONG><a name="[346]"></a>USDHC_ClearInterruptStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_usdhc.o(i.USDHC_ClearInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteByDataPortBlocking
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadByDataPortBlocking
</UL>

<P><STRONG><a name="[34f]"></a>USDHC_EnableInternalDMA</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_usdhc.o(i.USDHC_EnableInternalDMA))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[340]"></a>USDHC_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_usdhc.o(i.USDHC_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = USDHC_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetTransferInterrupt
</UL>

<P><STRONG><a name="[345]"></a>USDHC_GetInterruptStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_usdhc.o(i.USDHC_GetInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteByDataPortBlocking
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadByDataPortBlocking
</UL>

<P><STRONG><a name="[344]"></a>USDHC_ReadByDataPortBlocking</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, fsl_usdhc.o(i.USDHC_ReadByDataPortBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USDHC_ReadByDataPortBlocking &rArr; USDHC_ReadDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadDataPort
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
</UL>

<P><STRONG><a name="[347]"></a>USDHC_ReadDataPort</STRONG> (Thumb, 112 bytes, Stack size 28 bytes, fsl_usdhc.o(i.USDHC_ReadDataPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USDHC_ReadDataPort
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadByDataPortBlocking
</UL>

<P><STRONG><a name="[354]"></a>USDHC_ReceiveCommandResponse</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, fsl_usdhc.o(i.USDHC_ReceiveCommandResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USDHC_ReceiveCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
</UL>

<P><STRONG><a name="[350]"></a>USDHC_SetDataTransferConfig</STRONG> (Thumb, 262 bytes, Stack size 20 bytes, fsl_usdhc.o(i.USDHC_SetDataTransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USDHC_SetDataTransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[343]"></a>USDHC_SetTransferInterrupt</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, fsl_usdhc.o(i.USDHC_SetTransferInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = USDHC_SetTransferInterrupt &rArr; USDHC_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
</UL>

<P><STRONG><a name="[352]"></a>USDHC_TransferDataBlocking</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fsl_usdhc.o(i.USDHC_TransferDataBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteByDataPortBlocking
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadByDataPortBlocking
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[351]"></a>USDHC_WaitCommandDone</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fsl_usdhc.o(i.USDHC_WaitCommandDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = USDHC_WaitCommandDone &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReceiveCommandResponse
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[353]"></a>USDHC_WriteByDataPortBlocking</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, fsl_usdhc.o(i.USDHC_WriteByDataPortBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteDataPort
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
</UL>

<P><STRONG><a name="[355]"></a>USDHC_WriteDataPort</STRONG> (Thumb, 116 bytes, Stack size 28 bytes, fsl_usdhc.o(i.USDHC_WriteDataPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USDHC_WriteDataPort
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteByDataPortBlocking
</UL>

<P><STRONG><a name="[6f7]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_flexcan.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[2a6]"></a>CLOCK_EnableClock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init (via Veneer)
</UL>

<P><STRONG><a name="[2ba]"></a>EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_flexcan.o(i.EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferCreateHandle
</UL>

<P><STRONG><a name="[2bd]"></a>FLEXCAN_ClearMbStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_ClearMbStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[2bb]"></a>FLEXCAN_ClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[2b6]"></a>FLEXCAN_DisableMbInterrupts</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_flexcan.o(i.FLEXCAN_DisableMbInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCAN_DisableMbInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceiveFifo
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceive
</UL>

<P><STRONG><a name="[2c2]"></a>FLEXCAN_ERRATA_6032</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, fsl_flexcan.o(i.FLEXCAN_ERRATA_6032))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLEXCAN_ERRATA_6032
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_WriteTxMb
</UL>

<P><STRONG><a name="[2a7]"></a>FLEXCAN_Enable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[2bf]"></a>FLEXCAN_EnableMbInterrupts</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_flexcan.o(i.FLEXCAN_EnableMbInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCAN_EnableMbInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferSendNonBlocking
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferReceiveNonBlocking
</UL>

<P><STRONG><a name="[2b0]"></a>FLEXCAN_EnterFreezeMode</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, fsl_flexcan.o(i.FLEXCAN_EnterFreezeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLEXCAN_EnterFreezeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxIndividualMask
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTimingConfig
</UL>

<P><STRONG><a name="[2b1]"></a>FLEXCAN_ExitFreezeMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_ExitFreezeMode))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxIndividualMask
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTimingConfig
</UL>

<P><STRONG><a name="[2c3]"></a>FLEXCAN_GetFirstValidMb</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_flexcan.o(i.FLEXCAN_GetFirstValidMb))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_WriteTxMb
</UL>

<P><STRONG><a name="[2bc]"></a>FLEXCAN_GetMbStatusFlags</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, fsl_flexcan.o(i.FLEXCAN_GetMbStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLEXCAN_GetMbStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[2aa]"></a>FLEXCAN_IsMbIntEnabled</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_IsMbIntEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_IsMbIntEnabled &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[2ad]"></a>FLEXCAN_IsMbOccupied</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fsl_flexcan.o(i.FLEXCAN_IsMbOccupied))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCAN_IsMbOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferSendNonBlocking
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferReceiveNonBlocking
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTxMbConfig
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxMbConfig
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_WriteTxMb
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceive
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxMb
</UL>

<P><STRONG><a name="[2a8]"></a>FLEXCAN_Reset</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, fsl_flexcan.o(i.FLEXCAN_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_Reset &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[2a9]"></a>FLEXCAN_SetBaudRate</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, fsl_flexcan.o(i.FLEXCAN_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = FLEXCAN_SetBaudRate &rArr; FLEXCAN_SetTimingConfig &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTimingConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[287]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPerClkFreq
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[282]"></a>CLOCK_GetPeriphClkFreq</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPeriphClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbFreq
</UL>

<P><STRONG><a name="[28c]"></a>SCB_CleanDCache_by_Addr</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, fsl_cache.o(i.SCB_CleanDCache_by_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCB_CleanDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanByRange
</UL>

<P><STRONG><a name="[28e]"></a>SCB_CleanInvalidateDCache_by_Addr</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, fsl_cache.o(i.SCB_CleanInvalidateDCache_by_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCB_CleanInvalidateDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanInvalidateByRange
</UL>

<P><STRONG><a name="[290]"></a>SCB_InvalidateDCache_by_Addr</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, fsl_cache.o(i.SCB_InvalidateDCache_by_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCB_InvalidateDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_InvalidateByRange
</UL>

<P><STRONG><a name="[294]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_enet.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init (via Veneer)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Deinit (via Veneer)
</UL>

<P><STRONG><a name="[29c]"></a>ENET_SetHandler</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, fsl_enet.o(i.ENET_SetHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = ENET_SetHandler &rArr; ENET_GetInstance &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_GetInstance
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[29b]"></a>ENET_SetMacController</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, fsl_enet.o(i.ENET_SetMacController))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = ENET_SetMacController &rArr; ENET_SetSMI &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetSMI
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetMacAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[29a]"></a>ENET_SetRxBufferDescriptors</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, fsl_enet.o(i.ENET_SetRxBufferDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = ENET_SetRxBufferDescriptors &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_InvalidateByRange
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[299]"></a>ENET_SetTxBufferDescriptors</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, fsl_enet.o(i.ENET_SetTxBufferDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = ENET_SetTxBufferDescriptors &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Init
</UL>

<P><STRONG><a name="[29e]"></a>ENET_UpdateReadBuffers</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, fsl_enet.o(i.ENET_UpdateReadBuffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = ENET_UpdateReadBuffers &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_ReadFrame
</UL>

<P><STRONG><a name="[2a0]"></a>EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_enet.o(i.EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_SetHandler
</UL>

<P><STRONG><a name="[5f2]"></a>netif_do_ip_addr_changed</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, netif.o(i.netif_do_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
</UL>

<P><STRONG><a name="[5f6]"></a>netif_do_set_gw</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, netif.o(i.netif_do_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = netif_do_set_gw &rArr; netdev_low_level_set_gw &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[5f7]"></a>netif_do_set_ipaddr</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, netif.o(i.netif_do_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_ip_addr_changed
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[5f9]"></a>netif_do_set_netmask</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, netif.o(i.netif_do_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = netif_do_set_netmask &rArr; netdev_low_level_set_netmask &rArr; sal_check_netdev_internet_up &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[5f8]"></a>netif_issue_reports</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, netif.o(i.netif_issue_reports))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_do_set_ipaddr
</UL>

<P><STRONG><a name="[12b]"></a>netif_null_output_ip4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_null_output_ip4))
<BR>[Address Reference Count : 1]<UL><LI> netif.o(i.netif_add)
</UL>
<P><STRONG><a name="[3d8]"></a>alloc_socket</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, sockets.o(i.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = alloc_socket &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[11c]"></a>event_callback</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, sockets.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = event_callback &rArr; select_check_waiters &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_check_waiters
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_socket)
</UL>
<P><STRONG><a name="[4cf]"></a>free_socket</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sockets.o(i.free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = free_socket &rArr; free_socket_free_elements &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_locked
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket_free_elements
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[4d1]"></a>free_socket_free_elements</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sockets.o(i.free_socket_free_elements))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = free_socket_free_elements &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[4d0]"></a>free_socket_locked</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sockets.o(i.free_socket_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free_socket_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[4a6]"></a>get_socket</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sockets.o(i.get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_socket &rArr; tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_unregister_membership
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_register_membership
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[542]"></a>lwip_getaddrname</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, sockets.o(i.lwip_getaddrname))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lwip_getaddrname &rArr; netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
</UL>

<P><STRONG><a name="[543]"></a>lwip_getsockopt_impl</STRONG> (Thumb, 1108 bytes, Stack size 40 bytes, sockets.o(i.lwip_getsockopt_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lwip_getsockopt_impl &rArr; lwip_sockopt_to_ipopt &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sockopt_to_ipopt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</UL>

<P><STRONG><a name="[6a8]"></a>lwip_poll_should_wake</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sockets.o(i.lwip_poll_should_wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwip_poll_should_wake
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_check_waiters
</UL>

<P><STRONG><a name="[572]"></a>lwip_recv_tcp</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, sockets.o(i.lwip_recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = lwip_recv_tcp &rArr; pbuf_free_header &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_header
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[576]"></a>lwip_recv_tcp_from</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, sockets.o(i.lwip_recv_tcp_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = lwip_recv_tcp_from &rArr; netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[578]"></a>lwip_recvfrom_udp_raw</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, sockets.o(i.lwip_recvfrom_udp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = lwip_recvfrom_udp_raw &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sock_make_addr
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[57f]"></a>lwip_setsockopt_impl</STRONG> (Thumb, 1306 bytes, Stack size 48 bytes, sockets.o(i.lwip_setsockopt_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = lwip_setsockopt_impl &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind_netif
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind_netif
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind_netif
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sockopt_to_ipopt
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_unregister_membership
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_register_membership
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_find
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>

<P><STRONG><a name="[577]"></a>lwip_sock_make_addr</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, sockets.o(i.lwip_sock_make_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lwip_sock_make_addr &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom_udp_raw
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv_tcp_from
</UL>

<P><STRONG><a name="[53b]"></a>lwip_socket_drop_registered_memberships</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket_drop_registered_memberships))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[584]"></a>lwip_socket_register_membership</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket_register_membership))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lwip_socket_register_membership &rArr; get_socket &rArr; tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[585]"></a>lwip_socket_unregister_membership</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket_unregister_membership))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lwip_socket_unregister_membership &rArr; get_socket &rArr; tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[544]"></a>lwip_sockopt_to_ipopt</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sockets.o(i.lwip_sockopt_to_ipopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = lwip_sockopt_to_ipopt &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
</UL>

<P><STRONG><a name="[4a7]"></a>select_check_waiters</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, sockets.o(i.select_check_waiters))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = select_check_waiters &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_poll_should_wake
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[4d7]"></a>tryget_socket</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sockets.o(i.tryget_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket_unconn
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[58b]"></a>tryget_socket_unconn</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sockets.o(i.tryget_socket_unconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket_unconn_nouse
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>

<P><STRONG><a name="[6f1]"></a>tryget_socket_unconn_nouse</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sockets.o(i.tryget_socket_unconn_nouse))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket_unconn
</UL>

<P><STRONG><a name="[12c]"></a>netifapi_do_netif_add</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, netifapi.o(i.netifapi_do_netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = netifapi_do_netif_add &rArr; netif_add &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(i.netifapi_netif_add)
</UL>
<P><STRONG><a name="[12d]"></a>netifapi_do_netif_common</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, netifapi.o(i.netifapi_do_netif_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netifapi_do_netif_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(i.netifapi_netif_common)
</UL>
<P><STRONG><a name="[165]"></a>tcpip_thread</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tcpip_thread &rArr; tcpip_timeouts_mbox_fetch &rArr; sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeouts_mbox_fetch
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread_handle_msg
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[6f0]"></a>tcpip_thread_handle_msg</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread_handle_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = tcpip_thread_handle_msg &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[6ef]"></a>tcpip_timeouts_mbox_fetch</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tcpip_timeouts_mbox_fetch &rArr; sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[495]"></a>etharp_find_entry</STRONG> (Thumb, 524 bytes, Stack size 56 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[494]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[49b]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[499]"></a>etharp_raw</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[49f]"></a>etharp_request_dst</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, etharp.o(i.etharp_request_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[498]"></a>etharp_update_arp_entry</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[496]"></a>free_etharp_q</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, etharp.o(i.free_etharp_q))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>

<P><STRONG><a name="[47b]"></a>do_memp_free_pool</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, memp.o(i.do_memp_free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[47d]"></a>do_memp_malloc_pool_fn</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, memp.o(i.do_memp_malloc_pool_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>

<P><STRONG><a name="[47c]"></a>memp_overflow_check_element</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, memp.o(i.memp_overflow_check_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_overflow_check_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[597]"></a>memp_overflow_init_element</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, memp.o(i.memp_overflow_init_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = memp_overflow_init_element &rArr; mem_overflow_init_raw &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_overflow_init_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>

<P><STRONG><a name="[51c]"></a>ip4_input_accept</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ip4.o(i.ip4_input_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ip4_input_accept &rArr; ip4_addr_isbroadcast_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[60b]"></a>raw_input_local_match</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, raw.o(i.raw_input_local_match))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
</UL>

<P><STRONG><a name="[6c9]"></a>tcp_create_segment</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[6d5]"></a>tcp_output_alloc_header</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header_common
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[6de]"></a>tcp_output_alloc_header_common</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_alloc_header_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>

<P><STRONG><a name="[6d7]"></a>tcp_output_control_segment</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_output_control_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_output_control_segment &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_route
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[6d6]"></a>tcp_output_fill_options</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_fill_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = tcp_output_fill_options &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[6dd]"></a>tcp_output_segment</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment_busy
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[6df]"></a>tcp_output_segment_busy</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_output_segment_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = tcp_output_segment_busy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[6e1]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[6dc]"></a>tcp_route</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_route &rArr; ip4_route_src &rArr; ip4_route &rArr; lwip_ip4_route_src
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_control_segment
</UL>

<P><STRONG><a name="[6ed]"></a>tcp_write_checks</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_write_checks &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[4e2]"></a>icmp_send_response</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[5cd]"></a>netconn_apimsg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, api_lib.o(i.netconn_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_vectors_partly
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_prepare_delete
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[5cf]"></a>netconn_close_shutdown</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, api_lib.o(i.netconn_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>

<P><STRONG><a name="[5d2]"></a>netconn_recv_data</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_udp_raw_netbuf_flags
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>

<P><STRONG><a name="[5d3]"></a>netconn_recv_data_tcp</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, api_lib.o(i.netconn_recv_data_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = netconn_recv_data_tcp &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_err
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd_msg
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf_flags
</UL>

<P><STRONG><a name="[5d4]"></a>netconn_tcp_recvd_msg</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, api_lib.o(i.netconn_tcp_recvd_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = netconn_tcp_recvd_msg &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_tcp_recvd
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data_tcp
</UL>

<P><STRONG><a name="[508]"></a>inet_cksum_pseudo_base</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_cksum_pseudo_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[6ce]"></a>tcp_free_acked_segments</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_free_acked_segments))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_free_acked_segments &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[6e0]"></a>tcp_get_next_optbyte</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_get_next_optbyte))
<BR><BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[6d3]"></a>tcp_input_delayed_close</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tcp_in.o(i.tcp_input_delayed_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = tcp_input_delayed_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[6d0]"></a>tcp_listen_input</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[6db]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[6d9]"></a>tcp_parseopt</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = tcp_parseopt &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_next_optbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[6d2]"></a>tcp_process</STRONG> (Thumb, 1732 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route_src
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[6e3]"></a>tcp_receive</STRONG> (Thumb, 3080 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_acked_segments
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[6cf]"></a>tcp_timewait_input</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[45a]"></a>dns_alloc_pcb</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dns.o(i.dns_alloc_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = dns_alloc_pcb &rArr; dns_alloc_random_port &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[45b]"></a>dns_alloc_random_port</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dns.o(i.dns_alloc_random_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = dns_alloc_random_port &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
</UL>

<P><STRONG><a name="[466]"></a>dns_backupserver_available</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dns.o(i.dns_backupserver_available))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[461]"></a>dns_call_found</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, dns.o(i.dns_call_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[462]"></a>dns_check_entries</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dns.o(i.dns_check_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[463]"></a>dns_check_entry</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, dns.o(i.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_backupserver_available
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[467]"></a>dns_compare_name</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, dns.o(i.dns_compare_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dns_compare_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[469]"></a>dns_correct_response</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dns.o(i.dns_correct_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = dns_correct_response &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[464]"></a>dns_create_txid</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dns.o(i.dns_create_txid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dns_create_txid
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[46a]"></a>dns_enqueue</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, dns.o(i.dns_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[46e]"></a>dns_lookup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dns.o(i.dns_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dns_lookup &rArr; lwip_strnicmp
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[107]"></a>dns_recv</STRONG> (Thumb, 500 bytes, Stack size 72 bytes, dns.o(i.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = dns_recv &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_backupserver_available
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_alloc_random_port)
</UL>
<P><STRONG><a name="[465]"></a>dns_send</STRONG> (Thumb, 356 bytes, Stack size 72 bytes, dns.o(i.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[470]"></a>dns_skip_name</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dns.o(i.dns_skip_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dns_skip_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[115]"></a>lwip_cyclic_timer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, timeouts.o(i.lwip_cyclic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = lwip_cyclic_timer &rArr; sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_abs
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.sys_timeouts_init)
<LI> timeouts.o(i.lwip_cyclic_timer)
</UL>
<P><STRONG><a name="[540]"></a>sys_timeout_abs</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, timeouts.o(i.sys_timeout_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sys_timeout_abs &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_cyclic_timer
</UL>

<P><STRONG><a name="[164]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timeouts.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.tcp_timer_needed)
<LI> timeouts.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[4e9]"></a>igmp_delaying_member</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, igmp.o(i.igmp_delaying_member))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = igmp_delaying_member &rArr; igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</UL>

<P><STRONG><a name="[4ed]"></a>igmp_ip_output_if</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, igmp.o(i.igmp_ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; pbuf_add_header &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>

<P><STRONG><a name="[4f1]"></a>igmp_lookup_group</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, igmp.o(i.igmp_lookup_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = igmp_lookup_group &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</UL>

<P><STRONG><a name="[4f5]"></a>igmp_remove_group</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, igmp.o(i.igmp_remove_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_remove_group
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>

<P><STRONG><a name="[4f2]"></a>igmp_send</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, igmp.o(i.igmp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = igmp_send &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>

<P><STRONG><a name="[4ea]"></a>igmp_start_timer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, igmp.o(i.igmp_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>

<P><STRONG><a name="[4f8]"></a>igmp_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, igmp.o(i.igmp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = igmp_timeout &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>

<P><STRONG><a name="[6f3]"></a>udp_input_local_match</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, udp.o(i.udp_input_local_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = udp_input_local_match &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[6f2]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[5fb]"></a>pbuf_add_header_impl</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_add_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>

<P><STRONG><a name="[601]"></a>pbuf_free_ooseq</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free_ooseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_ooseq
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[12e]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = pbuf_free_ooseq_callback &rArr; pbuf_free_ooseq &rArr; tcp_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_pool_is_empty)
</UL>
<P><STRONG><a name="[603]"></a>pbuf_header_impl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = pbuf_header_impl &rArr; pbuf_add_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
</UL>

<P><STRONG><a name="[5fe]"></a>pbuf_init_alloced_pbuf</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_init_alloced_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_init_alloced_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
</UL>

<P><STRONG><a name="[5fd]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_pool_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_try_callback &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_try_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[607]"></a>pbuf_skip_const</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, pbuf.o(i.pbuf_skip_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>

<P><STRONG><a name="[11b]"></a>accept_function</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, api_msg.o(i.accept_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_err_to_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_listen)
</UL>
<P><STRONG><a name="[118]"></a>err_tcp</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_err_to_msg
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[554]"></a>lwip_netconn_do_close_internal</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, api_msg.o(i.lwip_netconn_do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
</UL>

<P><STRONG><a name="[119]"></a>lwip_netconn_do_connected</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, api_msg.o(i.lwip_netconn_do_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lwip_netconn_do_connected &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_connect)
</UL>
<P><STRONG><a name="[11a]"></a>lwip_netconn_do_dns_found</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_dns_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_gethostbyname)
</UL>
<P><STRONG><a name="[566]"></a>lwip_netconn_do_writemore</STRONG> (Thumb, 770 bytes, Stack size 56 bytes, api_msg.o(i.lwip_netconn_do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = lwip_netconn_do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
</UL>

<P><STRONG><a name="[3cb]"></a>lwip_netconn_err_to_msg</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, api_msg.o(i.lwip_netconn_err_to_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = lwip_netconn_err_to_msg &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[553]"></a>netconn_drain</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_is_err_msg
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[561]"></a>pcb_new</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[117]"></a>poll_tcp</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[12f]"></a>recv_raw</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, api_msg.o(i.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = recv_raw &rArr; pbuf_clone &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[161]"></a>recv_tcp</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[130]"></a>recv_udp</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[116]"></a>sent_tcp</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.lwip_netconn_do_close_internal)
<LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[3cf]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[571]"></a>ping_prepare_echo</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ping.o(i.ping_prepare_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ping_prepare_echo &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
</UL>

<P><STRONG><a name="[163]"></a>tcp_accept_null</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_accept_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = tcp_accept_null &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog_and_err)
</UL>
<P><STRONG><a name="[6bf]"></a>tcp_close_shutdown</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_listen
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[6c4]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tcp.o(i.tcp_close_shutdown_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handle_closepend
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[6c3]"></a>tcp_free_listen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tcp.o(i.tcp_free_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = tcp_free_listen &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[6b9]"></a>tcp_handle_closepend</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp.o(i.tcp_handle_closepend))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = tcp_handle_closepend &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[6bc]"></a>tcp_kill_prio</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[6bb]"></a>tcp_kill_state</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[6ba]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[6c2]"></a>tcp_listen_closed</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = tcp_listen_closed &rArr; tcp_remove_listener &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[6da]"></a>tcp_netif_ip_addr_changed_pcblist</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tcp.o(i.tcp_netif_ip_addr_changed_pcblist))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[6bd]"></a>tcp_new_port</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[6d8]"></a>tcp_remove_listener</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcp.o(i.tcp_remove_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_remove_listener &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
</UL>

<P><STRONG><a name="[11d]"></a>tcpip_init_done_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.tcpip_init_done_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = tcpip_init_done_callback &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(i.lwip_system_init)
</UL>
<P><STRONG><a name="[10a]"></a>eth_netif_device_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ethernetif.o(i.eth_netif_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = eth_netif_device_init &rArr; netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_flags_sync
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[10e]"></a>eth_rx_thread_entry</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, ethernetif.o(i.eth_rx_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = eth_rx_thread_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_system_device_init_private)
</UL>
<P><STRONG><a name="[10f]"></a>eth_tx_thread_entry</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ethernetif.o(i.eth_tx_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = eth_tx_thread_entry &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_system_device_init_private)
</UL>
<P><STRONG><a name="[108]"></a>ethernetif_linkoutput</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ethernetif.o(i.ethernetif_linkoutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = ethernetif_linkoutput &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[19a]"></a>lwip_netdev_set_addr_info</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ethernetif.o(i.lwip_netdev_set_addr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = lwip_netdev_set_addr_info &rArr; netif_set_addr &rArr; netif_do_set_ipaddr &rArr; netif_do_ip_addr_changed &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; tcp_output_alloc_header_common &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>lwip_netdev_set_default</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.lwip_netdev_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_netdev_set_default
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>lwip_netdev_set_dns_server</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ethernetif.o(i.lwip_netdev_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lwip_netdev_set_dns_server &rArr; dns_setserver &rArr; netdev_get_by_name &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>lwip_netdev_set_down</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.lwip_netdev_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = lwip_netdev_set_down &rArr; netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>lwip_netdev_set_up</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.lwip_netdev_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = lwip_netdev_set_up &rArr; netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_alloc_reference &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[489]"></a>netdev_add</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ethernetif.o(i.netdev_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = netdev_add &rArr; rt_calloc &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lwip_netdev_set_pf_info
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_flags_sync
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[48d]"></a>netdev_flags_sync</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ethernetif.o(i.netdev_flags_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = netdev_flags_sync &rArr; netdev_get_by_name &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dhcp_status
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[1c8]"></a>posix_mq_system_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mqueue.o(i.posix_mq_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = posix_mq_system_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqueue.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[1c9]"></a>posix_sem_system_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, semaphore.o(i.posix_sem_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = posix_sem_system_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> semaphore.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[1ca]"></a>pthread_key_system_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pthread_tls.o(i.pthread_key_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pthread_key_system_init &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pthread_tls.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[67d]"></a>root_hub_ctrl</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, hub.o(i.root_hub_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = root_hub_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>

<P><STRONG><a name="[67e]"></a>rt_usb_hcd_setup_xfer</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, hub.o(i.rt_usb_hcd_setup_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_descriptor
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>

<P><STRONG><a name="[15a]"></a>rt_usbh_hub_disable</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, hub.o(i.rt_usbh_hub_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_usbh_hub_disable &rArr; rt_usbh_detach_instance &rArr; rt_usb_hcd_free_pipe &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(i.rt_usbh_class_driver_hub)
</UL>
<P><STRONG><a name="[159]"></a>rt_usbh_hub_enable</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, hub.o(i.rt_usbh_hub_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_usbh_hub_enable &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_set_port_feature
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_descriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(i.rt_usbh_class_driver_hub)
</UL>
<P><STRONG><a name="[15d]"></a>rt_usbh_hub_irq</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hub.o(i.rt_usbh_hub_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 2532<LI>Call Chain = rt_usbh_hub_irq &rArr; rt_usbh_hub_port_change &rArr; rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(i.rt_usbh_hub_enable)
</UL>
<P><STRONG><a name="[682]"></a>rt_usbh_hub_port_change</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, hub.o(i.rt_usbh_hub_port_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 2508<LI>Call Chain = rt_usbh_hub_port_change &rArr; rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_alloc_instance
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_reset_port
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_debounce
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_get_port_status
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_clear_port_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_thread_entry
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_irq
</UL>

<P><STRONG><a name="[15e]"></a>rt_usbh_hub_thread_entry</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hub.o(i.rt_usbh_hub_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 2524<LI>Call Chain = rt_usbh_hub_thread_entry &rArr; rt_usbh_hub_port_change &rArr; rt_usbh_attatch_instance &rArr; rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_hub_port_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(i.rt_usbh_hub_init)
</UL>
<P><STRONG><a name="[667]"></a>rt_usb_hcd_alloc_pipe</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, usbhost_core.o(i.rt_usb_hcd_alloc_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_usb_hcd_alloc_pipe &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[668]"></a>rt_usb_hcd_free_pipe</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbhost_core.o(i.rt_usb_hcd_free_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_usb_hcd_free_pipe &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_detach_instance
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_attatch_instance
</UL>

<P><STRONG><a name="[679]"></a>rt_usb_hcd_setup_xfer</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbhost_core.o(i.rt_usb_hcd_setup_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_configure
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_set_address
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_descriptor
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_clear_feature
</UL>

<P><STRONG><a name="[158]"></a>rt_udisk_control</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, udisk.o(i.rt_udisk_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_udisk_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udisk.o(i.rt_udisk_run)
</UL>
<P><STRONG><a name="[155]"></a>rt_udisk_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udisk.o(i.rt_udisk_init))
<BR>[Address Reference Count : 1]<UL><LI> udisk.o(i.rt_udisk_run)
</UL>
<P><STRONG><a name="[156]"></a>rt_udisk_read</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, udisk.o(i.rt_udisk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_udisk_read &rArr; rt_usbh_storage_read10 &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udisk.o(i.rt_udisk_run)
</UL>
<P><STRONG><a name="[157]"></a>rt_udisk_write</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, udisk.o(i.rt_udisk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_udisk_write &rArr; rt_usbh_storage_write10 &rArr; rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udisk.o(i.rt_udisk_run)
</UL>
<P><STRONG><a name="[664]"></a>udisk_free_id</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udisk.o(i.udisk_free_id))
<BR><BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>

<P><STRONG><a name="[662]"></a>udisk_get_id</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, udisk.o(i.udisk_get_id))
<BR><BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
</UL>

<P><STRONG><a name="[3a1]"></a>_pipe_check</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, mass.o(i._pipe_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_clear_feature
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_bulk_only_xfer
</UL>

<P><STRONG><a name="[666]"></a>rt_usb_bulk_only_xfer</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, mass.o(i.rt_usb_bulk_only_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_usb_bulk_only_xfer &rArr; _pipe_check &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pipe_check
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_hcd_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_write10
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_test_unit_ready
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_request_sense
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_read10
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_inquiry
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_capacity
</UL>

<P><STRONG><a name="[687]"></a>rt_usb_hcd_setup_xfer</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, mass.o(i.rt_usb_hcd_setup_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_usb_hcd_setup_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_reset
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_get_max_lun
</UL>

<P><STRONG><a name="[686]"></a>rt_usb_instance_find_pipe</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mass.o(i.rt_usb_instance_find_pipe))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_storage_enable
</UL>

<P><STRONG><a name="[15c]"></a>rt_usbh_storage_disable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mass.o(i.rt_usbh_storage_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rt_usbh_storage_disable &rArr; rt_udisk_stop &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mass.o(i.rt_usbh_class_driver_storage)
</UL>
<P><STRONG><a name="[15b]"></a>rt_usbh_storage_enable</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, mass.o(i.rt_usbh_storage_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = rt_usbh_storage_enable &rArr; rt_udisk_run &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usb_instance_find_pipe
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_udisk_run
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbh_get_endpoint_descriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mass.o(i.rt_usbh_class_driver_storage)
</UL>
<P><STRONG><a name="[5d8]"></a>netdev_auto_change_default</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, netdev.o(i.netdev_auto_change_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netdev_auto_change_default &rArr; netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_default
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
</UL>

<P><STRONG><a name="[5db]"></a>netdev_cmd_netstat</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, netdev.o(i.netdev_cmd_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = netdev_cmd_netstat &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_netstat
</UL>

<P><STRONG><a name="[5df]"></a>netdev_list_dns</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, netdev.o(i.netdev_list_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = netdev_list_dns &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[5e3]"></a>netdev_list_if</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, netdev.o(i.netdev_list_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = netdev_list_if &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
</UL>

<P><STRONG><a name="[5e0]"></a>netdev_set_dns</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, netdev.o(i.netdev_set_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = netdev_set_dns &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[5e4]"></a>netdev_set_if</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, netdev.o(i.netdev_set_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = netdev_set_if &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
</UL>

<P><STRONG><a name="[5dc]"></a>rt_slist_next</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netdev.o(i.rt_slist_next))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
</UL>

<P><STRONG><a name="[19f]"></a>dfs_net_close</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, dfs_net.o(i.dfs_net_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = dfs_net_close &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>dfs_net_ioctl</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, dfs_net.o(i.dfs_net_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dfs_net_ioctl &rArr; sal_ioctlsocket
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>dfs_net_poll</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_net.o(i.dfs_net_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dfs_net_poll &rArr; sal_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>dfs_net_read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, dfs_net.o(i.dfs_net_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_net_read &rArr; sal_recvfrom
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>dfs_net_write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, dfs_net.o(i.dfs_net_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_net_write &rArr; sal_sendto
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>event_callback</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, af_inet_lwip.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = event_callback &rArr; rt_wqueue_wakeup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(i.inet_socket)
</UL>
<P><STRONG><a name="[1a9]"></a>inet_accept</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, af_inet_lwip.o(i.inet_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = inet_accept &rArr; lwip_accept &rArr; free_socket &rArr; free_socket_free_elements &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element &rArr; mem_overflow_check_raw &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>inet_getsockname</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, af_inet_lwip.o(i.inet_getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = inet_getsockname &rArr; lwip_getsockname &rArr; lwip_getaddrname &rArr; netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[1b2]"></a>inet_poll</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, af_inet_lwip.o(i.inet_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = inet_poll &rArr; lwip_tryget_socket &rArr; tryget_socket_unconn
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>inet_socket</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, af_inet_lwip.o(i.inet_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = inet_socket &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _memheap_alloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tryget_socket
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> af_inet_lwip.o(.constdata)
</UL>
<P><STRONG><a name="[505]"></a>rt_wqueue_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, af_inet_lwip.o(i.rt_wqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_socket
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_accept
</UL>

<P><STRONG><a name="[160]"></a>check_netdev_internet_up_work</STRONG> (Thumb, 462 bytes, Stack size 160 bytes, sal_socket.o(i.check_netdev_internet_up_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = check_netdev_internet_up_work &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_internet_status
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_socket.o(i.sal_check_netdev_internet_up)
</UL>
<P><STRONG><a name="[693]"></a>sal_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sal_socket.o(i.sal_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sal_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[697]"></a>sal_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sal_socket.o(i.sal_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sal_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[6aa]"></a>socket_alloc</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sal_socket.o(i.socket_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = socket_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
</UL>

<P><STRONG><a name="[692]"></a>socket_delete</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sal_socket.o(i.socket_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = socket_delete &rArr; socket_free &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
</UL>

<P><STRONG><a name="[6ab]"></a>socket_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sal_socket.o(i.socket_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = socket_free &rArr; rt_free &rArr; _memheap_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[696]"></a>socket_init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, sal_socket.o(i.socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = socket_init &rArr; netdev_get_by_family
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
</UL>

<P><STRONG><a name="[695]"></a>socket_new</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sal_socket.o(i.socket_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = socket_new &rArr; socket_alloc &rArr; rt_realloc &rArr; _memheap_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
</UL>

<P><STRONG><a name="[f2]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
